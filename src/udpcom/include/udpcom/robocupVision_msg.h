// Generated by gencpp from file robocup2019_vision/robocupVision_msg.msg
// DO NOT EDIT!


#ifndef ROBOCUP2019_VISION_MESSAGE_ROBOCUPVISION_MSG_H
#define ROBOCUP2019_VISION_MESSAGE_ROBOCUPVISION_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robocup2019_vision
{
template <class ContainerAllocator>
struct robocupVision_msg_
{
  typedef robocupVision_msg_<ContainerAllocator> Type;

  robocupVision_msg_()
    : ballX(0)
    , ballY(0)
    , ballD(0)
    , goalX(0)
    , goalY(0)
    , targetX(0)
    , targetY(0)
    , nowX(0)
    , nowY(0)
    , yaw(0)  {
    }
  robocupVision_msg_(const ContainerAllocator& _alloc)
    : ballX(0)
    , ballY(0)
    , ballD(0)
    , goalX(0)
    , goalY(0)
    , targetX(0)
    , targetY(0)
    , nowX(0)
    , nowY(0)
    , yaw(0)  {
  (void)_alloc;
    }



   typedef int64_t _ballX_type;
  _ballX_type ballX;

   typedef int64_t _ballY_type;
  _ballY_type ballY;

   typedef int64_t _ballD_type;
  _ballD_type ballD;

   typedef int64_t _goalX_type;
  _goalX_type goalX;

   typedef int64_t _goalY_type;
  _goalY_type goalY;

   typedef int64_t _targetX_type;
  _targetX_type targetX;

   typedef int64_t _targetY_type;
  _targetY_type targetY;

   typedef int64_t _nowX_type;
  _nowX_type nowX;

   typedef int64_t _nowY_type;
  _nowY_type nowY;

   typedef int64_t _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::robocup2019_vision::robocupVision_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robocup2019_vision::robocupVision_msg_<ContainerAllocator> const> ConstPtr;

}; // struct robocupVision_msg_

typedef ::robocup2019_vision::robocupVision_msg_<std::allocator<void> > robocupVision_msg;

typedef boost::shared_ptr< ::robocup2019_vision::robocupVision_msg > robocupVision_msgPtr;
typedef boost::shared_ptr< ::robocup2019_vision::robocupVision_msg const> robocupVision_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robocup2019_vision::robocupVision_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robocup2019_vision::robocupVision_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robocup2019_vision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'robocup2019_vision': ['/home/robit/catkin_ws/src/robocup2019_vision/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robocup2019_vision::robocupVision_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robocup2019_vision::robocupVision_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robocup2019_vision::robocupVision_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robocup2019_vision::robocupVision_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robocup2019_vision::robocupVision_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robocup2019_vision::robocupVision_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robocup2019_vision::robocupVision_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db3b8d49234433ce0e829dd2f33004e3";
  }

  static const char* value(const ::robocup2019_vision::robocupVision_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb3b8d49234433ceULL;
  static const uint64_t static_value2 = 0x0e829dd2f33004e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::robocup2019_vision::robocupVision_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robocup2019_vision/robocupVision_msg";
  }

  static const char* value(const ::robocup2019_vision::robocupVision_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robocup2019_vision::robocupVision_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 ballX\n\
int64 ballY\n\
int64 ballD\n\
\n\
int64 goalX\n\
int64 goalY\n\
\n\
int64 targetX\n\
int64 targetY\n\
\n\
int64 nowX\n\
int64 nowY\n\
\n\
int64 yaw\n\
";
  }

  static const char* value(const ::robocup2019_vision::robocupVision_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robocup2019_vision::robocupVision_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ballX);
      stream.next(m.ballY);
      stream.next(m.ballD);
      stream.next(m.goalX);
      stream.next(m.goalY);
      stream.next(m.targetX);
      stream.next(m.targetY);
      stream.next(m.nowX);
      stream.next(m.nowY);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robocupVision_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robocup2019_vision::robocupVision_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robocup2019_vision::robocupVision_msg_<ContainerAllocator>& v)
  {
    s << indent << "ballX: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ballX);
    s << indent << "ballY: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ballY);
    s << indent << "ballD: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ballD);
    s << indent << "goalX: ";
    Printer<int64_t>::stream(s, indent + "  ", v.goalX);
    s << indent << "goalY: ";
    Printer<int64_t>::stream(s, indent + "  ", v.goalY);
    s << indent << "targetX: ";
    Printer<int64_t>::stream(s, indent + "  ", v.targetX);
    s << indent << "targetY: ";
    Printer<int64_t>::stream(s, indent + "  ", v.targetY);
    s << indent << "nowX: ";
    Printer<int64_t>::stream(s, indent + "  ", v.nowX);
    s << indent << "nowY: ";
    Printer<int64_t>::stream(s, indent + "  ", v.nowY);
    s << indent << "yaw: ";
    Printer<int64_t>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOCUP2019_VISION_MESSAGE_ROBOCUPVISION_MSG_H
