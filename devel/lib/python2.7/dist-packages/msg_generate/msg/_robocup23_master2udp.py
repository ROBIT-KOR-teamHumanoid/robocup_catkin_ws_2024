# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msg_generate/robocup23_master2udp.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class robocup23_master2udp(genpy.Message):
  _md5sum = "c362ddeab15e7aaf6c2da6140bdfe915"
  _type = "msg_generate/robocup23_master2udp"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 robot_num
int64 robot_state
int64 robot_coor_x
int64 robot_coor_y
int64 roboy_imu_yaw
int64 ball_dist
int64 ball_coor_x
int64 ball_coor_y
int64 myTeam
"""
  __slots__ = ['robot_num','robot_state','robot_coor_x','robot_coor_y','roboy_imu_yaw','ball_dist','ball_coor_x','ball_coor_y','myTeam']
  _slot_types = ['int64','int64','int64','int64','int64','int64','int64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_num,robot_state,robot_coor_x,robot_coor_y,roboy_imu_yaw,ball_dist,ball_coor_x,ball_coor_y,myTeam

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robocup23_master2udp, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robot_num is None:
        self.robot_num = 0
      if self.robot_state is None:
        self.robot_state = 0
      if self.robot_coor_x is None:
        self.robot_coor_x = 0
      if self.robot_coor_y is None:
        self.robot_coor_y = 0
      if self.roboy_imu_yaw is None:
        self.roboy_imu_yaw = 0
      if self.ball_dist is None:
        self.ball_dist = 0
      if self.ball_coor_x is None:
        self.ball_coor_x = 0
      if self.ball_coor_y is None:
        self.ball_coor_y = 0
      if self.myTeam is None:
        self.myTeam = 0
    else:
      self.robot_num = 0
      self.robot_state = 0
      self.robot_coor_x = 0
      self.robot_coor_y = 0
      self.roboy_imu_yaw = 0
      self.ball_dist = 0
      self.ball_coor_x = 0
      self.ball_coor_y = 0
      self.myTeam = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9q().pack(_x.robot_num, _x.robot_state, _x.robot_coor_x, _x.robot_coor_y, _x.roboy_imu_yaw, _x.ball_dist, _x.ball_coor_x, _x.ball_coor_y, _x.myTeam))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.robot_num, _x.robot_state, _x.robot_coor_x, _x.robot_coor_y, _x.roboy_imu_yaw, _x.ball_dist, _x.ball_coor_x, _x.ball_coor_y, _x.myTeam,) = _get_struct_9q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9q().pack(_x.robot_num, _x.robot_state, _x.robot_coor_x, _x.robot_coor_y, _x.roboy_imu_yaw, _x.ball_dist, _x.ball_coor_x, _x.ball_coor_y, _x.myTeam))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.robot_num, _x.robot_state, _x.robot_coor_x, _x.robot_coor_y, _x.roboy_imu_yaw, _x.ball_dist, _x.ball_coor_x, _x.ball_coor_y, _x.myTeam,) = _get_struct_9q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9q = None
def _get_struct_9q():
    global _struct_9q
    if _struct_9q is None:
        _struct_9q = struct.Struct("<9q")
    return _struct_9q
