# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msg_generate/robocup_localization24.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class robocup_localization24(genpy.Message):
  _md5sum = "8ee6effd3d721320075c4ac44f4b0bfe"
  _type = "msg_generate/robocup_localization24"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 Ball_X
float64 Ball_Y
float64 Ball_speed_X
float64 Ball_speed_Y
float64 Robot_X
float64 Robot_Y
float64 Obstacle_X
float64 Obstacle_Y

float64 Obstacle0_X
float64 Obstacle0_Y
float64 Obstacle1_X
float64 Obstacle1_Y
float64 Obstacle2_X
float64 Obstacle2_Y
float64 Obstacle3_X
float64 Obstacle3_Y
"""
  __slots__ = ['Ball_X','Ball_Y','Ball_speed_X','Ball_speed_Y','Robot_X','Robot_Y','Obstacle_X','Obstacle_Y','Obstacle0_X','Obstacle0_Y','Obstacle1_X','Obstacle1_Y','Obstacle2_X','Obstacle2_Y','Obstacle3_X','Obstacle3_Y']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Ball_X,Ball_Y,Ball_speed_X,Ball_speed_Y,Robot_X,Robot_Y,Obstacle_X,Obstacle_Y,Obstacle0_X,Obstacle0_Y,Obstacle1_X,Obstacle1_Y,Obstacle2_X,Obstacle2_Y,Obstacle3_X,Obstacle3_Y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robocup_localization24, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Ball_X is None:
        self.Ball_X = 0.
      if self.Ball_Y is None:
        self.Ball_Y = 0.
      if self.Ball_speed_X is None:
        self.Ball_speed_X = 0.
      if self.Ball_speed_Y is None:
        self.Ball_speed_Y = 0.
      if self.Robot_X is None:
        self.Robot_X = 0.
      if self.Robot_Y is None:
        self.Robot_Y = 0.
      if self.Obstacle_X is None:
        self.Obstacle_X = 0.
      if self.Obstacle_Y is None:
        self.Obstacle_Y = 0.
      if self.Obstacle0_X is None:
        self.Obstacle0_X = 0.
      if self.Obstacle0_Y is None:
        self.Obstacle0_Y = 0.
      if self.Obstacle1_X is None:
        self.Obstacle1_X = 0.
      if self.Obstacle1_Y is None:
        self.Obstacle1_Y = 0.
      if self.Obstacle2_X is None:
        self.Obstacle2_X = 0.
      if self.Obstacle2_Y is None:
        self.Obstacle2_Y = 0.
      if self.Obstacle3_X is None:
        self.Obstacle3_X = 0.
      if self.Obstacle3_Y is None:
        self.Obstacle3_Y = 0.
    else:
      self.Ball_X = 0.
      self.Ball_Y = 0.
      self.Ball_speed_X = 0.
      self.Ball_speed_Y = 0.
      self.Robot_X = 0.
      self.Robot_Y = 0.
      self.Obstacle_X = 0.
      self.Obstacle_Y = 0.
      self.Obstacle0_X = 0.
      self.Obstacle0_Y = 0.
      self.Obstacle1_X = 0.
      self.Obstacle1_Y = 0.
      self.Obstacle2_X = 0.
      self.Obstacle2_Y = 0.
      self.Obstacle3_X = 0.
      self.Obstacle3_Y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_16d().pack(_x.Ball_X, _x.Ball_Y, _x.Ball_speed_X, _x.Ball_speed_Y, _x.Robot_X, _x.Robot_Y, _x.Obstacle_X, _x.Obstacle_Y, _x.Obstacle0_X, _x.Obstacle0_Y, _x.Obstacle1_X, _x.Obstacle1_Y, _x.Obstacle2_X, _x.Obstacle2_Y, _x.Obstacle3_X, _x.Obstacle3_Y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 128
      (_x.Ball_X, _x.Ball_Y, _x.Ball_speed_X, _x.Ball_speed_Y, _x.Robot_X, _x.Robot_Y, _x.Obstacle_X, _x.Obstacle_Y, _x.Obstacle0_X, _x.Obstacle0_Y, _x.Obstacle1_X, _x.Obstacle1_Y, _x.Obstacle2_X, _x.Obstacle2_Y, _x.Obstacle3_X, _x.Obstacle3_Y,) = _get_struct_16d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_16d().pack(_x.Ball_X, _x.Ball_Y, _x.Ball_speed_X, _x.Ball_speed_Y, _x.Robot_X, _x.Robot_Y, _x.Obstacle_X, _x.Obstacle_Y, _x.Obstacle0_X, _x.Obstacle0_Y, _x.Obstacle1_X, _x.Obstacle1_Y, _x.Obstacle2_X, _x.Obstacle2_Y, _x.Obstacle3_X, _x.Obstacle3_Y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 128
      (_x.Ball_X, _x.Ball_Y, _x.Ball_speed_X, _x.Ball_speed_Y, _x.Robot_X, _x.Robot_Y, _x.Obstacle_X, _x.Obstacle_Y, _x.Obstacle0_X, _x.Obstacle0_Y, _x.Obstacle1_X, _x.Obstacle1_Y, _x.Obstacle2_X, _x.Obstacle2_Y, _x.Obstacle3_X, _x.Obstacle3_Y,) = _get_struct_16d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16d = None
def _get_struct_16d():
    global _struct_16d
    if _struct_16d is None:
        _struct_16d = struct.Struct("<16d")
    return _struct_16d
