# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msg_generate/tune2walk.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class tune2walk(genpy.Message):
  _md5sum = "75d5cf0d1f6070c84882cf68f96d4a52"
  _type = "msg_generate/tune2walk"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool IK_Flag
float64 Entire_Time
float64 Frequency
float64 Default_X_Right
float64 Default_X_Left
float64 Default_Y_Right
float64 Default_Y_Left
float64 Default_Z_Right
float64 Default_Z_Left
float64 Offset_10_Motor
float64 Offset_11_Motor
float64 Offset_12_Motor
float64 Offset_13_Motor
float64 Offset_14_Motor
float64 Offset_15_Motor
float64 Offset_16_Motor
float64 Offset_17_Motor
float64 Offset_18_Motor
float64 Offset_19_Motor
float64 Offset_20_Motor
float64 Offset_21_Motor
float64 Swing_Right_Leg
float64 Swing_Left_Leg
float64 Swing_Right_Shoulder
float64 Swing_Left_Shoulder
float64 Rise_Right_Leg
float64 Rise_Left_Leg
float64 Start_Entire_Time
float64 Start_Swing
float64 Start_Rise
float64 End_Entire_Time
float64 End_Swing
float64 End_Rise
float64 Test_X
float64 Test_Side
float64 Test_Yaw
float64 Tuning_X
float64 Tuning_Side
float64 Tuning_Yaw
float64 Balance_Value_0
float64 Balance_Value_1
float64 Balance_Value_2
float64 Balance_Value_3
float64 Balance_Pitch_GP
float64 Balance_Pitch_GI
float64 Balance_Pitch_GD
float64 Balance_Pitch_ELIMIT
float64 Balance_Pitch_OLIMIT
float64 Balance_Pitch_Neg_Target
float64 Balance_Pitch_Pos_Target
float64 Balance_Roll_GP
float64 Balance_Roll_GI
float64 Balance_Roll_GD
float64 Balance_Roll_ELIMIT
float64 Balance_Roll_OLIMIT
float64 Balance_Roll_Neg_Target
float64 Balance_Roll_Pos_Target
float64 Balance_Angle_Pitch_GP
float64 Balance_Angle_Pitch_GI
float64 Balance_Angle_Pitch_GD
float64 Balance_Angle_Pitch_ELIMIT
float64 Balance_Angle_Pitch_OLIMIT
float64 Balance_Angle_Pitch_Neg_Target
float64 Balance_Angle_Pitch_Pos_Target

float64 Balance_Value_4
float64 Balance_Value_5
int64 Balance_Pitch_Flag_imu #bool
float64 Balance_Pitch_GP_imu
float64 Balance_Pitch_GI_imu
float64 Balance_Pitch_GD_imu
float64 Balance_Pitch_Neg_Target_imu
float64 Balance_Pitch_Pos_Target_imu
float64 Balance_Pitch_ELIMIT_imu
float64 Balance_Pitch_OLIMIT_imu

int64 Balance_Roll_Flag_imu #bool
float64 Balance_Roll_GP_imu
float64 Balance_Roll_GI_imu
float64 Balance_Roll_GD_imu
float64 Balance_Roll_Neg_Target_imu
float64 Balance_Roll_Pos_Target_imu
float64 Balance_Roll_ELIMIT_imu
float64 Balance_Roll_OLIMIT_imu

int64 Balance_Pitch_Flag #bool
int64 Balance_Ankle_Pitch_Flag #bool
int64 Balance_Roll_Flag #bool
int64 Ratio_Check_Flag

float64 Center2Leg
float64 Link2Link
float64 Init_Z_Up

float64 Percentage_of_IK_10_Motor
float64 Percentage_of_IK_11_Motor
float64 Percentage_of_IK_12_Motor
float64 Percentage_of_IK_13_Motor
float64 Percentage_of_IK_14_Motor
float64 Percentage_of_IK_15_Motor
float64 Percentage_of_IK_16_Motor
float64 Percentage_of_IK_17_Motor
float64 Percentage_of_IK_18_Motor
float64 Percentage_of_IK_19_Motor
float64 Percentage_of_IK_20_Motor
float64 Percentage_of_IK_21_Motor

float64 First_Pos_XR
float64 First_Neg_XR
float64 First_Pos_SideR
float64 First_Neg_SideR
float64 First_Pos_YawR
float64 First_Neg_YawR
float64 First_Pos_XL
float64 First_Neg_XL
float64 First_Pos_SideL
float64 First_Neg_SideL
float64 First_Pos_YawL
float64 First_Neg_YawL
float64 First_Pos_SideR_SwingMinus
float64 First_Neg_SideR_SwingMinus
float64 First_Pos_SideL_SwingMinus
float64 First_Neg_SideL_SwingMinus
int64 First_min
int64 First_max

float64 Second_Pos_XR
float64 Second_Neg_XR
float64 Second_Pos_SideR
float64 Second_Neg_SideR
float64 Second_Pos_YawR
float64 Second_Neg_YawR
float64 Second_Pos_XL
float64 Second_Neg_XL
float64 Second_Pos_SideL
float64 Second_Neg_SideL
float64 Second_Pos_YawL
float64 Second_Neg_YawL
float64 Second_Pos_SideR_SwingMinus
float64 Second_Neg_SideR_SwingMinus
float64 Second_Pos_SideL_SwingMinus
float64 Second_Neg_SideL_SwingMinus
int64 Second_min
int64 Second_max

float64 Third_Pos_XR
float64 Third_Neg_XR
float64 Third_Pos_SideR
float64 Third_Neg_SideR
float64 Third_Pos_YawR
float64 Third_Neg_YawR
float64 Third_Pos_XL
float64 Third_Neg_XL
float64 Third_Pos_SideL
float64 Third_Neg_SideL
float64 Third_Pos_YawL
float64 Third_Neg_YawL
float64 Third_Pos_SideR_SwingMinus
float64 Third_Neg_SideR_SwingMinus
float64 Third_Pos_SideL_SwingMinus
float64 Third_Neg_SideL_SwingMinus
int64 Third_min
int64 Third_max

float64 Fourth_Pos_XR
float64 Fourth_Neg_XR
float64 Fourth_Pos_SideR
float64 Fourth_Neg_SideR
float64 Fourth_Pos_YawR
float64 Fourth_Neg_YawR
float64 Fourth_Pos_XL
float64 Fourth_Neg_XL
float64 Fourth_Pos_SideL
float64 Fourth_Neg_SideL
float64 Fourth_Pos_YawL
float64 Fourth_Neg_YawL
float64 Fourth_Pos_SideR_SwingMinus
float64 Fourth_Neg_SideR_SwingMinus
float64 Fourth_Pos_SideL_SwingMinus
float64 Fourth_Neg_SideL_SwingMinus
int64 Fourth_min
int64 Fourth_max

int64 Landing_Time_Control_flag

int64 Control_System_flag

"""
  __slots__ = ['IK_Flag','Entire_Time','Frequency','Default_X_Right','Default_X_Left','Default_Y_Right','Default_Y_Left','Default_Z_Right','Default_Z_Left','Offset_10_Motor','Offset_11_Motor','Offset_12_Motor','Offset_13_Motor','Offset_14_Motor','Offset_15_Motor','Offset_16_Motor','Offset_17_Motor','Offset_18_Motor','Offset_19_Motor','Offset_20_Motor','Offset_21_Motor','Swing_Right_Leg','Swing_Left_Leg','Swing_Right_Shoulder','Swing_Left_Shoulder','Rise_Right_Leg','Rise_Left_Leg','Start_Entire_Time','Start_Swing','Start_Rise','End_Entire_Time','End_Swing','End_Rise','Test_X','Test_Side','Test_Yaw','Tuning_X','Tuning_Side','Tuning_Yaw','Balance_Value_0','Balance_Value_1','Balance_Value_2','Balance_Value_3','Balance_Pitch_GP','Balance_Pitch_GI','Balance_Pitch_GD','Balance_Pitch_ELIMIT','Balance_Pitch_OLIMIT','Balance_Pitch_Neg_Target','Balance_Pitch_Pos_Target','Balance_Roll_GP','Balance_Roll_GI','Balance_Roll_GD','Balance_Roll_ELIMIT','Balance_Roll_OLIMIT','Balance_Roll_Neg_Target','Balance_Roll_Pos_Target','Balance_Angle_Pitch_GP','Balance_Angle_Pitch_GI','Balance_Angle_Pitch_GD','Balance_Angle_Pitch_ELIMIT','Balance_Angle_Pitch_OLIMIT','Balance_Angle_Pitch_Neg_Target','Balance_Angle_Pitch_Pos_Target','Balance_Value_4','Balance_Value_5','Balance_Pitch_Flag_imu','Balance_Pitch_GP_imu','Balance_Pitch_GI_imu','Balance_Pitch_GD_imu','Balance_Pitch_Neg_Target_imu','Balance_Pitch_Pos_Target_imu','Balance_Pitch_ELIMIT_imu','Balance_Pitch_OLIMIT_imu','Balance_Roll_Flag_imu','Balance_Roll_GP_imu','Balance_Roll_GI_imu','Balance_Roll_GD_imu','Balance_Roll_Neg_Target_imu','Balance_Roll_Pos_Target_imu','Balance_Roll_ELIMIT_imu','Balance_Roll_OLIMIT_imu','Balance_Pitch_Flag','Balance_Ankle_Pitch_Flag','Balance_Roll_Flag','Ratio_Check_Flag','Center2Leg','Link2Link','Init_Z_Up','Percentage_of_IK_10_Motor','Percentage_of_IK_11_Motor','Percentage_of_IK_12_Motor','Percentage_of_IK_13_Motor','Percentage_of_IK_14_Motor','Percentage_of_IK_15_Motor','Percentage_of_IK_16_Motor','Percentage_of_IK_17_Motor','Percentage_of_IK_18_Motor','Percentage_of_IK_19_Motor','Percentage_of_IK_20_Motor','Percentage_of_IK_21_Motor','First_Pos_XR','First_Neg_XR','First_Pos_SideR','First_Neg_SideR','First_Pos_YawR','First_Neg_YawR','First_Pos_XL','First_Neg_XL','First_Pos_SideL','First_Neg_SideL','First_Pos_YawL','First_Neg_YawL','First_Pos_SideR_SwingMinus','First_Neg_SideR_SwingMinus','First_Pos_SideL_SwingMinus','First_Neg_SideL_SwingMinus','First_min','First_max','Second_Pos_XR','Second_Neg_XR','Second_Pos_SideR','Second_Neg_SideR','Second_Pos_YawR','Second_Neg_YawR','Second_Pos_XL','Second_Neg_XL','Second_Pos_SideL','Second_Neg_SideL','Second_Pos_YawL','Second_Neg_YawL','Second_Pos_SideR_SwingMinus','Second_Neg_SideR_SwingMinus','Second_Pos_SideL_SwingMinus','Second_Neg_SideL_SwingMinus','Second_min','Second_max','Third_Pos_XR','Third_Neg_XR','Third_Pos_SideR','Third_Neg_SideR','Third_Pos_YawR','Third_Neg_YawR','Third_Pos_XL','Third_Neg_XL','Third_Pos_SideL','Third_Neg_SideL','Third_Pos_YawL','Third_Neg_YawL','Third_Pos_SideR_SwingMinus','Third_Neg_SideR_SwingMinus','Third_Pos_SideL_SwingMinus','Third_Neg_SideL_SwingMinus','Third_min','Third_max','Fourth_Pos_XR','Fourth_Neg_XR','Fourth_Pos_SideR','Fourth_Neg_SideR','Fourth_Pos_YawR','Fourth_Neg_YawR','Fourth_Pos_XL','Fourth_Neg_XL','Fourth_Pos_SideL','Fourth_Neg_SideL','Fourth_Pos_YawL','Fourth_Neg_YawL','Fourth_Pos_SideR_SwingMinus','Fourth_Neg_SideR_SwingMinus','Fourth_Pos_SideL_SwingMinus','Fourth_Neg_SideL_SwingMinus','Fourth_min','Fourth_max','Landing_Time_Control_flag','Control_System_flag']
  _slot_types = ['bool','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int64','float64','float64','float64','float64','float64','float64','float64','int64','float64','float64','float64','float64','float64','float64','float64','int64','int64','int64','int64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int64','int64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int64','int64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int64','int64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int64','int64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       IK_Flag,Entire_Time,Frequency,Default_X_Right,Default_X_Left,Default_Y_Right,Default_Y_Left,Default_Z_Right,Default_Z_Left,Offset_10_Motor,Offset_11_Motor,Offset_12_Motor,Offset_13_Motor,Offset_14_Motor,Offset_15_Motor,Offset_16_Motor,Offset_17_Motor,Offset_18_Motor,Offset_19_Motor,Offset_20_Motor,Offset_21_Motor,Swing_Right_Leg,Swing_Left_Leg,Swing_Right_Shoulder,Swing_Left_Shoulder,Rise_Right_Leg,Rise_Left_Leg,Start_Entire_Time,Start_Swing,Start_Rise,End_Entire_Time,End_Swing,End_Rise,Test_X,Test_Side,Test_Yaw,Tuning_X,Tuning_Side,Tuning_Yaw,Balance_Value_0,Balance_Value_1,Balance_Value_2,Balance_Value_3,Balance_Pitch_GP,Balance_Pitch_GI,Balance_Pitch_GD,Balance_Pitch_ELIMIT,Balance_Pitch_OLIMIT,Balance_Pitch_Neg_Target,Balance_Pitch_Pos_Target,Balance_Roll_GP,Balance_Roll_GI,Balance_Roll_GD,Balance_Roll_ELIMIT,Balance_Roll_OLIMIT,Balance_Roll_Neg_Target,Balance_Roll_Pos_Target,Balance_Angle_Pitch_GP,Balance_Angle_Pitch_GI,Balance_Angle_Pitch_GD,Balance_Angle_Pitch_ELIMIT,Balance_Angle_Pitch_OLIMIT,Balance_Angle_Pitch_Neg_Target,Balance_Angle_Pitch_Pos_Target,Balance_Value_4,Balance_Value_5,Balance_Pitch_Flag_imu,Balance_Pitch_GP_imu,Balance_Pitch_GI_imu,Balance_Pitch_GD_imu,Balance_Pitch_Neg_Target_imu,Balance_Pitch_Pos_Target_imu,Balance_Pitch_ELIMIT_imu,Balance_Pitch_OLIMIT_imu,Balance_Roll_Flag_imu,Balance_Roll_GP_imu,Balance_Roll_GI_imu,Balance_Roll_GD_imu,Balance_Roll_Neg_Target_imu,Balance_Roll_Pos_Target_imu,Balance_Roll_ELIMIT_imu,Balance_Roll_OLIMIT_imu,Balance_Pitch_Flag,Balance_Ankle_Pitch_Flag,Balance_Roll_Flag,Ratio_Check_Flag,Center2Leg,Link2Link,Init_Z_Up,Percentage_of_IK_10_Motor,Percentage_of_IK_11_Motor,Percentage_of_IK_12_Motor,Percentage_of_IK_13_Motor,Percentage_of_IK_14_Motor,Percentage_of_IK_15_Motor,Percentage_of_IK_16_Motor,Percentage_of_IK_17_Motor,Percentage_of_IK_18_Motor,Percentage_of_IK_19_Motor,Percentage_of_IK_20_Motor,Percentage_of_IK_21_Motor,First_Pos_XR,First_Neg_XR,First_Pos_SideR,First_Neg_SideR,First_Pos_YawR,First_Neg_YawR,First_Pos_XL,First_Neg_XL,First_Pos_SideL,First_Neg_SideL,First_Pos_YawL,First_Neg_YawL,First_Pos_SideR_SwingMinus,First_Neg_SideR_SwingMinus,First_Pos_SideL_SwingMinus,First_Neg_SideL_SwingMinus,First_min,First_max,Second_Pos_XR,Second_Neg_XR,Second_Pos_SideR,Second_Neg_SideR,Second_Pos_YawR,Second_Neg_YawR,Second_Pos_XL,Second_Neg_XL,Second_Pos_SideL,Second_Neg_SideL,Second_Pos_YawL,Second_Neg_YawL,Second_Pos_SideR_SwingMinus,Second_Neg_SideR_SwingMinus,Second_Pos_SideL_SwingMinus,Second_Neg_SideL_SwingMinus,Second_min,Second_max,Third_Pos_XR,Third_Neg_XR,Third_Pos_SideR,Third_Neg_SideR,Third_Pos_YawR,Third_Neg_YawR,Third_Pos_XL,Third_Neg_XL,Third_Pos_SideL,Third_Neg_SideL,Third_Pos_YawL,Third_Neg_YawL,Third_Pos_SideR_SwingMinus,Third_Neg_SideR_SwingMinus,Third_Pos_SideL_SwingMinus,Third_Neg_SideL_SwingMinus,Third_min,Third_max,Fourth_Pos_XR,Fourth_Neg_XR,Fourth_Pos_SideR,Fourth_Neg_SideR,Fourth_Pos_YawR,Fourth_Neg_YawR,Fourth_Pos_XL,Fourth_Neg_XL,Fourth_Pos_SideL,Fourth_Neg_SideL,Fourth_Pos_YawL,Fourth_Neg_YawL,Fourth_Pos_SideR_SwingMinus,Fourth_Neg_SideR_SwingMinus,Fourth_Pos_SideL_SwingMinus,Fourth_Neg_SideL_SwingMinus,Fourth_min,Fourth_max,Landing_Time_Control_flag,Control_System_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(tune2walk, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.IK_Flag is None:
        self.IK_Flag = False
      if self.Entire_Time is None:
        self.Entire_Time = 0.
      if self.Frequency is None:
        self.Frequency = 0.
      if self.Default_X_Right is None:
        self.Default_X_Right = 0.
      if self.Default_X_Left is None:
        self.Default_X_Left = 0.
      if self.Default_Y_Right is None:
        self.Default_Y_Right = 0.
      if self.Default_Y_Left is None:
        self.Default_Y_Left = 0.
      if self.Default_Z_Right is None:
        self.Default_Z_Right = 0.
      if self.Default_Z_Left is None:
        self.Default_Z_Left = 0.
      if self.Offset_10_Motor is None:
        self.Offset_10_Motor = 0.
      if self.Offset_11_Motor is None:
        self.Offset_11_Motor = 0.
      if self.Offset_12_Motor is None:
        self.Offset_12_Motor = 0.
      if self.Offset_13_Motor is None:
        self.Offset_13_Motor = 0.
      if self.Offset_14_Motor is None:
        self.Offset_14_Motor = 0.
      if self.Offset_15_Motor is None:
        self.Offset_15_Motor = 0.
      if self.Offset_16_Motor is None:
        self.Offset_16_Motor = 0.
      if self.Offset_17_Motor is None:
        self.Offset_17_Motor = 0.
      if self.Offset_18_Motor is None:
        self.Offset_18_Motor = 0.
      if self.Offset_19_Motor is None:
        self.Offset_19_Motor = 0.
      if self.Offset_20_Motor is None:
        self.Offset_20_Motor = 0.
      if self.Offset_21_Motor is None:
        self.Offset_21_Motor = 0.
      if self.Swing_Right_Leg is None:
        self.Swing_Right_Leg = 0.
      if self.Swing_Left_Leg is None:
        self.Swing_Left_Leg = 0.
      if self.Swing_Right_Shoulder is None:
        self.Swing_Right_Shoulder = 0.
      if self.Swing_Left_Shoulder is None:
        self.Swing_Left_Shoulder = 0.
      if self.Rise_Right_Leg is None:
        self.Rise_Right_Leg = 0.
      if self.Rise_Left_Leg is None:
        self.Rise_Left_Leg = 0.
      if self.Start_Entire_Time is None:
        self.Start_Entire_Time = 0.
      if self.Start_Swing is None:
        self.Start_Swing = 0.
      if self.Start_Rise is None:
        self.Start_Rise = 0.
      if self.End_Entire_Time is None:
        self.End_Entire_Time = 0.
      if self.End_Swing is None:
        self.End_Swing = 0.
      if self.End_Rise is None:
        self.End_Rise = 0.
      if self.Test_X is None:
        self.Test_X = 0.
      if self.Test_Side is None:
        self.Test_Side = 0.
      if self.Test_Yaw is None:
        self.Test_Yaw = 0.
      if self.Tuning_X is None:
        self.Tuning_X = 0.
      if self.Tuning_Side is None:
        self.Tuning_Side = 0.
      if self.Tuning_Yaw is None:
        self.Tuning_Yaw = 0.
      if self.Balance_Value_0 is None:
        self.Balance_Value_0 = 0.
      if self.Balance_Value_1 is None:
        self.Balance_Value_1 = 0.
      if self.Balance_Value_2 is None:
        self.Balance_Value_2 = 0.
      if self.Balance_Value_3 is None:
        self.Balance_Value_3 = 0.
      if self.Balance_Pitch_GP is None:
        self.Balance_Pitch_GP = 0.
      if self.Balance_Pitch_GI is None:
        self.Balance_Pitch_GI = 0.
      if self.Balance_Pitch_GD is None:
        self.Balance_Pitch_GD = 0.
      if self.Balance_Pitch_ELIMIT is None:
        self.Balance_Pitch_ELIMIT = 0.
      if self.Balance_Pitch_OLIMIT is None:
        self.Balance_Pitch_OLIMIT = 0.
      if self.Balance_Pitch_Neg_Target is None:
        self.Balance_Pitch_Neg_Target = 0.
      if self.Balance_Pitch_Pos_Target is None:
        self.Balance_Pitch_Pos_Target = 0.
      if self.Balance_Roll_GP is None:
        self.Balance_Roll_GP = 0.
      if self.Balance_Roll_GI is None:
        self.Balance_Roll_GI = 0.
      if self.Balance_Roll_GD is None:
        self.Balance_Roll_GD = 0.
      if self.Balance_Roll_ELIMIT is None:
        self.Balance_Roll_ELIMIT = 0.
      if self.Balance_Roll_OLIMIT is None:
        self.Balance_Roll_OLIMIT = 0.
      if self.Balance_Roll_Neg_Target is None:
        self.Balance_Roll_Neg_Target = 0.
      if self.Balance_Roll_Pos_Target is None:
        self.Balance_Roll_Pos_Target = 0.
      if self.Balance_Angle_Pitch_GP is None:
        self.Balance_Angle_Pitch_GP = 0.
      if self.Balance_Angle_Pitch_GI is None:
        self.Balance_Angle_Pitch_GI = 0.
      if self.Balance_Angle_Pitch_GD is None:
        self.Balance_Angle_Pitch_GD = 0.
      if self.Balance_Angle_Pitch_ELIMIT is None:
        self.Balance_Angle_Pitch_ELIMIT = 0.
      if self.Balance_Angle_Pitch_OLIMIT is None:
        self.Balance_Angle_Pitch_OLIMIT = 0.
      if self.Balance_Angle_Pitch_Neg_Target is None:
        self.Balance_Angle_Pitch_Neg_Target = 0.
      if self.Balance_Angle_Pitch_Pos_Target is None:
        self.Balance_Angle_Pitch_Pos_Target = 0.
      if self.Balance_Value_4 is None:
        self.Balance_Value_4 = 0.
      if self.Balance_Value_5 is None:
        self.Balance_Value_5 = 0.
      if self.Balance_Pitch_Flag_imu is None:
        self.Balance_Pitch_Flag_imu = 0
      if self.Balance_Pitch_GP_imu is None:
        self.Balance_Pitch_GP_imu = 0.
      if self.Balance_Pitch_GI_imu is None:
        self.Balance_Pitch_GI_imu = 0.
      if self.Balance_Pitch_GD_imu is None:
        self.Balance_Pitch_GD_imu = 0.
      if self.Balance_Pitch_Neg_Target_imu is None:
        self.Balance_Pitch_Neg_Target_imu = 0.
      if self.Balance_Pitch_Pos_Target_imu is None:
        self.Balance_Pitch_Pos_Target_imu = 0.
      if self.Balance_Pitch_ELIMIT_imu is None:
        self.Balance_Pitch_ELIMIT_imu = 0.
      if self.Balance_Pitch_OLIMIT_imu is None:
        self.Balance_Pitch_OLIMIT_imu = 0.
      if self.Balance_Roll_Flag_imu is None:
        self.Balance_Roll_Flag_imu = 0
      if self.Balance_Roll_GP_imu is None:
        self.Balance_Roll_GP_imu = 0.
      if self.Balance_Roll_GI_imu is None:
        self.Balance_Roll_GI_imu = 0.
      if self.Balance_Roll_GD_imu is None:
        self.Balance_Roll_GD_imu = 0.
      if self.Balance_Roll_Neg_Target_imu is None:
        self.Balance_Roll_Neg_Target_imu = 0.
      if self.Balance_Roll_Pos_Target_imu is None:
        self.Balance_Roll_Pos_Target_imu = 0.
      if self.Balance_Roll_ELIMIT_imu is None:
        self.Balance_Roll_ELIMIT_imu = 0.
      if self.Balance_Roll_OLIMIT_imu is None:
        self.Balance_Roll_OLIMIT_imu = 0.
      if self.Balance_Pitch_Flag is None:
        self.Balance_Pitch_Flag = 0
      if self.Balance_Ankle_Pitch_Flag is None:
        self.Balance_Ankle_Pitch_Flag = 0
      if self.Balance_Roll_Flag is None:
        self.Balance_Roll_Flag = 0
      if self.Ratio_Check_Flag is None:
        self.Ratio_Check_Flag = 0
      if self.Center2Leg is None:
        self.Center2Leg = 0.
      if self.Link2Link is None:
        self.Link2Link = 0.
      if self.Init_Z_Up is None:
        self.Init_Z_Up = 0.
      if self.Percentage_of_IK_10_Motor is None:
        self.Percentage_of_IK_10_Motor = 0.
      if self.Percentage_of_IK_11_Motor is None:
        self.Percentage_of_IK_11_Motor = 0.
      if self.Percentage_of_IK_12_Motor is None:
        self.Percentage_of_IK_12_Motor = 0.
      if self.Percentage_of_IK_13_Motor is None:
        self.Percentage_of_IK_13_Motor = 0.
      if self.Percentage_of_IK_14_Motor is None:
        self.Percentage_of_IK_14_Motor = 0.
      if self.Percentage_of_IK_15_Motor is None:
        self.Percentage_of_IK_15_Motor = 0.
      if self.Percentage_of_IK_16_Motor is None:
        self.Percentage_of_IK_16_Motor = 0.
      if self.Percentage_of_IK_17_Motor is None:
        self.Percentage_of_IK_17_Motor = 0.
      if self.Percentage_of_IK_18_Motor is None:
        self.Percentage_of_IK_18_Motor = 0.
      if self.Percentage_of_IK_19_Motor is None:
        self.Percentage_of_IK_19_Motor = 0.
      if self.Percentage_of_IK_20_Motor is None:
        self.Percentage_of_IK_20_Motor = 0.
      if self.Percentage_of_IK_21_Motor is None:
        self.Percentage_of_IK_21_Motor = 0.
      if self.First_Pos_XR is None:
        self.First_Pos_XR = 0.
      if self.First_Neg_XR is None:
        self.First_Neg_XR = 0.
      if self.First_Pos_SideR is None:
        self.First_Pos_SideR = 0.
      if self.First_Neg_SideR is None:
        self.First_Neg_SideR = 0.
      if self.First_Pos_YawR is None:
        self.First_Pos_YawR = 0.
      if self.First_Neg_YawR is None:
        self.First_Neg_YawR = 0.
      if self.First_Pos_XL is None:
        self.First_Pos_XL = 0.
      if self.First_Neg_XL is None:
        self.First_Neg_XL = 0.
      if self.First_Pos_SideL is None:
        self.First_Pos_SideL = 0.
      if self.First_Neg_SideL is None:
        self.First_Neg_SideL = 0.
      if self.First_Pos_YawL is None:
        self.First_Pos_YawL = 0.
      if self.First_Neg_YawL is None:
        self.First_Neg_YawL = 0.
      if self.First_Pos_SideR_SwingMinus is None:
        self.First_Pos_SideR_SwingMinus = 0.
      if self.First_Neg_SideR_SwingMinus is None:
        self.First_Neg_SideR_SwingMinus = 0.
      if self.First_Pos_SideL_SwingMinus is None:
        self.First_Pos_SideL_SwingMinus = 0.
      if self.First_Neg_SideL_SwingMinus is None:
        self.First_Neg_SideL_SwingMinus = 0.
      if self.First_min is None:
        self.First_min = 0
      if self.First_max is None:
        self.First_max = 0
      if self.Second_Pos_XR is None:
        self.Second_Pos_XR = 0.
      if self.Second_Neg_XR is None:
        self.Second_Neg_XR = 0.
      if self.Second_Pos_SideR is None:
        self.Second_Pos_SideR = 0.
      if self.Second_Neg_SideR is None:
        self.Second_Neg_SideR = 0.
      if self.Second_Pos_YawR is None:
        self.Second_Pos_YawR = 0.
      if self.Second_Neg_YawR is None:
        self.Second_Neg_YawR = 0.
      if self.Second_Pos_XL is None:
        self.Second_Pos_XL = 0.
      if self.Second_Neg_XL is None:
        self.Second_Neg_XL = 0.
      if self.Second_Pos_SideL is None:
        self.Second_Pos_SideL = 0.
      if self.Second_Neg_SideL is None:
        self.Second_Neg_SideL = 0.
      if self.Second_Pos_YawL is None:
        self.Second_Pos_YawL = 0.
      if self.Second_Neg_YawL is None:
        self.Second_Neg_YawL = 0.
      if self.Second_Pos_SideR_SwingMinus is None:
        self.Second_Pos_SideR_SwingMinus = 0.
      if self.Second_Neg_SideR_SwingMinus is None:
        self.Second_Neg_SideR_SwingMinus = 0.
      if self.Second_Pos_SideL_SwingMinus is None:
        self.Second_Pos_SideL_SwingMinus = 0.
      if self.Second_Neg_SideL_SwingMinus is None:
        self.Second_Neg_SideL_SwingMinus = 0.
      if self.Second_min is None:
        self.Second_min = 0
      if self.Second_max is None:
        self.Second_max = 0
      if self.Third_Pos_XR is None:
        self.Third_Pos_XR = 0.
      if self.Third_Neg_XR is None:
        self.Third_Neg_XR = 0.
      if self.Third_Pos_SideR is None:
        self.Third_Pos_SideR = 0.
      if self.Third_Neg_SideR is None:
        self.Third_Neg_SideR = 0.
      if self.Third_Pos_YawR is None:
        self.Third_Pos_YawR = 0.
      if self.Third_Neg_YawR is None:
        self.Third_Neg_YawR = 0.
      if self.Third_Pos_XL is None:
        self.Third_Pos_XL = 0.
      if self.Third_Neg_XL is None:
        self.Third_Neg_XL = 0.
      if self.Third_Pos_SideL is None:
        self.Third_Pos_SideL = 0.
      if self.Third_Neg_SideL is None:
        self.Third_Neg_SideL = 0.
      if self.Third_Pos_YawL is None:
        self.Third_Pos_YawL = 0.
      if self.Third_Neg_YawL is None:
        self.Third_Neg_YawL = 0.
      if self.Third_Pos_SideR_SwingMinus is None:
        self.Third_Pos_SideR_SwingMinus = 0.
      if self.Third_Neg_SideR_SwingMinus is None:
        self.Third_Neg_SideR_SwingMinus = 0.
      if self.Third_Pos_SideL_SwingMinus is None:
        self.Third_Pos_SideL_SwingMinus = 0.
      if self.Third_Neg_SideL_SwingMinus is None:
        self.Third_Neg_SideL_SwingMinus = 0.
      if self.Third_min is None:
        self.Third_min = 0
      if self.Third_max is None:
        self.Third_max = 0
      if self.Fourth_Pos_XR is None:
        self.Fourth_Pos_XR = 0.
      if self.Fourth_Neg_XR is None:
        self.Fourth_Neg_XR = 0.
      if self.Fourth_Pos_SideR is None:
        self.Fourth_Pos_SideR = 0.
      if self.Fourth_Neg_SideR is None:
        self.Fourth_Neg_SideR = 0.
      if self.Fourth_Pos_YawR is None:
        self.Fourth_Pos_YawR = 0.
      if self.Fourth_Neg_YawR is None:
        self.Fourth_Neg_YawR = 0.
      if self.Fourth_Pos_XL is None:
        self.Fourth_Pos_XL = 0.
      if self.Fourth_Neg_XL is None:
        self.Fourth_Neg_XL = 0.
      if self.Fourth_Pos_SideL is None:
        self.Fourth_Pos_SideL = 0.
      if self.Fourth_Neg_SideL is None:
        self.Fourth_Neg_SideL = 0.
      if self.Fourth_Pos_YawL is None:
        self.Fourth_Pos_YawL = 0.
      if self.Fourth_Neg_YawL is None:
        self.Fourth_Neg_YawL = 0.
      if self.Fourth_Pos_SideR_SwingMinus is None:
        self.Fourth_Pos_SideR_SwingMinus = 0.
      if self.Fourth_Neg_SideR_SwingMinus is None:
        self.Fourth_Neg_SideR_SwingMinus = 0.
      if self.Fourth_Pos_SideL_SwingMinus is None:
        self.Fourth_Pos_SideL_SwingMinus = 0.
      if self.Fourth_Neg_SideL_SwingMinus is None:
        self.Fourth_Neg_SideL_SwingMinus = 0.
      if self.Fourth_min is None:
        self.Fourth_min = 0
      if self.Fourth_max is None:
        self.Fourth_max = 0
      if self.Landing_Time_Control_flag is None:
        self.Landing_Time_Control_flag = 0
      if self.Control_System_flag is None:
        self.Control_System_flag = 0
    else:
      self.IK_Flag = False
      self.Entire_Time = 0.
      self.Frequency = 0.
      self.Default_X_Right = 0.
      self.Default_X_Left = 0.
      self.Default_Y_Right = 0.
      self.Default_Y_Left = 0.
      self.Default_Z_Right = 0.
      self.Default_Z_Left = 0.
      self.Offset_10_Motor = 0.
      self.Offset_11_Motor = 0.
      self.Offset_12_Motor = 0.
      self.Offset_13_Motor = 0.
      self.Offset_14_Motor = 0.
      self.Offset_15_Motor = 0.
      self.Offset_16_Motor = 0.
      self.Offset_17_Motor = 0.
      self.Offset_18_Motor = 0.
      self.Offset_19_Motor = 0.
      self.Offset_20_Motor = 0.
      self.Offset_21_Motor = 0.
      self.Swing_Right_Leg = 0.
      self.Swing_Left_Leg = 0.
      self.Swing_Right_Shoulder = 0.
      self.Swing_Left_Shoulder = 0.
      self.Rise_Right_Leg = 0.
      self.Rise_Left_Leg = 0.
      self.Start_Entire_Time = 0.
      self.Start_Swing = 0.
      self.Start_Rise = 0.
      self.End_Entire_Time = 0.
      self.End_Swing = 0.
      self.End_Rise = 0.
      self.Test_X = 0.
      self.Test_Side = 0.
      self.Test_Yaw = 0.
      self.Tuning_X = 0.
      self.Tuning_Side = 0.
      self.Tuning_Yaw = 0.
      self.Balance_Value_0 = 0.
      self.Balance_Value_1 = 0.
      self.Balance_Value_2 = 0.
      self.Balance_Value_3 = 0.
      self.Balance_Pitch_GP = 0.
      self.Balance_Pitch_GI = 0.
      self.Balance_Pitch_GD = 0.
      self.Balance_Pitch_ELIMIT = 0.
      self.Balance_Pitch_OLIMIT = 0.
      self.Balance_Pitch_Neg_Target = 0.
      self.Balance_Pitch_Pos_Target = 0.
      self.Balance_Roll_GP = 0.
      self.Balance_Roll_GI = 0.
      self.Balance_Roll_GD = 0.
      self.Balance_Roll_ELIMIT = 0.
      self.Balance_Roll_OLIMIT = 0.
      self.Balance_Roll_Neg_Target = 0.
      self.Balance_Roll_Pos_Target = 0.
      self.Balance_Angle_Pitch_GP = 0.
      self.Balance_Angle_Pitch_GI = 0.
      self.Balance_Angle_Pitch_GD = 0.
      self.Balance_Angle_Pitch_ELIMIT = 0.
      self.Balance_Angle_Pitch_OLIMIT = 0.
      self.Balance_Angle_Pitch_Neg_Target = 0.
      self.Balance_Angle_Pitch_Pos_Target = 0.
      self.Balance_Value_4 = 0.
      self.Balance_Value_5 = 0.
      self.Balance_Pitch_Flag_imu = 0
      self.Balance_Pitch_GP_imu = 0.
      self.Balance_Pitch_GI_imu = 0.
      self.Balance_Pitch_GD_imu = 0.
      self.Balance_Pitch_Neg_Target_imu = 0.
      self.Balance_Pitch_Pos_Target_imu = 0.
      self.Balance_Pitch_ELIMIT_imu = 0.
      self.Balance_Pitch_OLIMIT_imu = 0.
      self.Balance_Roll_Flag_imu = 0
      self.Balance_Roll_GP_imu = 0.
      self.Balance_Roll_GI_imu = 0.
      self.Balance_Roll_GD_imu = 0.
      self.Balance_Roll_Neg_Target_imu = 0.
      self.Balance_Roll_Pos_Target_imu = 0.
      self.Balance_Roll_ELIMIT_imu = 0.
      self.Balance_Roll_OLIMIT_imu = 0.
      self.Balance_Pitch_Flag = 0
      self.Balance_Ankle_Pitch_Flag = 0
      self.Balance_Roll_Flag = 0
      self.Ratio_Check_Flag = 0
      self.Center2Leg = 0.
      self.Link2Link = 0.
      self.Init_Z_Up = 0.
      self.Percentage_of_IK_10_Motor = 0.
      self.Percentage_of_IK_11_Motor = 0.
      self.Percentage_of_IK_12_Motor = 0.
      self.Percentage_of_IK_13_Motor = 0.
      self.Percentage_of_IK_14_Motor = 0.
      self.Percentage_of_IK_15_Motor = 0.
      self.Percentage_of_IK_16_Motor = 0.
      self.Percentage_of_IK_17_Motor = 0.
      self.Percentage_of_IK_18_Motor = 0.
      self.Percentage_of_IK_19_Motor = 0.
      self.Percentage_of_IK_20_Motor = 0.
      self.Percentage_of_IK_21_Motor = 0.
      self.First_Pos_XR = 0.
      self.First_Neg_XR = 0.
      self.First_Pos_SideR = 0.
      self.First_Neg_SideR = 0.
      self.First_Pos_YawR = 0.
      self.First_Neg_YawR = 0.
      self.First_Pos_XL = 0.
      self.First_Neg_XL = 0.
      self.First_Pos_SideL = 0.
      self.First_Neg_SideL = 0.
      self.First_Pos_YawL = 0.
      self.First_Neg_YawL = 0.
      self.First_Pos_SideR_SwingMinus = 0.
      self.First_Neg_SideR_SwingMinus = 0.
      self.First_Pos_SideL_SwingMinus = 0.
      self.First_Neg_SideL_SwingMinus = 0.
      self.First_min = 0
      self.First_max = 0
      self.Second_Pos_XR = 0.
      self.Second_Neg_XR = 0.
      self.Second_Pos_SideR = 0.
      self.Second_Neg_SideR = 0.
      self.Second_Pos_YawR = 0.
      self.Second_Neg_YawR = 0.
      self.Second_Pos_XL = 0.
      self.Second_Neg_XL = 0.
      self.Second_Pos_SideL = 0.
      self.Second_Neg_SideL = 0.
      self.Second_Pos_YawL = 0.
      self.Second_Neg_YawL = 0.
      self.Second_Pos_SideR_SwingMinus = 0.
      self.Second_Neg_SideR_SwingMinus = 0.
      self.Second_Pos_SideL_SwingMinus = 0.
      self.Second_Neg_SideL_SwingMinus = 0.
      self.Second_min = 0
      self.Second_max = 0
      self.Third_Pos_XR = 0.
      self.Third_Neg_XR = 0.
      self.Third_Pos_SideR = 0.
      self.Third_Neg_SideR = 0.
      self.Third_Pos_YawR = 0.
      self.Third_Neg_YawR = 0.
      self.Third_Pos_XL = 0.
      self.Third_Neg_XL = 0.
      self.Third_Pos_SideL = 0.
      self.Third_Neg_SideL = 0.
      self.Third_Pos_YawL = 0.
      self.Third_Neg_YawL = 0.
      self.Third_Pos_SideR_SwingMinus = 0.
      self.Third_Neg_SideR_SwingMinus = 0.
      self.Third_Pos_SideL_SwingMinus = 0.
      self.Third_Neg_SideL_SwingMinus = 0.
      self.Third_min = 0
      self.Third_max = 0
      self.Fourth_Pos_XR = 0.
      self.Fourth_Neg_XR = 0.
      self.Fourth_Pos_SideR = 0.
      self.Fourth_Neg_SideR = 0.
      self.Fourth_Pos_YawR = 0.
      self.Fourth_Neg_YawR = 0.
      self.Fourth_Pos_XL = 0.
      self.Fourth_Neg_XL = 0.
      self.Fourth_Pos_SideL = 0.
      self.Fourth_Neg_SideL = 0.
      self.Fourth_Pos_YawL = 0.
      self.Fourth_Neg_YawL = 0.
      self.Fourth_Pos_SideR_SwingMinus = 0.
      self.Fourth_Neg_SideR_SwingMinus = 0.
      self.Fourth_Pos_SideL_SwingMinus = 0.
      self.Fourth_Neg_SideL_SwingMinus = 0.
      self.Fourth_min = 0
      self.Fourth_max = 0
      self.Landing_Time_Control_flag = 0
      self.Control_System_flag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B65dq7dq7d4q31d2q16d2q16d2q16d4q().pack(_x.IK_Flag, _x.Entire_Time, _x.Frequency, _x.Default_X_Right, _x.Default_X_Left, _x.Default_Y_Right, _x.Default_Y_Left, _x.Default_Z_Right, _x.Default_Z_Left, _x.Offset_10_Motor, _x.Offset_11_Motor, _x.Offset_12_Motor, _x.Offset_13_Motor, _x.Offset_14_Motor, _x.Offset_15_Motor, _x.Offset_16_Motor, _x.Offset_17_Motor, _x.Offset_18_Motor, _x.Offset_19_Motor, _x.Offset_20_Motor, _x.Offset_21_Motor, _x.Swing_Right_Leg, _x.Swing_Left_Leg, _x.Swing_Right_Shoulder, _x.Swing_Left_Shoulder, _x.Rise_Right_Leg, _x.Rise_Left_Leg, _x.Start_Entire_Time, _x.Start_Swing, _x.Start_Rise, _x.End_Entire_Time, _x.End_Swing, _x.End_Rise, _x.Test_X, _x.Test_Side, _x.Test_Yaw, _x.Tuning_X, _x.Tuning_Side, _x.Tuning_Yaw, _x.Balance_Value_0, _x.Balance_Value_1, _x.Balance_Value_2, _x.Balance_Value_3, _x.Balance_Pitch_GP, _x.Balance_Pitch_GI, _x.Balance_Pitch_GD, _x.Balance_Pitch_ELIMIT, _x.Balance_Pitch_OLIMIT, _x.Balance_Pitch_Neg_Target, _x.Balance_Pitch_Pos_Target, _x.Balance_Roll_GP, _x.Balance_Roll_GI, _x.Balance_Roll_GD, _x.Balance_Roll_ELIMIT, _x.Balance_Roll_OLIMIT, _x.Balance_Roll_Neg_Target, _x.Balance_Roll_Pos_Target, _x.Balance_Angle_Pitch_GP, _x.Balance_Angle_Pitch_GI, _x.Balance_Angle_Pitch_GD, _x.Balance_Angle_Pitch_ELIMIT, _x.Balance_Angle_Pitch_OLIMIT, _x.Balance_Angle_Pitch_Neg_Target, _x.Balance_Angle_Pitch_Pos_Target, _x.Balance_Value_4, _x.Balance_Value_5, _x.Balance_Pitch_Flag_imu, _x.Balance_Pitch_GP_imu, _x.Balance_Pitch_GI_imu, _x.Balance_Pitch_GD_imu, _x.Balance_Pitch_Neg_Target_imu, _x.Balance_Pitch_Pos_Target_imu, _x.Balance_Pitch_ELIMIT_imu, _x.Balance_Pitch_OLIMIT_imu, _x.Balance_Roll_Flag_imu, _x.Balance_Roll_GP_imu, _x.Balance_Roll_GI_imu, _x.Balance_Roll_GD_imu, _x.Balance_Roll_Neg_Target_imu, _x.Balance_Roll_Pos_Target_imu, _x.Balance_Roll_ELIMIT_imu, _x.Balance_Roll_OLIMIT_imu, _x.Balance_Pitch_Flag, _x.Balance_Ankle_Pitch_Flag, _x.Balance_Roll_Flag, _x.Ratio_Check_Flag, _x.Center2Leg, _x.Link2Link, _x.Init_Z_Up, _x.Percentage_of_IK_10_Motor, _x.Percentage_of_IK_11_Motor, _x.Percentage_of_IK_12_Motor, _x.Percentage_of_IK_13_Motor, _x.Percentage_of_IK_14_Motor, _x.Percentage_of_IK_15_Motor, _x.Percentage_of_IK_16_Motor, _x.Percentage_of_IK_17_Motor, _x.Percentage_of_IK_18_Motor, _x.Percentage_of_IK_19_Motor, _x.Percentage_of_IK_20_Motor, _x.Percentage_of_IK_21_Motor, _x.First_Pos_XR, _x.First_Neg_XR, _x.First_Pos_SideR, _x.First_Neg_SideR, _x.First_Pos_YawR, _x.First_Neg_YawR, _x.First_Pos_XL, _x.First_Neg_XL, _x.First_Pos_SideL, _x.First_Neg_SideL, _x.First_Pos_YawL, _x.First_Neg_YawL, _x.First_Pos_SideR_SwingMinus, _x.First_Neg_SideR_SwingMinus, _x.First_Pos_SideL_SwingMinus, _x.First_Neg_SideL_SwingMinus, _x.First_min, _x.First_max, _x.Second_Pos_XR, _x.Second_Neg_XR, _x.Second_Pos_SideR, _x.Second_Neg_SideR, _x.Second_Pos_YawR, _x.Second_Neg_YawR, _x.Second_Pos_XL, _x.Second_Neg_XL, _x.Second_Pos_SideL, _x.Second_Neg_SideL, _x.Second_Pos_YawL, _x.Second_Neg_YawL, _x.Second_Pos_SideR_SwingMinus, _x.Second_Neg_SideR_SwingMinus, _x.Second_Pos_SideL_SwingMinus, _x.Second_Neg_SideL_SwingMinus, _x.Second_min, _x.Second_max, _x.Third_Pos_XR, _x.Third_Neg_XR, _x.Third_Pos_SideR, _x.Third_Neg_SideR, _x.Third_Pos_YawR, _x.Third_Neg_YawR, _x.Third_Pos_XL, _x.Third_Neg_XL, _x.Third_Pos_SideL, _x.Third_Neg_SideL, _x.Third_Pos_YawL, _x.Third_Neg_YawL, _x.Third_Pos_SideR_SwingMinus, _x.Third_Neg_SideR_SwingMinus, _x.Third_Pos_SideL_SwingMinus, _x.Third_Neg_SideL_SwingMinus, _x.Third_min, _x.Third_max, _x.Fourth_Pos_XR, _x.Fourth_Neg_XR, _x.Fourth_Pos_SideR, _x.Fourth_Neg_SideR, _x.Fourth_Pos_YawR, _x.Fourth_Neg_YawR, _x.Fourth_Pos_XL, _x.Fourth_Neg_XL, _x.Fourth_Pos_SideL, _x.Fourth_Neg_SideL, _x.Fourth_Pos_YawL, _x.Fourth_Neg_YawL, _x.Fourth_Pos_SideR_SwingMinus, _x.Fourth_Neg_SideR_SwingMinus, _x.Fourth_Pos_SideL_SwingMinus, _x.Fourth_Neg_SideL_SwingMinus, _x.Fourth_min, _x.Fourth_max, _x.Landing_Time_Control_flag, _x.Control_System_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 1393
      (_x.IK_Flag, _x.Entire_Time, _x.Frequency, _x.Default_X_Right, _x.Default_X_Left, _x.Default_Y_Right, _x.Default_Y_Left, _x.Default_Z_Right, _x.Default_Z_Left, _x.Offset_10_Motor, _x.Offset_11_Motor, _x.Offset_12_Motor, _x.Offset_13_Motor, _x.Offset_14_Motor, _x.Offset_15_Motor, _x.Offset_16_Motor, _x.Offset_17_Motor, _x.Offset_18_Motor, _x.Offset_19_Motor, _x.Offset_20_Motor, _x.Offset_21_Motor, _x.Swing_Right_Leg, _x.Swing_Left_Leg, _x.Swing_Right_Shoulder, _x.Swing_Left_Shoulder, _x.Rise_Right_Leg, _x.Rise_Left_Leg, _x.Start_Entire_Time, _x.Start_Swing, _x.Start_Rise, _x.End_Entire_Time, _x.End_Swing, _x.End_Rise, _x.Test_X, _x.Test_Side, _x.Test_Yaw, _x.Tuning_X, _x.Tuning_Side, _x.Tuning_Yaw, _x.Balance_Value_0, _x.Balance_Value_1, _x.Balance_Value_2, _x.Balance_Value_3, _x.Balance_Pitch_GP, _x.Balance_Pitch_GI, _x.Balance_Pitch_GD, _x.Balance_Pitch_ELIMIT, _x.Balance_Pitch_OLIMIT, _x.Balance_Pitch_Neg_Target, _x.Balance_Pitch_Pos_Target, _x.Balance_Roll_GP, _x.Balance_Roll_GI, _x.Balance_Roll_GD, _x.Balance_Roll_ELIMIT, _x.Balance_Roll_OLIMIT, _x.Balance_Roll_Neg_Target, _x.Balance_Roll_Pos_Target, _x.Balance_Angle_Pitch_GP, _x.Balance_Angle_Pitch_GI, _x.Balance_Angle_Pitch_GD, _x.Balance_Angle_Pitch_ELIMIT, _x.Balance_Angle_Pitch_OLIMIT, _x.Balance_Angle_Pitch_Neg_Target, _x.Balance_Angle_Pitch_Pos_Target, _x.Balance_Value_4, _x.Balance_Value_5, _x.Balance_Pitch_Flag_imu, _x.Balance_Pitch_GP_imu, _x.Balance_Pitch_GI_imu, _x.Balance_Pitch_GD_imu, _x.Balance_Pitch_Neg_Target_imu, _x.Balance_Pitch_Pos_Target_imu, _x.Balance_Pitch_ELIMIT_imu, _x.Balance_Pitch_OLIMIT_imu, _x.Balance_Roll_Flag_imu, _x.Balance_Roll_GP_imu, _x.Balance_Roll_GI_imu, _x.Balance_Roll_GD_imu, _x.Balance_Roll_Neg_Target_imu, _x.Balance_Roll_Pos_Target_imu, _x.Balance_Roll_ELIMIT_imu, _x.Balance_Roll_OLIMIT_imu, _x.Balance_Pitch_Flag, _x.Balance_Ankle_Pitch_Flag, _x.Balance_Roll_Flag, _x.Ratio_Check_Flag, _x.Center2Leg, _x.Link2Link, _x.Init_Z_Up, _x.Percentage_of_IK_10_Motor, _x.Percentage_of_IK_11_Motor, _x.Percentage_of_IK_12_Motor, _x.Percentage_of_IK_13_Motor, _x.Percentage_of_IK_14_Motor, _x.Percentage_of_IK_15_Motor, _x.Percentage_of_IK_16_Motor, _x.Percentage_of_IK_17_Motor, _x.Percentage_of_IK_18_Motor, _x.Percentage_of_IK_19_Motor, _x.Percentage_of_IK_20_Motor, _x.Percentage_of_IK_21_Motor, _x.First_Pos_XR, _x.First_Neg_XR, _x.First_Pos_SideR, _x.First_Neg_SideR, _x.First_Pos_YawR, _x.First_Neg_YawR, _x.First_Pos_XL, _x.First_Neg_XL, _x.First_Pos_SideL, _x.First_Neg_SideL, _x.First_Pos_YawL, _x.First_Neg_YawL, _x.First_Pos_SideR_SwingMinus, _x.First_Neg_SideR_SwingMinus, _x.First_Pos_SideL_SwingMinus, _x.First_Neg_SideL_SwingMinus, _x.First_min, _x.First_max, _x.Second_Pos_XR, _x.Second_Neg_XR, _x.Second_Pos_SideR, _x.Second_Neg_SideR, _x.Second_Pos_YawR, _x.Second_Neg_YawR, _x.Second_Pos_XL, _x.Second_Neg_XL, _x.Second_Pos_SideL, _x.Second_Neg_SideL, _x.Second_Pos_YawL, _x.Second_Neg_YawL, _x.Second_Pos_SideR_SwingMinus, _x.Second_Neg_SideR_SwingMinus, _x.Second_Pos_SideL_SwingMinus, _x.Second_Neg_SideL_SwingMinus, _x.Second_min, _x.Second_max, _x.Third_Pos_XR, _x.Third_Neg_XR, _x.Third_Pos_SideR, _x.Third_Neg_SideR, _x.Third_Pos_YawR, _x.Third_Neg_YawR, _x.Third_Pos_XL, _x.Third_Neg_XL, _x.Third_Pos_SideL, _x.Third_Neg_SideL, _x.Third_Pos_YawL, _x.Third_Neg_YawL, _x.Third_Pos_SideR_SwingMinus, _x.Third_Neg_SideR_SwingMinus, _x.Third_Pos_SideL_SwingMinus, _x.Third_Neg_SideL_SwingMinus, _x.Third_min, _x.Third_max, _x.Fourth_Pos_XR, _x.Fourth_Neg_XR, _x.Fourth_Pos_SideR, _x.Fourth_Neg_SideR, _x.Fourth_Pos_YawR, _x.Fourth_Neg_YawR, _x.Fourth_Pos_XL, _x.Fourth_Neg_XL, _x.Fourth_Pos_SideL, _x.Fourth_Neg_SideL, _x.Fourth_Pos_YawL, _x.Fourth_Neg_YawL, _x.Fourth_Pos_SideR_SwingMinus, _x.Fourth_Neg_SideR_SwingMinus, _x.Fourth_Pos_SideL_SwingMinus, _x.Fourth_Neg_SideL_SwingMinus, _x.Fourth_min, _x.Fourth_max, _x.Landing_Time_Control_flag, _x.Control_System_flag,) = _get_struct_B65dq7dq7d4q31d2q16d2q16d2q16d4q().unpack(str[start:end])
      self.IK_Flag = bool(self.IK_Flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B65dq7dq7d4q31d2q16d2q16d2q16d4q().pack(_x.IK_Flag, _x.Entire_Time, _x.Frequency, _x.Default_X_Right, _x.Default_X_Left, _x.Default_Y_Right, _x.Default_Y_Left, _x.Default_Z_Right, _x.Default_Z_Left, _x.Offset_10_Motor, _x.Offset_11_Motor, _x.Offset_12_Motor, _x.Offset_13_Motor, _x.Offset_14_Motor, _x.Offset_15_Motor, _x.Offset_16_Motor, _x.Offset_17_Motor, _x.Offset_18_Motor, _x.Offset_19_Motor, _x.Offset_20_Motor, _x.Offset_21_Motor, _x.Swing_Right_Leg, _x.Swing_Left_Leg, _x.Swing_Right_Shoulder, _x.Swing_Left_Shoulder, _x.Rise_Right_Leg, _x.Rise_Left_Leg, _x.Start_Entire_Time, _x.Start_Swing, _x.Start_Rise, _x.End_Entire_Time, _x.End_Swing, _x.End_Rise, _x.Test_X, _x.Test_Side, _x.Test_Yaw, _x.Tuning_X, _x.Tuning_Side, _x.Tuning_Yaw, _x.Balance_Value_0, _x.Balance_Value_1, _x.Balance_Value_2, _x.Balance_Value_3, _x.Balance_Pitch_GP, _x.Balance_Pitch_GI, _x.Balance_Pitch_GD, _x.Balance_Pitch_ELIMIT, _x.Balance_Pitch_OLIMIT, _x.Balance_Pitch_Neg_Target, _x.Balance_Pitch_Pos_Target, _x.Balance_Roll_GP, _x.Balance_Roll_GI, _x.Balance_Roll_GD, _x.Balance_Roll_ELIMIT, _x.Balance_Roll_OLIMIT, _x.Balance_Roll_Neg_Target, _x.Balance_Roll_Pos_Target, _x.Balance_Angle_Pitch_GP, _x.Balance_Angle_Pitch_GI, _x.Balance_Angle_Pitch_GD, _x.Balance_Angle_Pitch_ELIMIT, _x.Balance_Angle_Pitch_OLIMIT, _x.Balance_Angle_Pitch_Neg_Target, _x.Balance_Angle_Pitch_Pos_Target, _x.Balance_Value_4, _x.Balance_Value_5, _x.Balance_Pitch_Flag_imu, _x.Balance_Pitch_GP_imu, _x.Balance_Pitch_GI_imu, _x.Balance_Pitch_GD_imu, _x.Balance_Pitch_Neg_Target_imu, _x.Balance_Pitch_Pos_Target_imu, _x.Balance_Pitch_ELIMIT_imu, _x.Balance_Pitch_OLIMIT_imu, _x.Balance_Roll_Flag_imu, _x.Balance_Roll_GP_imu, _x.Balance_Roll_GI_imu, _x.Balance_Roll_GD_imu, _x.Balance_Roll_Neg_Target_imu, _x.Balance_Roll_Pos_Target_imu, _x.Balance_Roll_ELIMIT_imu, _x.Balance_Roll_OLIMIT_imu, _x.Balance_Pitch_Flag, _x.Balance_Ankle_Pitch_Flag, _x.Balance_Roll_Flag, _x.Ratio_Check_Flag, _x.Center2Leg, _x.Link2Link, _x.Init_Z_Up, _x.Percentage_of_IK_10_Motor, _x.Percentage_of_IK_11_Motor, _x.Percentage_of_IK_12_Motor, _x.Percentage_of_IK_13_Motor, _x.Percentage_of_IK_14_Motor, _x.Percentage_of_IK_15_Motor, _x.Percentage_of_IK_16_Motor, _x.Percentage_of_IK_17_Motor, _x.Percentage_of_IK_18_Motor, _x.Percentage_of_IK_19_Motor, _x.Percentage_of_IK_20_Motor, _x.Percentage_of_IK_21_Motor, _x.First_Pos_XR, _x.First_Neg_XR, _x.First_Pos_SideR, _x.First_Neg_SideR, _x.First_Pos_YawR, _x.First_Neg_YawR, _x.First_Pos_XL, _x.First_Neg_XL, _x.First_Pos_SideL, _x.First_Neg_SideL, _x.First_Pos_YawL, _x.First_Neg_YawL, _x.First_Pos_SideR_SwingMinus, _x.First_Neg_SideR_SwingMinus, _x.First_Pos_SideL_SwingMinus, _x.First_Neg_SideL_SwingMinus, _x.First_min, _x.First_max, _x.Second_Pos_XR, _x.Second_Neg_XR, _x.Second_Pos_SideR, _x.Second_Neg_SideR, _x.Second_Pos_YawR, _x.Second_Neg_YawR, _x.Second_Pos_XL, _x.Second_Neg_XL, _x.Second_Pos_SideL, _x.Second_Neg_SideL, _x.Second_Pos_YawL, _x.Second_Neg_YawL, _x.Second_Pos_SideR_SwingMinus, _x.Second_Neg_SideR_SwingMinus, _x.Second_Pos_SideL_SwingMinus, _x.Second_Neg_SideL_SwingMinus, _x.Second_min, _x.Second_max, _x.Third_Pos_XR, _x.Third_Neg_XR, _x.Third_Pos_SideR, _x.Third_Neg_SideR, _x.Third_Pos_YawR, _x.Third_Neg_YawR, _x.Third_Pos_XL, _x.Third_Neg_XL, _x.Third_Pos_SideL, _x.Third_Neg_SideL, _x.Third_Pos_YawL, _x.Third_Neg_YawL, _x.Third_Pos_SideR_SwingMinus, _x.Third_Neg_SideR_SwingMinus, _x.Third_Pos_SideL_SwingMinus, _x.Third_Neg_SideL_SwingMinus, _x.Third_min, _x.Third_max, _x.Fourth_Pos_XR, _x.Fourth_Neg_XR, _x.Fourth_Pos_SideR, _x.Fourth_Neg_SideR, _x.Fourth_Pos_YawR, _x.Fourth_Neg_YawR, _x.Fourth_Pos_XL, _x.Fourth_Neg_XL, _x.Fourth_Pos_SideL, _x.Fourth_Neg_SideL, _x.Fourth_Pos_YawL, _x.Fourth_Neg_YawL, _x.Fourth_Pos_SideR_SwingMinus, _x.Fourth_Neg_SideR_SwingMinus, _x.Fourth_Pos_SideL_SwingMinus, _x.Fourth_Neg_SideL_SwingMinus, _x.Fourth_min, _x.Fourth_max, _x.Landing_Time_Control_flag, _x.Control_System_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 1393
      (_x.IK_Flag, _x.Entire_Time, _x.Frequency, _x.Default_X_Right, _x.Default_X_Left, _x.Default_Y_Right, _x.Default_Y_Left, _x.Default_Z_Right, _x.Default_Z_Left, _x.Offset_10_Motor, _x.Offset_11_Motor, _x.Offset_12_Motor, _x.Offset_13_Motor, _x.Offset_14_Motor, _x.Offset_15_Motor, _x.Offset_16_Motor, _x.Offset_17_Motor, _x.Offset_18_Motor, _x.Offset_19_Motor, _x.Offset_20_Motor, _x.Offset_21_Motor, _x.Swing_Right_Leg, _x.Swing_Left_Leg, _x.Swing_Right_Shoulder, _x.Swing_Left_Shoulder, _x.Rise_Right_Leg, _x.Rise_Left_Leg, _x.Start_Entire_Time, _x.Start_Swing, _x.Start_Rise, _x.End_Entire_Time, _x.End_Swing, _x.End_Rise, _x.Test_X, _x.Test_Side, _x.Test_Yaw, _x.Tuning_X, _x.Tuning_Side, _x.Tuning_Yaw, _x.Balance_Value_0, _x.Balance_Value_1, _x.Balance_Value_2, _x.Balance_Value_3, _x.Balance_Pitch_GP, _x.Balance_Pitch_GI, _x.Balance_Pitch_GD, _x.Balance_Pitch_ELIMIT, _x.Balance_Pitch_OLIMIT, _x.Balance_Pitch_Neg_Target, _x.Balance_Pitch_Pos_Target, _x.Balance_Roll_GP, _x.Balance_Roll_GI, _x.Balance_Roll_GD, _x.Balance_Roll_ELIMIT, _x.Balance_Roll_OLIMIT, _x.Balance_Roll_Neg_Target, _x.Balance_Roll_Pos_Target, _x.Balance_Angle_Pitch_GP, _x.Balance_Angle_Pitch_GI, _x.Balance_Angle_Pitch_GD, _x.Balance_Angle_Pitch_ELIMIT, _x.Balance_Angle_Pitch_OLIMIT, _x.Balance_Angle_Pitch_Neg_Target, _x.Balance_Angle_Pitch_Pos_Target, _x.Balance_Value_4, _x.Balance_Value_5, _x.Balance_Pitch_Flag_imu, _x.Balance_Pitch_GP_imu, _x.Balance_Pitch_GI_imu, _x.Balance_Pitch_GD_imu, _x.Balance_Pitch_Neg_Target_imu, _x.Balance_Pitch_Pos_Target_imu, _x.Balance_Pitch_ELIMIT_imu, _x.Balance_Pitch_OLIMIT_imu, _x.Balance_Roll_Flag_imu, _x.Balance_Roll_GP_imu, _x.Balance_Roll_GI_imu, _x.Balance_Roll_GD_imu, _x.Balance_Roll_Neg_Target_imu, _x.Balance_Roll_Pos_Target_imu, _x.Balance_Roll_ELIMIT_imu, _x.Balance_Roll_OLIMIT_imu, _x.Balance_Pitch_Flag, _x.Balance_Ankle_Pitch_Flag, _x.Balance_Roll_Flag, _x.Ratio_Check_Flag, _x.Center2Leg, _x.Link2Link, _x.Init_Z_Up, _x.Percentage_of_IK_10_Motor, _x.Percentage_of_IK_11_Motor, _x.Percentage_of_IK_12_Motor, _x.Percentage_of_IK_13_Motor, _x.Percentage_of_IK_14_Motor, _x.Percentage_of_IK_15_Motor, _x.Percentage_of_IK_16_Motor, _x.Percentage_of_IK_17_Motor, _x.Percentage_of_IK_18_Motor, _x.Percentage_of_IK_19_Motor, _x.Percentage_of_IK_20_Motor, _x.Percentage_of_IK_21_Motor, _x.First_Pos_XR, _x.First_Neg_XR, _x.First_Pos_SideR, _x.First_Neg_SideR, _x.First_Pos_YawR, _x.First_Neg_YawR, _x.First_Pos_XL, _x.First_Neg_XL, _x.First_Pos_SideL, _x.First_Neg_SideL, _x.First_Pos_YawL, _x.First_Neg_YawL, _x.First_Pos_SideR_SwingMinus, _x.First_Neg_SideR_SwingMinus, _x.First_Pos_SideL_SwingMinus, _x.First_Neg_SideL_SwingMinus, _x.First_min, _x.First_max, _x.Second_Pos_XR, _x.Second_Neg_XR, _x.Second_Pos_SideR, _x.Second_Neg_SideR, _x.Second_Pos_YawR, _x.Second_Neg_YawR, _x.Second_Pos_XL, _x.Second_Neg_XL, _x.Second_Pos_SideL, _x.Second_Neg_SideL, _x.Second_Pos_YawL, _x.Second_Neg_YawL, _x.Second_Pos_SideR_SwingMinus, _x.Second_Neg_SideR_SwingMinus, _x.Second_Pos_SideL_SwingMinus, _x.Second_Neg_SideL_SwingMinus, _x.Second_min, _x.Second_max, _x.Third_Pos_XR, _x.Third_Neg_XR, _x.Third_Pos_SideR, _x.Third_Neg_SideR, _x.Third_Pos_YawR, _x.Third_Neg_YawR, _x.Third_Pos_XL, _x.Third_Neg_XL, _x.Third_Pos_SideL, _x.Third_Neg_SideL, _x.Third_Pos_YawL, _x.Third_Neg_YawL, _x.Third_Pos_SideR_SwingMinus, _x.Third_Neg_SideR_SwingMinus, _x.Third_Pos_SideL_SwingMinus, _x.Third_Neg_SideL_SwingMinus, _x.Third_min, _x.Third_max, _x.Fourth_Pos_XR, _x.Fourth_Neg_XR, _x.Fourth_Pos_SideR, _x.Fourth_Neg_SideR, _x.Fourth_Pos_YawR, _x.Fourth_Neg_YawR, _x.Fourth_Pos_XL, _x.Fourth_Neg_XL, _x.Fourth_Pos_SideL, _x.Fourth_Neg_SideL, _x.Fourth_Pos_YawL, _x.Fourth_Neg_YawL, _x.Fourth_Pos_SideR_SwingMinus, _x.Fourth_Neg_SideR_SwingMinus, _x.Fourth_Pos_SideL_SwingMinus, _x.Fourth_Neg_SideL_SwingMinus, _x.Fourth_min, _x.Fourth_max, _x.Landing_Time_Control_flag, _x.Control_System_flag,) = _get_struct_B65dq7dq7d4q31d2q16d2q16d2q16d4q().unpack(str[start:end])
      self.IK_Flag = bool(self.IK_Flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B65dq7dq7d4q31d2q16d2q16d2q16d4q = None
def _get_struct_B65dq7dq7d4q31d2q16d2q16d2q16d4q():
    global _struct_B65dq7dq7d4q31d2q16d2q16d2q16d4q
    if _struct_B65dq7dq7d4q31d2q16d2q16d2q16d4q is None:
        _struct_B65dq7dq7d4q31d2q16d2q16d2q16d4q = struct.Struct("<B65dq7dq7d4q31d2q16d2q16d2q16d4q")
    return _struct_B65dq7dq7d4q31d2q16d2q16d2q16d4q
