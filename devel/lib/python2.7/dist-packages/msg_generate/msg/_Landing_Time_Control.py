# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msg_generate/Landing_Time_Control.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Landing_Time_Control(genpy.Message):
  _md5sum = "0231e6c7c4e3ed975ff22fc97b613ccc"
  _type = "msg_generate/Landing_Time_Control"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 Entire_Time
float64 Swing_Gain_L
float64 Swing_Gain_R
int64 Warning
int64 Safe

float64 Landing_Time_L
float64 Landing_Time_R

float64 Landing_Error_L
float64 Landing_Error_R

"""
  __slots__ = ['Entire_Time','Swing_Gain_L','Swing_Gain_R','Warning','Safe','Landing_Time_L','Landing_Time_R','Landing_Error_L','Landing_Error_R']
  _slot_types = ['float64','float64','float64','int64','int64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Entire_Time,Swing_Gain_L,Swing_Gain_R,Warning,Safe,Landing_Time_L,Landing_Time_R,Landing_Error_L,Landing_Error_R

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Landing_Time_Control, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Entire_Time is None:
        self.Entire_Time = 0.
      if self.Swing_Gain_L is None:
        self.Swing_Gain_L = 0.
      if self.Swing_Gain_R is None:
        self.Swing_Gain_R = 0.
      if self.Warning is None:
        self.Warning = 0
      if self.Safe is None:
        self.Safe = 0
      if self.Landing_Time_L is None:
        self.Landing_Time_L = 0.
      if self.Landing_Time_R is None:
        self.Landing_Time_R = 0.
      if self.Landing_Error_L is None:
        self.Landing_Error_L = 0.
      if self.Landing_Error_R is None:
        self.Landing_Error_R = 0.
    else:
      self.Entire_Time = 0.
      self.Swing_Gain_L = 0.
      self.Swing_Gain_R = 0.
      self.Warning = 0
      self.Safe = 0
      self.Landing_Time_L = 0.
      self.Landing_Time_R = 0.
      self.Landing_Error_L = 0.
      self.Landing_Error_R = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d2q4d().pack(_x.Entire_Time, _x.Swing_Gain_L, _x.Swing_Gain_R, _x.Warning, _x.Safe, _x.Landing_Time_L, _x.Landing_Time_R, _x.Landing_Error_L, _x.Landing_Error_R))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.Entire_Time, _x.Swing_Gain_L, _x.Swing_Gain_R, _x.Warning, _x.Safe, _x.Landing_Time_L, _x.Landing_Time_R, _x.Landing_Error_L, _x.Landing_Error_R,) = _get_struct_3d2q4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d2q4d().pack(_x.Entire_Time, _x.Swing_Gain_L, _x.Swing_Gain_R, _x.Warning, _x.Safe, _x.Landing_Time_L, _x.Landing_Time_R, _x.Landing_Error_L, _x.Landing_Error_R))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.Entire_Time, _x.Swing_Gain_L, _x.Swing_Gain_R, _x.Warning, _x.Safe, _x.Landing_Time_L, _x.Landing_Time_R, _x.Landing_Error_L, _x.Landing_Error_R,) = _get_struct_3d2q4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d2q4d = None
def _get_struct_3d2q4d():
    global _struct_3d2q4d
    if _struct_3d2q4d is None:
        _struct_3d2q4d = struct.Struct("<3d2q4d")
    return _struct_3d2q4d
