# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msg_generate/walk_pattern.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class walk_pattern(genpy.Message):
  _md5sum = "bb4fe551ab158f80aba28048dfbba352"
  _type = "msg_generate/walk_pattern"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 xlpattern
float64 ylpattern
float64 zlpattern
float64 slpattern
float64 tlpattern
float64 xrpattern
float64 yrpattern
float64 zrpattern
float64 srpattern
float64 trpattern
"""
  __slots__ = ['xlpattern','ylpattern','zlpattern','slpattern','tlpattern','xrpattern','yrpattern','zrpattern','srpattern','trpattern']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       xlpattern,ylpattern,zlpattern,slpattern,tlpattern,xrpattern,yrpattern,zrpattern,srpattern,trpattern

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(walk_pattern, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.xlpattern is None:
        self.xlpattern = 0.
      if self.ylpattern is None:
        self.ylpattern = 0.
      if self.zlpattern is None:
        self.zlpattern = 0.
      if self.slpattern is None:
        self.slpattern = 0.
      if self.tlpattern is None:
        self.tlpattern = 0.
      if self.xrpattern is None:
        self.xrpattern = 0.
      if self.yrpattern is None:
        self.yrpattern = 0.
      if self.zrpattern is None:
        self.zrpattern = 0.
      if self.srpattern is None:
        self.srpattern = 0.
      if self.trpattern is None:
        self.trpattern = 0.
    else:
      self.xlpattern = 0.
      self.ylpattern = 0.
      self.zlpattern = 0.
      self.slpattern = 0.
      self.tlpattern = 0.
      self.xrpattern = 0.
      self.yrpattern = 0.
      self.zrpattern = 0.
      self.srpattern = 0.
      self.trpattern = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10d().pack(_x.xlpattern, _x.ylpattern, _x.zlpattern, _x.slpattern, _x.tlpattern, _x.xrpattern, _x.yrpattern, _x.zrpattern, _x.srpattern, _x.trpattern))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.xlpattern, _x.ylpattern, _x.zlpattern, _x.slpattern, _x.tlpattern, _x.xrpattern, _x.yrpattern, _x.zrpattern, _x.srpattern, _x.trpattern,) = _get_struct_10d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10d().pack(_x.xlpattern, _x.ylpattern, _x.zlpattern, _x.slpattern, _x.tlpattern, _x.xrpattern, _x.yrpattern, _x.zrpattern, _x.srpattern, _x.trpattern))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.xlpattern, _x.ylpattern, _x.zlpattern, _x.slpattern, _x.tlpattern, _x.xrpattern, _x.yrpattern, _x.zrpattern, _x.srpattern, _x.trpattern,) = _get_struct_10d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10d = None
def _get_struct_10d():
    global _struct_10d
    if _struct_10d is None:
        _struct_10d = struct.Struct("<10d")
    return _struct_10d
