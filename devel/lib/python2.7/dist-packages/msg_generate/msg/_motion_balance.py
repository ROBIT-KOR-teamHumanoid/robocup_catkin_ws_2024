# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msg_generate/motion_balance.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class motion_balance(genpy.Message):
  _md5sum = "03d17ac032478d225abd4895f2c60b7c"
  _type = "msg_generate/motion_balance"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 Left_10
float32 Right_11
float32 Left_14
float32 Right_15
float32 Left_16
float32 Right_17
float32 Left_18
float32 Right_19
float32 Left_20
float32 Right_21

bool support_L
bool support_R
bool support_B
"""
  __slots__ = ['Left_10','Right_11','Left_14','Right_15','Left_16','Right_17','Left_18','Right_19','Left_20','Right_21','support_L','support_R','support_B']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Left_10,Right_11,Left_14,Right_15,Left_16,Right_17,Left_18,Right_19,Left_20,Right_21,support_L,support_R,support_B

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(motion_balance, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Left_10 is None:
        self.Left_10 = 0.
      if self.Right_11 is None:
        self.Right_11 = 0.
      if self.Left_14 is None:
        self.Left_14 = 0.
      if self.Right_15 is None:
        self.Right_15 = 0.
      if self.Left_16 is None:
        self.Left_16 = 0.
      if self.Right_17 is None:
        self.Right_17 = 0.
      if self.Left_18 is None:
        self.Left_18 = 0.
      if self.Right_19 is None:
        self.Right_19 = 0.
      if self.Left_20 is None:
        self.Left_20 = 0.
      if self.Right_21 is None:
        self.Right_21 = 0.
      if self.support_L is None:
        self.support_L = False
      if self.support_R is None:
        self.support_R = False
      if self.support_B is None:
        self.support_B = False
    else:
      self.Left_10 = 0.
      self.Right_11 = 0.
      self.Left_14 = 0.
      self.Right_15 = 0.
      self.Left_16 = 0.
      self.Right_17 = 0.
      self.Left_18 = 0.
      self.Right_19 = 0.
      self.Left_20 = 0.
      self.Right_21 = 0.
      self.support_L = False
      self.support_R = False
      self.support_B = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10f3B().pack(_x.Left_10, _x.Right_11, _x.Left_14, _x.Right_15, _x.Left_16, _x.Right_17, _x.Left_18, _x.Right_19, _x.Left_20, _x.Right_21, _x.support_L, _x.support_R, _x.support_B))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 43
      (_x.Left_10, _x.Right_11, _x.Left_14, _x.Right_15, _x.Left_16, _x.Right_17, _x.Left_18, _x.Right_19, _x.Left_20, _x.Right_21, _x.support_L, _x.support_R, _x.support_B,) = _get_struct_10f3B().unpack(str[start:end])
      self.support_L = bool(self.support_L)
      self.support_R = bool(self.support_R)
      self.support_B = bool(self.support_B)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10f3B().pack(_x.Left_10, _x.Right_11, _x.Left_14, _x.Right_15, _x.Left_16, _x.Right_17, _x.Left_18, _x.Right_19, _x.Left_20, _x.Right_21, _x.support_L, _x.support_R, _x.support_B))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 43
      (_x.Left_10, _x.Right_11, _x.Left_14, _x.Right_15, _x.Left_16, _x.Right_17, _x.Left_18, _x.Right_19, _x.Left_20, _x.Right_21, _x.support_L, _x.support_R, _x.support_B,) = _get_struct_10f3B().unpack(str[start:end])
      self.support_L = bool(self.support_L)
      self.support_R = bool(self.support_R)
      self.support_B = bool(self.support_B)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10f3B = None
def _get_struct_10f3B():
    global _struct_10f3B
    if _struct_10f3B is None:
        _struct_10f3B = struct.Struct("<10f3B")
    return _struct_10f3B
