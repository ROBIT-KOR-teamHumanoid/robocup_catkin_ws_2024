# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msg_generate/localization_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class localization_msg(genpy.Message):
  _md5sum = "1199688341e3ebe99dc4295b1eed20cc"
  _type = "msg_generate/localization_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 ballDist
int64 ballTheta

int64[] xcrossDist
int64[] xcrossTheta

int64[] goalpostDist
int64[] goalpostTheta

int64[] pointDist
int64[] pointTheta

int64[] penaltyCircleDist
int64[] penaltyCircleTheta

int64 oneline
"""
  __slots__ = ['ballDist','ballTheta','xcrossDist','xcrossTheta','goalpostDist','goalpostTheta','pointDist','pointTheta','penaltyCircleDist','penaltyCircleTheta','oneline']
  _slot_types = ['int64','int64','int64[]','int64[]','int64[]','int64[]','int64[]','int64[]','int64[]','int64[]','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ballDist,ballTheta,xcrossDist,xcrossTheta,goalpostDist,goalpostTheta,pointDist,pointTheta,penaltyCircleDist,penaltyCircleTheta,oneline

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(localization_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ballDist is None:
        self.ballDist = 0
      if self.ballTheta is None:
        self.ballTheta = 0
      if self.xcrossDist is None:
        self.xcrossDist = []
      if self.xcrossTheta is None:
        self.xcrossTheta = []
      if self.goalpostDist is None:
        self.goalpostDist = []
      if self.goalpostTheta is None:
        self.goalpostTheta = []
      if self.pointDist is None:
        self.pointDist = []
      if self.pointTheta is None:
        self.pointTheta = []
      if self.penaltyCircleDist is None:
        self.penaltyCircleDist = []
      if self.penaltyCircleTheta is None:
        self.penaltyCircleTheta = []
      if self.oneline is None:
        self.oneline = 0
    else:
      self.ballDist = 0
      self.ballTheta = 0
      self.xcrossDist = []
      self.xcrossTheta = []
      self.goalpostDist = []
      self.goalpostTheta = []
      self.pointDist = []
      self.pointTheta = []
      self.penaltyCircleDist = []
      self.penaltyCircleTheta = []
      self.oneline = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2q().pack(_x.ballDist, _x.ballTheta))
      length = len(self.xcrossDist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.Struct(pattern).pack(*self.xcrossDist))
      length = len(self.xcrossTheta)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.Struct(pattern).pack(*self.xcrossTheta))
      length = len(self.goalpostDist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.Struct(pattern).pack(*self.goalpostDist))
      length = len(self.goalpostTheta)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.Struct(pattern).pack(*self.goalpostTheta))
      length = len(self.pointDist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.Struct(pattern).pack(*self.pointDist))
      length = len(self.pointTheta)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.Struct(pattern).pack(*self.pointTheta))
      length = len(self.penaltyCircleDist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.Struct(pattern).pack(*self.penaltyCircleDist))
      length = len(self.penaltyCircleTheta)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.Struct(pattern).pack(*self.penaltyCircleTheta))
      _x = self.oneline
      buff.write(_get_struct_q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.ballDist, _x.ballTheta,) = _get_struct_2q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.xcrossDist = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.xcrossTheta = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.goalpostDist = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.goalpostTheta = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pointDist = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pointTheta = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.penaltyCircleDist = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.penaltyCircleTheta = s.unpack(str[start:end])
      start = end
      end += 8
      (self.oneline,) = _get_struct_q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2q().pack(_x.ballDist, _x.ballTheta))
      length = len(self.xcrossDist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.xcrossDist.tostring())
      length = len(self.xcrossTheta)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.xcrossTheta.tostring())
      length = len(self.goalpostDist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.goalpostDist.tostring())
      length = len(self.goalpostTheta)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.goalpostTheta.tostring())
      length = len(self.pointDist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.pointDist.tostring())
      length = len(self.pointTheta)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.pointTheta.tostring())
      length = len(self.penaltyCircleDist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.penaltyCircleDist.tostring())
      length = len(self.penaltyCircleTheta)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.penaltyCircleTheta.tostring())
      _x = self.oneline
      buff.write(_get_struct_q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.ballDist, _x.ballTheta,) = _get_struct_2q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.xcrossDist = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.xcrossTheta = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.goalpostDist = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.goalpostTheta = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pointDist = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pointTheta = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.penaltyCircleDist = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.penaltyCircleTheta = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      start = end
      end += 8
      (self.oneline,) = _get_struct_q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2q = None
def _get_struct_2q():
    global _struct_2q
    if _struct_2q is None:
        _struct_2q = struct.Struct("<2q")
    return _struct_2q
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
