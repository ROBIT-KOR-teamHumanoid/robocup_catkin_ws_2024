# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msg_generate/game_control_data.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class game_control_data(genpy.Message):
  _md5sum = "2d9766fbb6334c79351c86b83016bef8"
  _type = "msg_generate/game_control_data"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 robotNum
int64 position
int64 myTeam

int64 state
int64 mySide
int64 iskickoff
int64 readyTime
int64 penalty
int64 secondState
int64[] secondInfo
"""
  __slots__ = ['robotNum','position','myTeam','state','mySide','iskickoff','readyTime','penalty','secondState','secondInfo']
  _slot_types = ['int64','int64','int64','int64','int64','int64','int64','int64','int64','int64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robotNum,position,myTeam,state,mySide,iskickoff,readyTime,penalty,secondState,secondInfo

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(game_control_data, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robotNum is None:
        self.robotNum = 0
      if self.position is None:
        self.position = 0
      if self.myTeam is None:
        self.myTeam = 0
      if self.state is None:
        self.state = 0
      if self.mySide is None:
        self.mySide = 0
      if self.iskickoff is None:
        self.iskickoff = 0
      if self.readyTime is None:
        self.readyTime = 0
      if self.penalty is None:
        self.penalty = 0
      if self.secondState is None:
        self.secondState = 0
      if self.secondInfo is None:
        self.secondInfo = []
    else:
      self.robotNum = 0
      self.position = 0
      self.myTeam = 0
      self.state = 0
      self.mySide = 0
      self.iskickoff = 0
      self.readyTime = 0
      self.penalty = 0
      self.secondState = 0
      self.secondInfo = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9q().pack(_x.robotNum, _x.position, _x.myTeam, _x.state, _x.mySide, _x.iskickoff, _x.readyTime, _x.penalty, _x.secondState))
      length = len(self.secondInfo)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.Struct(pattern).pack(*self.secondInfo))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.robotNum, _x.position, _x.myTeam, _x.state, _x.mySide, _x.iskickoff, _x.readyTime, _x.penalty, _x.secondState,) = _get_struct_9q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.secondInfo = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9q().pack(_x.robotNum, _x.position, _x.myTeam, _x.state, _x.mySide, _x.iskickoff, _x.readyTime, _x.penalty, _x.secondState))
      length = len(self.secondInfo)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.secondInfo.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.robotNum, _x.position, _x.myTeam, _x.state, _x.mySide, _x.iskickoff, _x.readyTime, _x.penalty, _x.secondState,) = _get_struct_9q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.secondInfo = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9q = None
def _get_struct_9q():
    global _struct_9q
    if _struct_9q is None:
        _struct_9q = struct.Struct("<9q")
    return _struct_9q
