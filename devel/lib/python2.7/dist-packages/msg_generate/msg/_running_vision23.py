# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msg_generate/running_vision23.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class running_vision23(genpy.Message):
  _md5sum = "84bbd3957c09a95986b5eb7beba9cf54"
  _type = "msg_generate/running_vision23"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64[] line_cam_X
int64[] line_cam_Y
float64[] line_2d_X
float64[] line_2d_Y
float64[] line_D
float64 line_theta

int64 cross_cam_X
int64 cross_cam_Y
float64 cross_2d_X
float64 cross_2d_Y
float64 cross_D

int64 hurdle_cam_X
int64 hurdle_cam_Y
float64 hurdle_2d_X
float64 hurdle_2d_Y
float64 hurdle_D
float64 hurdle_theta

float64 PAN
float64 TILT
int64 Scan_mode


"""
  __slots__ = ['line_cam_X','line_cam_Y','line_2d_X','line_2d_Y','line_D','line_theta','cross_cam_X','cross_cam_Y','cross_2d_X','cross_2d_Y','cross_D','hurdle_cam_X','hurdle_cam_Y','hurdle_2d_X','hurdle_2d_Y','hurdle_D','hurdle_theta','PAN','TILT','Scan_mode']
  _slot_types = ['int64[]','int64[]','float64[]','float64[]','float64[]','float64','int64','int64','float64','float64','float64','int64','int64','float64','float64','float64','float64','float64','float64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       line_cam_X,line_cam_Y,line_2d_X,line_2d_Y,line_D,line_theta,cross_cam_X,cross_cam_Y,cross_2d_X,cross_2d_Y,cross_D,hurdle_cam_X,hurdle_cam_Y,hurdle_2d_X,hurdle_2d_Y,hurdle_D,hurdle_theta,PAN,TILT,Scan_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(running_vision23, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.line_cam_X is None:
        self.line_cam_X = []
      if self.line_cam_Y is None:
        self.line_cam_Y = []
      if self.line_2d_X is None:
        self.line_2d_X = []
      if self.line_2d_Y is None:
        self.line_2d_Y = []
      if self.line_D is None:
        self.line_D = []
      if self.line_theta is None:
        self.line_theta = 0.
      if self.cross_cam_X is None:
        self.cross_cam_X = 0
      if self.cross_cam_Y is None:
        self.cross_cam_Y = 0
      if self.cross_2d_X is None:
        self.cross_2d_X = 0.
      if self.cross_2d_Y is None:
        self.cross_2d_Y = 0.
      if self.cross_D is None:
        self.cross_D = 0.
      if self.hurdle_cam_X is None:
        self.hurdle_cam_X = 0
      if self.hurdle_cam_Y is None:
        self.hurdle_cam_Y = 0
      if self.hurdle_2d_X is None:
        self.hurdle_2d_X = 0.
      if self.hurdle_2d_Y is None:
        self.hurdle_2d_Y = 0.
      if self.hurdle_D is None:
        self.hurdle_D = 0.
      if self.hurdle_theta is None:
        self.hurdle_theta = 0.
      if self.PAN is None:
        self.PAN = 0.
      if self.TILT is None:
        self.TILT = 0.
      if self.Scan_mode is None:
        self.Scan_mode = 0
    else:
      self.line_cam_X = []
      self.line_cam_Y = []
      self.line_2d_X = []
      self.line_2d_Y = []
      self.line_D = []
      self.line_theta = 0.
      self.cross_cam_X = 0
      self.cross_cam_Y = 0
      self.cross_2d_X = 0.
      self.cross_2d_Y = 0.
      self.cross_D = 0.
      self.hurdle_cam_X = 0
      self.hurdle_cam_Y = 0
      self.hurdle_2d_X = 0.
      self.hurdle_2d_Y = 0.
      self.hurdle_D = 0.
      self.hurdle_theta = 0.
      self.PAN = 0.
      self.TILT = 0.
      self.Scan_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.line_cam_X)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.Struct(pattern).pack(*self.line_cam_X))
      length = len(self.line_cam_Y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.Struct(pattern).pack(*self.line_cam_Y))
      length = len(self.line_2d_X)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.line_2d_X))
      length = len(self.line_2d_Y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.line_2d_Y))
      length = len(self.line_D)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.line_D))
      _x = self
      buff.write(_get_struct_d2q3d2q6dq().pack(_x.line_theta, _x.cross_cam_X, _x.cross_cam_Y, _x.cross_2d_X, _x.cross_2d_Y, _x.cross_D, _x.hurdle_cam_X, _x.hurdle_cam_Y, _x.hurdle_2d_X, _x.hurdle_2d_Y, _x.hurdle_D, _x.hurdle_theta, _x.PAN, _x.TILT, _x.Scan_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.line_cam_X = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.line_cam_Y = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.line_2d_X = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.line_2d_Y = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.line_D = s.unpack(str[start:end])
      _x = self
      start = end
      end += 120
      (_x.line_theta, _x.cross_cam_X, _x.cross_cam_Y, _x.cross_2d_X, _x.cross_2d_Y, _x.cross_D, _x.hurdle_cam_X, _x.hurdle_cam_Y, _x.hurdle_2d_X, _x.hurdle_2d_Y, _x.hurdle_D, _x.hurdle_theta, _x.PAN, _x.TILT, _x.Scan_mode,) = _get_struct_d2q3d2q6dq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.line_cam_X)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.line_cam_X.tostring())
      length = len(self.line_cam_Y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.line_cam_Y.tostring())
      length = len(self.line_2d_X)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.line_2d_X.tostring())
      length = len(self.line_2d_Y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.line_2d_Y.tostring())
      length = len(self.line_D)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.line_D.tostring())
      _x = self
      buff.write(_get_struct_d2q3d2q6dq().pack(_x.line_theta, _x.cross_cam_X, _x.cross_cam_Y, _x.cross_2d_X, _x.cross_2d_Y, _x.cross_D, _x.hurdle_cam_X, _x.hurdle_cam_Y, _x.hurdle_2d_X, _x.hurdle_2d_Y, _x.hurdle_D, _x.hurdle_theta, _x.PAN, _x.TILT, _x.Scan_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.line_cam_X = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.line_cam_Y = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.line_2d_X = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.line_2d_Y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.line_D = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 120
      (_x.line_theta, _x.cross_cam_X, _x.cross_cam_Y, _x.cross_2d_X, _x.cross_2d_Y, _x.cross_D, _x.hurdle_cam_X, _x.hurdle_cam_Y, _x.hurdle_2d_X, _x.hurdle_2d_Y, _x.hurdle_D, _x.hurdle_theta, _x.PAN, _x.TILT, _x.Scan_mode,) = _get_struct_d2q3d2q6dq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d2q3d2q6dq = None
def _get_struct_d2q3d2q6dq():
    global _struct_d2q3d2q6dq
    if _struct_d2q3d2q6dq is None:
        _struct_d2q3d2q6dq = struct.Struct("<d2q3d2q6dq")
    return _struct_d2q3d2q6dq
