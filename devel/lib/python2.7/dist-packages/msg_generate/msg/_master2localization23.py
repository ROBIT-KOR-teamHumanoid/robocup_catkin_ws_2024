# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msg_generate/master2localization23.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class master2localization23(genpy.Message):
  _md5sum = "be324128966108ecba95dfb7b6938f0f"
  _type = "msg_generate/master2localization23"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 goal_x
int64 goal_y
int64 target_x
int64 target_y
int64 robot_allowance_error
int64 robot_cali_radius
int64 mf_robot_x
int64 mf_robot_y
int64 mf_ball_x
int64 mf_ball_y
"""
  __slots__ = ['goal_x','goal_y','target_x','target_y','robot_allowance_error','robot_cali_radius','mf_robot_x','mf_robot_y','mf_ball_x','mf_ball_y']
  _slot_types = ['int64','int64','int64','int64','int64','int64','int64','int64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       goal_x,goal_y,target_x,target_y,robot_allowance_error,robot_cali_radius,mf_robot_x,mf_robot_y,mf_ball_x,mf_ball_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(master2localization23, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.goal_x is None:
        self.goal_x = 0
      if self.goal_y is None:
        self.goal_y = 0
      if self.target_x is None:
        self.target_x = 0
      if self.target_y is None:
        self.target_y = 0
      if self.robot_allowance_error is None:
        self.robot_allowance_error = 0
      if self.robot_cali_radius is None:
        self.robot_cali_radius = 0
      if self.mf_robot_x is None:
        self.mf_robot_x = 0
      if self.mf_robot_y is None:
        self.mf_robot_y = 0
      if self.mf_ball_x is None:
        self.mf_ball_x = 0
      if self.mf_ball_y is None:
        self.mf_ball_y = 0
    else:
      self.goal_x = 0
      self.goal_y = 0
      self.target_x = 0
      self.target_y = 0
      self.robot_allowance_error = 0
      self.robot_cali_radius = 0
      self.mf_robot_x = 0
      self.mf_robot_y = 0
      self.mf_ball_x = 0
      self.mf_ball_y = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10q().pack(_x.goal_x, _x.goal_y, _x.target_x, _x.target_y, _x.robot_allowance_error, _x.robot_cali_radius, _x.mf_robot_x, _x.mf_robot_y, _x.mf_ball_x, _x.mf_ball_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.goal_x, _x.goal_y, _x.target_x, _x.target_y, _x.robot_allowance_error, _x.robot_cali_radius, _x.mf_robot_x, _x.mf_robot_y, _x.mf_ball_x, _x.mf_ball_y,) = _get_struct_10q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10q().pack(_x.goal_x, _x.goal_y, _x.target_x, _x.target_y, _x.robot_allowance_error, _x.robot_cali_radius, _x.mf_robot_x, _x.mf_robot_y, _x.mf_ball_x, _x.mf_ball_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.goal_x, _x.goal_y, _x.target_x, _x.target_y, _x.robot_allowance_error, _x.robot_cali_radius, _x.mf_robot_x, _x.mf_robot_y, _x.mf_ball_x, _x.mf_ball_y,) = _get_struct_10q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10q = None
def _get_struct_10q():
    global _struct_10q
    if _struct_10q is None:
        _struct_10q = struct.Struct("<10q")
    return _struct_10q
