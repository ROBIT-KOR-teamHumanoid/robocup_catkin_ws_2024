# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msg_generate/scv_vision.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class scv_vision(genpy.Message):
  _md5sum = "65c896941af724ac4f09562adde2b414"
  _type = "msg_generate/scv_vision"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 ballX
int64 ballY
int64 ballDist
float64 ballTheta
int64 cylinderX
int64 cylinderY
int64 cylinderDist
float64 cylinderTheta
int64 directX
int64 directY
int64 directDist
float64 directTheta
int64 first_start
int64 circlex
int64 circley
"""
  __slots__ = ['ballX','ballY','ballDist','ballTheta','cylinderX','cylinderY','cylinderDist','cylinderTheta','directX','directY','directDist','directTheta','first_start','circlex','circley']
  _slot_types = ['int64','int64','int64','float64','int64','int64','int64','float64','int64','int64','int64','float64','int64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ballX,ballY,ballDist,ballTheta,cylinderX,cylinderY,cylinderDist,cylinderTheta,directX,directY,directDist,directTheta,first_start,circlex,circley

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(scv_vision, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ballX is None:
        self.ballX = 0
      if self.ballY is None:
        self.ballY = 0
      if self.ballDist is None:
        self.ballDist = 0
      if self.ballTheta is None:
        self.ballTheta = 0.
      if self.cylinderX is None:
        self.cylinderX = 0
      if self.cylinderY is None:
        self.cylinderY = 0
      if self.cylinderDist is None:
        self.cylinderDist = 0
      if self.cylinderTheta is None:
        self.cylinderTheta = 0.
      if self.directX is None:
        self.directX = 0
      if self.directY is None:
        self.directY = 0
      if self.directDist is None:
        self.directDist = 0
      if self.directTheta is None:
        self.directTheta = 0.
      if self.first_start is None:
        self.first_start = 0
      if self.circlex is None:
        self.circlex = 0
      if self.circley is None:
        self.circley = 0
    else:
      self.ballX = 0
      self.ballY = 0
      self.ballDist = 0
      self.ballTheta = 0.
      self.cylinderX = 0
      self.cylinderY = 0
      self.cylinderDist = 0
      self.cylinderTheta = 0.
      self.directX = 0
      self.directY = 0
      self.directDist = 0
      self.directTheta = 0.
      self.first_start = 0
      self.circlex = 0
      self.circley = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3qd3qd3qd3q().pack(_x.ballX, _x.ballY, _x.ballDist, _x.ballTheta, _x.cylinderX, _x.cylinderY, _x.cylinderDist, _x.cylinderTheta, _x.directX, _x.directY, _x.directDist, _x.directTheta, _x.first_start, _x.circlex, _x.circley))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 120
      (_x.ballX, _x.ballY, _x.ballDist, _x.ballTheta, _x.cylinderX, _x.cylinderY, _x.cylinderDist, _x.cylinderTheta, _x.directX, _x.directY, _x.directDist, _x.directTheta, _x.first_start, _x.circlex, _x.circley,) = _get_struct_3qd3qd3qd3q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3qd3qd3qd3q().pack(_x.ballX, _x.ballY, _x.ballDist, _x.ballTheta, _x.cylinderX, _x.cylinderY, _x.cylinderDist, _x.cylinderTheta, _x.directX, _x.directY, _x.directDist, _x.directTheta, _x.first_start, _x.circlex, _x.circley))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 120
      (_x.ballX, _x.ballY, _x.ballDist, _x.ballTheta, _x.cylinderX, _x.cylinderY, _x.cylinderDist, _x.cylinderTheta, _x.directX, _x.directY, _x.directDist, _x.directTheta, _x.first_start, _x.circlex, _x.circley,) = _get_struct_3qd3qd3qd3q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3qd3qd3qd3q = None
def _get_struct_3qd3qd3qd3q():
    global _struct_3qd3qd3qd3q
    if _struct_3qd3qd3qd3q is None:
        _struct_3qd3qd3qd3q = struct.Struct("<3qd3qd3qd3q")
    return _struct_3qd3qd3qd3q
