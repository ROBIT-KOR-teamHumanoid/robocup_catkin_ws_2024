# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msg_generate/robocup_vision24.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class robocup_vision24(genpy.Message):
  _md5sum = "e7c23af0ec42fde2be9393d1f1e88db0"
  _type = "msg_generate/robocup_vision24"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 Ball_cam_X
int64 Ball_cam_Y
float64 Ball_2d_X
float64 Ball_2d_Y
float64 Ball_D
float64 PAN
float64 TILT
float64 Ball_speed_X
float64 Ball_speed_Y
float64[] ROBOT_VEC_X
float64[] ROBOT_VEC_Y
int64 Ball_speed_level
int64 Scan_mode

"""
  __slots__ = ['Ball_cam_X','Ball_cam_Y','Ball_2d_X','Ball_2d_Y','Ball_D','PAN','TILT','Ball_speed_X','Ball_speed_Y','ROBOT_VEC_X','ROBOT_VEC_Y','Ball_speed_level','Scan_mode']
  _slot_types = ['int64','int64','float64','float64','float64','float64','float64','float64','float64','float64[]','float64[]','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Ball_cam_X,Ball_cam_Y,Ball_2d_X,Ball_2d_Y,Ball_D,PAN,TILT,Ball_speed_X,Ball_speed_Y,ROBOT_VEC_X,ROBOT_VEC_Y,Ball_speed_level,Scan_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robocup_vision24, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Ball_cam_X is None:
        self.Ball_cam_X = 0
      if self.Ball_cam_Y is None:
        self.Ball_cam_Y = 0
      if self.Ball_2d_X is None:
        self.Ball_2d_X = 0.
      if self.Ball_2d_Y is None:
        self.Ball_2d_Y = 0.
      if self.Ball_D is None:
        self.Ball_D = 0.
      if self.PAN is None:
        self.PAN = 0.
      if self.TILT is None:
        self.TILT = 0.
      if self.Ball_speed_X is None:
        self.Ball_speed_X = 0.
      if self.Ball_speed_Y is None:
        self.Ball_speed_Y = 0.
      if self.ROBOT_VEC_X is None:
        self.ROBOT_VEC_X = []
      if self.ROBOT_VEC_Y is None:
        self.ROBOT_VEC_Y = []
      if self.Ball_speed_level is None:
        self.Ball_speed_level = 0
      if self.Scan_mode is None:
        self.Scan_mode = 0
    else:
      self.Ball_cam_X = 0
      self.Ball_cam_Y = 0
      self.Ball_2d_X = 0.
      self.Ball_2d_Y = 0.
      self.Ball_D = 0.
      self.PAN = 0.
      self.TILT = 0.
      self.Ball_speed_X = 0.
      self.Ball_speed_Y = 0.
      self.ROBOT_VEC_X = []
      self.ROBOT_VEC_Y = []
      self.Ball_speed_level = 0
      self.Scan_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2q7d().pack(_x.Ball_cam_X, _x.Ball_cam_Y, _x.Ball_2d_X, _x.Ball_2d_Y, _x.Ball_D, _x.PAN, _x.TILT, _x.Ball_speed_X, _x.Ball_speed_Y))
      length = len(self.ROBOT_VEC_X)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ROBOT_VEC_X))
      length = len(self.ROBOT_VEC_Y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ROBOT_VEC_Y))
      _x = self
      buff.write(_get_struct_2q().pack(_x.Ball_speed_level, _x.Scan_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.Ball_cam_X, _x.Ball_cam_Y, _x.Ball_2d_X, _x.Ball_2d_Y, _x.Ball_D, _x.PAN, _x.TILT, _x.Ball_speed_X, _x.Ball_speed_Y,) = _get_struct_2q7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ROBOT_VEC_X = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ROBOT_VEC_Y = s.unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.Ball_speed_level, _x.Scan_mode,) = _get_struct_2q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2q7d().pack(_x.Ball_cam_X, _x.Ball_cam_Y, _x.Ball_2d_X, _x.Ball_2d_Y, _x.Ball_D, _x.PAN, _x.TILT, _x.Ball_speed_X, _x.Ball_speed_Y))
      length = len(self.ROBOT_VEC_X)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ROBOT_VEC_X.tostring())
      length = len(self.ROBOT_VEC_Y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ROBOT_VEC_Y.tostring())
      _x = self
      buff.write(_get_struct_2q().pack(_x.Ball_speed_level, _x.Scan_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.Ball_cam_X, _x.Ball_cam_Y, _x.Ball_2d_X, _x.Ball_2d_Y, _x.Ball_D, _x.PAN, _x.TILT, _x.Ball_speed_X, _x.Ball_speed_Y,) = _get_struct_2q7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ROBOT_VEC_X = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ROBOT_VEC_Y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.Ball_speed_level, _x.Scan_mode,) = _get_struct_2q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2q = None
def _get_struct_2q():
    global _struct_2q
    if _struct_2q is None:
        _struct_2q = struct.Struct("<2q")
    return _struct_2q
_struct_2q7d = None
def _get_struct_2q7d():
    global _struct_2q7d
    if _struct_2q7d is None:
        _struct_2q7d = struct.Struct("<2q7d")
    return _struct_2q7d
