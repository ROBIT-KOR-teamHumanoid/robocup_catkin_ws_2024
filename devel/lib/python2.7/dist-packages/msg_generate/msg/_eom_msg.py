# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msg_generate/eom_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class eom_msg(genpy.Message):
  _md5sum = "2bab63df50bb1f7ece05fa6985761519"
  _type = "msg_generate/eom_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool IK_Flag
float64 Entire_Time
float64 Frequency
float64 Double_Ratio
float64 Single_Ratio
float64 Default_X_Right
float64 Default_X_Left
float64 Default_Y_Right
float64 Default_Y_Left
float64 Default_Z_Right
float64 Default_Z_Left
float64 Offset_10_Motor
float64 Offset_11_Motor
float64 Offset_12_Motor
float64 Offset_13_Motor
float64 Offset_14_Motor
float64 Offset_15_Motor
float64 Offset_16_Motor
float64 Offset_17_Motor
float64 Offset_18_Motor
float64 Offset_19_Motor
float64 Offset_20_Motor
float64 Offset_21_Motor
float64 Swing_Right_Leg
float64 Swing_Left_Leg
float64 Swing_Right_Shoulder
float64 Swing_Left_Shoulder
float64 Rise_Right_Leg
float64 Rise_Left_Leg
float64 Start_Entire_Time
float64 Start_Swing
float64 Start_Rise
float64 End_Entire_Time
float64 End_Swing
float64 End_Rise
float64 Test_X
float64 Test_Side
float64 Test_Yaw
float64 Tuning_X
float64 Tuning_Side
float64 Tuning_Yaw
float64 Balance_Value_0
float64 Balance_Value_1
float64 Balance_Value_2
float64 Balance_Value_3
float64 Balance_Pitch_GP
float64 Balance_Pitch_GI
float64 Balance_Pitch_GD
float64 Balance_Pitch_ELIMIT
float64 Balance_Pitch_OLIMIT
float64 Balance_Pitch_Neg_Target
float64 Balance_Pitch_Pos_Target
float64 Balance_Roll_GP
float64 Balance_Roll_GI
float64 Balance_Roll_GD
float64 Balance_Roll_ELIMIT
float64 Balance_Roll_OLIMIT
float64 Balance_Roll_Neg_Target
float64 Balance_Roll_Pos_Target
float64 Balance_Angle_Pitch_GP
float64 Balance_Angle_Pitch_GI
float64 Balance_Angle_Pitch_GD
float64 Balance_Angle_Pitch_ELIMIT
float64 Balance_Angle_Pitch_OLIMIT
float64 Balance_Angle_Pitch_Neg_Target
float64 Balance_Angle_Pitch_Pos_Target
bool Balance_Pitch_Flag
bool Balance_Angle_Pitch_Flag
bool Balance_Roll_Flag
float64 Balance_Time_Flag

"""
  __slots__ = ['IK_Flag','Entire_Time','Frequency','Double_Ratio','Single_Ratio','Default_X_Right','Default_X_Left','Default_Y_Right','Default_Y_Left','Default_Z_Right','Default_Z_Left','Offset_10_Motor','Offset_11_Motor','Offset_12_Motor','Offset_13_Motor','Offset_14_Motor','Offset_15_Motor','Offset_16_Motor','Offset_17_Motor','Offset_18_Motor','Offset_19_Motor','Offset_20_Motor','Offset_21_Motor','Swing_Right_Leg','Swing_Left_Leg','Swing_Right_Shoulder','Swing_Left_Shoulder','Rise_Right_Leg','Rise_Left_Leg','Start_Entire_Time','Start_Swing','Start_Rise','End_Entire_Time','End_Swing','End_Rise','Test_X','Test_Side','Test_Yaw','Tuning_X','Tuning_Side','Tuning_Yaw','Balance_Value_0','Balance_Value_1','Balance_Value_2','Balance_Value_3','Balance_Pitch_GP','Balance_Pitch_GI','Balance_Pitch_GD','Balance_Pitch_ELIMIT','Balance_Pitch_OLIMIT','Balance_Pitch_Neg_Target','Balance_Pitch_Pos_Target','Balance_Roll_GP','Balance_Roll_GI','Balance_Roll_GD','Balance_Roll_ELIMIT','Balance_Roll_OLIMIT','Balance_Roll_Neg_Target','Balance_Roll_Pos_Target','Balance_Angle_Pitch_GP','Balance_Angle_Pitch_GI','Balance_Angle_Pitch_GD','Balance_Angle_Pitch_ELIMIT','Balance_Angle_Pitch_OLIMIT','Balance_Angle_Pitch_Neg_Target','Balance_Angle_Pitch_Pos_Target','Balance_Pitch_Flag','Balance_Angle_Pitch_Flag','Balance_Roll_Flag','Balance_Time_Flag']
  _slot_types = ['bool','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','bool','bool','bool','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       IK_Flag,Entire_Time,Frequency,Double_Ratio,Single_Ratio,Default_X_Right,Default_X_Left,Default_Y_Right,Default_Y_Left,Default_Z_Right,Default_Z_Left,Offset_10_Motor,Offset_11_Motor,Offset_12_Motor,Offset_13_Motor,Offset_14_Motor,Offset_15_Motor,Offset_16_Motor,Offset_17_Motor,Offset_18_Motor,Offset_19_Motor,Offset_20_Motor,Offset_21_Motor,Swing_Right_Leg,Swing_Left_Leg,Swing_Right_Shoulder,Swing_Left_Shoulder,Rise_Right_Leg,Rise_Left_Leg,Start_Entire_Time,Start_Swing,Start_Rise,End_Entire_Time,End_Swing,End_Rise,Test_X,Test_Side,Test_Yaw,Tuning_X,Tuning_Side,Tuning_Yaw,Balance_Value_0,Balance_Value_1,Balance_Value_2,Balance_Value_3,Balance_Pitch_GP,Balance_Pitch_GI,Balance_Pitch_GD,Balance_Pitch_ELIMIT,Balance_Pitch_OLIMIT,Balance_Pitch_Neg_Target,Balance_Pitch_Pos_Target,Balance_Roll_GP,Balance_Roll_GI,Balance_Roll_GD,Balance_Roll_ELIMIT,Balance_Roll_OLIMIT,Balance_Roll_Neg_Target,Balance_Roll_Pos_Target,Balance_Angle_Pitch_GP,Balance_Angle_Pitch_GI,Balance_Angle_Pitch_GD,Balance_Angle_Pitch_ELIMIT,Balance_Angle_Pitch_OLIMIT,Balance_Angle_Pitch_Neg_Target,Balance_Angle_Pitch_Pos_Target,Balance_Pitch_Flag,Balance_Angle_Pitch_Flag,Balance_Roll_Flag,Balance_Time_Flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(eom_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.IK_Flag is None:
        self.IK_Flag = False
      if self.Entire_Time is None:
        self.Entire_Time = 0.
      if self.Frequency is None:
        self.Frequency = 0.
      if self.Double_Ratio is None:
        self.Double_Ratio = 0.
      if self.Single_Ratio is None:
        self.Single_Ratio = 0.
      if self.Default_X_Right is None:
        self.Default_X_Right = 0.
      if self.Default_X_Left is None:
        self.Default_X_Left = 0.
      if self.Default_Y_Right is None:
        self.Default_Y_Right = 0.
      if self.Default_Y_Left is None:
        self.Default_Y_Left = 0.
      if self.Default_Z_Right is None:
        self.Default_Z_Right = 0.
      if self.Default_Z_Left is None:
        self.Default_Z_Left = 0.
      if self.Offset_10_Motor is None:
        self.Offset_10_Motor = 0.
      if self.Offset_11_Motor is None:
        self.Offset_11_Motor = 0.
      if self.Offset_12_Motor is None:
        self.Offset_12_Motor = 0.
      if self.Offset_13_Motor is None:
        self.Offset_13_Motor = 0.
      if self.Offset_14_Motor is None:
        self.Offset_14_Motor = 0.
      if self.Offset_15_Motor is None:
        self.Offset_15_Motor = 0.
      if self.Offset_16_Motor is None:
        self.Offset_16_Motor = 0.
      if self.Offset_17_Motor is None:
        self.Offset_17_Motor = 0.
      if self.Offset_18_Motor is None:
        self.Offset_18_Motor = 0.
      if self.Offset_19_Motor is None:
        self.Offset_19_Motor = 0.
      if self.Offset_20_Motor is None:
        self.Offset_20_Motor = 0.
      if self.Offset_21_Motor is None:
        self.Offset_21_Motor = 0.
      if self.Swing_Right_Leg is None:
        self.Swing_Right_Leg = 0.
      if self.Swing_Left_Leg is None:
        self.Swing_Left_Leg = 0.
      if self.Swing_Right_Shoulder is None:
        self.Swing_Right_Shoulder = 0.
      if self.Swing_Left_Shoulder is None:
        self.Swing_Left_Shoulder = 0.
      if self.Rise_Right_Leg is None:
        self.Rise_Right_Leg = 0.
      if self.Rise_Left_Leg is None:
        self.Rise_Left_Leg = 0.
      if self.Start_Entire_Time is None:
        self.Start_Entire_Time = 0.
      if self.Start_Swing is None:
        self.Start_Swing = 0.
      if self.Start_Rise is None:
        self.Start_Rise = 0.
      if self.End_Entire_Time is None:
        self.End_Entire_Time = 0.
      if self.End_Swing is None:
        self.End_Swing = 0.
      if self.End_Rise is None:
        self.End_Rise = 0.
      if self.Test_X is None:
        self.Test_X = 0.
      if self.Test_Side is None:
        self.Test_Side = 0.
      if self.Test_Yaw is None:
        self.Test_Yaw = 0.
      if self.Tuning_X is None:
        self.Tuning_X = 0.
      if self.Tuning_Side is None:
        self.Tuning_Side = 0.
      if self.Tuning_Yaw is None:
        self.Tuning_Yaw = 0.
      if self.Balance_Value_0 is None:
        self.Balance_Value_0 = 0.
      if self.Balance_Value_1 is None:
        self.Balance_Value_1 = 0.
      if self.Balance_Value_2 is None:
        self.Balance_Value_2 = 0.
      if self.Balance_Value_3 is None:
        self.Balance_Value_3 = 0.
      if self.Balance_Pitch_GP is None:
        self.Balance_Pitch_GP = 0.
      if self.Balance_Pitch_GI is None:
        self.Balance_Pitch_GI = 0.
      if self.Balance_Pitch_GD is None:
        self.Balance_Pitch_GD = 0.
      if self.Balance_Pitch_ELIMIT is None:
        self.Balance_Pitch_ELIMIT = 0.
      if self.Balance_Pitch_OLIMIT is None:
        self.Balance_Pitch_OLIMIT = 0.
      if self.Balance_Pitch_Neg_Target is None:
        self.Balance_Pitch_Neg_Target = 0.
      if self.Balance_Pitch_Pos_Target is None:
        self.Balance_Pitch_Pos_Target = 0.
      if self.Balance_Roll_GP is None:
        self.Balance_Roll_GP = 0.
      if self.Balance_Roll_GI is None:
        self.Balance_Roll_GI = 0.
      if self.Balance_Roll_GD is None:
        self.Balance_Roll_GD = 0.
      if self.Balance_Roll_ELIMIT is None:
        self.Balance_Roll_ELIMIT = 0.
      if self.Balance_Roll_OLIMIT is None:
        self.Balance_Roll_OLIMIT = 0.
      if self.Balance_Roll_Neg_Target is None:
        self.Balance_Roll_Neg_Target = 0.
      if self.Balance_Roll_Pos_Target is None:
        self.Balance_Roll_Pos_Target = 0.
      if self.Balance_Angle_Pitch_GP is None:
        self.Balance_Angle_Pitch_GP = 0.
      if self.Balance_Angle_Pitch_GI is None:
        self.Balance_Angle_Pitch_GI = 0.
      if self.Balance_Angle_Pitch_GD is None:
        self.Balance_Angle_Pitch_GD = 0.
      if self.Balance_Angle_Pitch_ELIMIT is None:
        self.Balance_Angle_Pitch_ELIMIT = 0.
      if self.Balance_Angle_Pitch_OLIMIT is None:
        self.Balance_Angle_Pitch_OLIMIT = 0.
      if self.Balance_Angle_Pitch_Neg_Target is None:
        self.Balance_Angle_Pitch_Neg_Target = 0.
      if self.Balance_Angle_Pitch_Pos_Target is None:
        self.Balance_Angle_Pitch_Pos_Target = 0.
      if self.Balance_Pitch_Flag is None:
        self.Balance_Pitch_Flag = False
      if self.Balance_Angle_Pitch_Flag is None:
        self.Balance_Angle_Pitch_Flag = False
      if self.Balance_Roll_Flag is None:
        self.Balance_Roll_Flag = False
      if self.Balance_Time_Flag is None:
        self.Balance_Time_Flag = 0.
    else:
      self.IK_Flag = False
      self.Entire_Time = 0.
      self.Frequency = 0.
      self.Double_Ratio = 0.
      self.Single_Ratio = 0.
      self.Default_X_Right = 0.
      self.Default_X_Left = 0.
      self.Default_Y_Right = 0.
      self.Default_Y_Left = 0.
      self.Default_Z_Right = 0.
      self.Default_Z_Left = 0.
      self.Offset_10_Motor = 0.
      self.Offset_11_Motor = 0.
      self.Offset_12_Motor = 0.
      self.Offset_13_Motor = 0.
      self.Offset_14_Motor = 0.
      self.Offset_15_Motor = 0.
      self.Offset_16_Motor = 0.
      self.Offset_17_Motor = 0.
      self.Offset_18_Motor = 0.
      self.Offset_19_Motor = 0.
      self.Offset_20_Motor = 0.
      self.Offset_21_Motor = 0.
      self.Swing_Right_Leg = 0.
      self.Swing_Left_Leg = 0.
      self.Swing_Right_Shoulder = 0.
      self.Swing_Left_Shoulder = 0.
      self.Rise_Right_Leg = 0.
      self.Rise_Left_Leg = 0.
      self.Start_Entire_Time = 0.
      self.Start_Swing = 0.
      self.Start_Rise = 0.
      self.End_Entire_Time = 0.
      self.End_Swing = 0.
      self.End_Rise = 0.
      self.Test_X = 0.
      self.Test_Side = 0.
      self.Test_Yaw = 0.
      self.Tuning_X = 0.
      self.Tuning_Side = 0.
      self.Tuning_Yaw = 0.
      self.Balance_Value_0 = 0.
      self.Balance_Value_1 = 0.
      self.Balance_Value_2 = 0.
      self.Balance_Value_3 = 0.
      self.Balance_Pitch_GP = 0.
      self.Balance_Pitch_GI = 0.
      self.Balance_Pitch_GD = 0.
      self.Balance_Pitch_ELIMIT = 0.
      self.Balance_Pitch_OLIMIT = 0.
      self.Balance_Pitch_Neg_Target = 0.
      self.Balance_Pitch_Pos_Target = 0.
      self.Balance_Roll_GP = 0.
      self.Balance_Roll_GI = 0.
      self.Balance_Roll_GD = 0.
      self.Balance_Roll_ELIMIT = 0.
      self.Balance_Roll_OLIMIT = 0.
      self.Balance_Roll_Neg_Target = 0.
      self.Balance_Roll_Pos_Target = 0.
      self.Balance_Angle_Pitch_GP = 0.
      self.Balance_Angle_Pitch_GI = 0.
      self.Balance_Angle_Pitch_GD = 0.
      self.Balance_Angle_Pitch_ELIMIT = 0.
      self.Balance_Angle_Pitch_OLIMIT = 0.
      self.Balance_Angle_Pitch_Neg_Target = 0.
      self.Balance_Angle_Pitch_Pos_Target = 0.
      self.Balance_Pitch_Flag = False
      self.Balance_Angle_Pitch_Flag = False
      self.Balance_Roll_Flag = False
      self.Balance_Time_Flag = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B65d3Bd().pack(_x.IK_Flag, _x.Entire_Time, _x.Frequency, _x.Double_Ratio, _x.Single_Ratio, _x.Default_X_Right, _x.Default_X_Left, _x.Default_Y_Right, _x.Default_Y_Left, _x.Default_Z_Right, _x.Default_Z_Left, _x.Offset_10_Motor, _x.Offset_11_Motor, _x.Offset_12_Motor, _x.Offset_13_Motor, _x.Offset_14_Motor, _x.Offset_15_Motor, _x.Offset_16_Motor, _x.Offset_17_Motor, _x.Offset_18_Motor, _x.Offset_19_Motor, _x.Offset_20_Motor, _x.Offset_21_Motor, _x.Swing_Right_Leg, _x.Swing_Left_Leg, _x.Swing_Right_Shoulder, _x.Swing_Left_Shoulder, _x.Rise_Right_Leg, _x.Rise_Left_Leg, _x.Start_Entire_Time, _x.Start_Swing, _x.Start_Rise, _x.End_Entire_Time, _x.End_Swing, _x.End_Rise, _x.Test_X, _x.Test_Side, _x.Test_Yaw, _x.Tuning_X, _x.Tuning_Side, _x.Tuning_Yaw, _x.Balance_Value_0, _x.Balance_Value_1, _x.Balance_Value_2, _x.Balance_Value_3, _x.Balance_Pitch_GP, _x.Balance_Pitch_GI, _x.Balance_Pitch_GD, _x.Balance_Pitch_ELIMIT, _x.Balance_Pitch_OLIMIT, _x.Balance_Pitch_Neg_Target, _x.Balance_Pitch_Pos_Target, _x.Balance_Roll_GP, _x.Balance_Roll_GI, _x.Balance_Roll_GD, _x.Balance_Roll_ELIMIT, _x.Balance_Roll_OLIMIT, _x.Balance_Roll_Neg_Target, _x.Balance_Roll_Pos_Target, _x.Balance_Angle_Pitch_GP, _x.Balance_Angle_Pitch_GI, _x.Balance_Angle_Pitch_GD, _x.Balance_Angle_Pitch_ELIMIT, _x.Balance_Angle_Pitch_OLIMIT, _x.Balance_Angle_Pitch_Neg_Target, _x.Balance_Angle_Pitch_Pos_Target, _x.Balance_Pitch_Flag, _x.Balance_Angle_Pitch_Flag, _x.Balance_Roll_Flag, _x.Balance_Time_Flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 532
      (_x.IK_Flag, _x.Entire_Time, _x.Frequency, _x.Double_Ratio, _x.Single_Ratio, _x.Default_X_Right, _x.Default_X_Left, _x.Default_Y_Right, _x.Default_Y_Left, _x.Default_Z_Right, _x.Default_Z_Left, _x.Offset_10_Motor, _x.Offset_11_Motor, _x.Offset_12_Motor, _x.Offset_13_Motor, _x.Offset_14_Motor, _x.Offset_15_Motor, _x.Offset_16_Motor, _x.Offset_17_Motor, _x.Offset_18_Motor, _x.Offset_19_Motor, _x.Offset_20_Motor, _x.Offset_21_Motor, _x.Swing_Right_Leg, _x.Swing_Left_Leg, _x.Swing_Right_Shoulder, _x.Swing_Left_Shoulder, _x.Rise_Right_Leg, _x.Rise_Left_Leg, _x.Start_Entire_Time, _x.Start_Swing, _x.Start_Rise, _x.End_Entire_Time, _x.End_Swing, _x.End_Rise, _x.Test_X, _x.Test_Side, _x.Test_Yaw, _x.Tuning_X, _x.Tuning_Side, _x.Tuning_Yaw, _x.Balance_Value_0, _x.Balance_Value_1, _x.Balance_Value_2, _x.Balance_Value_3, _x.Balance_Pitch_GP, _x.Balance_Pitch_GI, _x.Balance_Pitch_GD, _x.Balance_Pitch_ELIMIT, _x.Balance_Pitch_OLIMIT, _x.Balance_Pitch_Neg_Target, _x.Balance_Pitch_Pos_Target, _x.Balance_Roll_GP, _x.Balance_Roll_GI, _x.Balance_Roll_GD, _x.Balance_Roll_ELIMIT, _x.Balance_Roll_OLIMIT, _x.Balance_Roll_Neg_Target, _x.Balance_Roll_Pos_Target, _x.Balance_Angle_Pitch_GP, _x.Balance_Angle_Pitch_GI, _x.Balance_Angle_Pitch_GD, _x.Balance_Angle_Pitch_ELIMIT, _x.Balance_Angle_Pitch_OLIMIT, _x.Balance_Angle_Pitch_Neg_Target, _x.Balance_Angle_Pitch_Pos_Target, _x.Balance_Pitch_Flag, _x.Balance_Angle_Pitch_Flag, _x.Balance_Roll_Flag, _x.Balance_Time_Flag,) = _get_struct_B65d3Bd().unpack(str[start:end])
      self.IK_Flag = bool(self.IK_Flag)
      self.Balance_Pitch_Flag = bool(self.Balance_Pitch_Flag)
      self.Balance_Angle_Pitch_Flag = bool(self.Balance_Angle_Pitch_Flag)
      self.Balance_Roll_Flag = bool(self.Balance_Roll_Flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B65d3Bd().pack(_x.IK_Flag, _x.Entire_Time, _x.Frequency, _x.Double_Ratio, _x.Single_Ratio, _x.Default_X_Right, _x.Default_X_Left, _x.Default_Y_Right, _x.Default_Y_Left, _x.Default_Z_Right, _x.Default_Z_Left, _x.Offset_10_Motor, _x.Offset_11_Motor, _x.Offset_12_Motor, _x.Offset_13_Motor, _x.Offset_14_Motor, _x.Offset_15_Motor, _x.Offset_16_Motor, _x.Offset_17_Motor, _x.Offset_18_Motor, _x.Offset_19_Motor, _x.Offset_20_Motor, _x.Offset_21_Motor, _x.Swing_Right_Leg, _x.Swing_Left_Leg, _x.Swing_Right_Shoulder, _x.Swing_Left_Shoulder, _x.Rise_Right_Leg, _x.Rise_Left_Leg, _x.Start_Entire_Time, _x.Start_Swing, _x.Start_Rise, _x.End_Entire_Time, _x.End_Swing, _x.End_Rise, _x.Test_X, _x.Test_Side, _x.Test_Yaw, _x.Tuning_X, _x.Tuning_Side, _x.Tuning_Yaw, _x.Balance_Value_0, _x.Balance_Value_1, _x.Balance_Value_2, _x.Balance_Value_3, _x.Balance_Pitch_GP, _x.Balance_Pitch_GI, _x.Balance_Pitch_GD, _x.Balance_Pitch_ELIMIT, _x.Balance_Pitch_OLIMIT, _x.Balance_Pitch_Neg_Target, _x.Balance_Pitch_Pos_Target, _x.Balance_Roll_GP, _x.Balance_Roll_GI, _x.Balance_Roll_GD, _x.Balance_Roll_ELIMIT, _x.Balance_Roll_OLIMIT, _x.Balance_Roll_Neg_Target, _x.Balance_Roll_Pos_Target, _x.Balance_Angle_Pitch_GP, _x.Balance_Angle_Pitch_GI, _x.Balance_Angle_Pitch_GD, _x.Balance_Angle_Pitch_ELIMIT, _x.Balance_Angle_Pitch_OLIMIT, _x.Balance_Angle_Pitch_Neg_Target, _x.Balance_Angle_Pitch_Pos_Target, _x.Balance_Pitch_Flag, _x.Balance_Angle_Pitch_Flag, _x.Balance_Roll_Flag, _x.Balance_Time_Flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 532
      (_x.IK_Flag, _x.Entire_Time, _x.Frequency, _x.Double_Ratio, _x.Single_Ratio, _x.Default_X_Right, _x.Default_X_Left, _x.Default_Y_Right, _x.Default_Y_Left, _x.Default_Z_Right, _x.Default_Z_Left, _x.Offset_10_Motor, _x.Offset_11_Motor, _x.Offset_12_Motor, _x.Offset_13_Motor, _x.Offset_14_Motor, _x.Offset_15_Motor, _x.Offset_16_Motor, _x.Offset_17_Motor, _x.Offset_18_Motor, _x.Offset_19_Motor, _x.Offset_20_Motor, _x.Offset_21_Motor, _x.Swing_Right_Leg, _x.Swing_Left_Leg, _x.Swing_Right_Shoulder, _x.Swing_Left_Shoulder, _x.Rise_Right_Leg, _x.Rise_Left_Leg, _x.Start_Entire_Time, _x.Start_Swing, _x.Start_Rise, _x.End_Entire_Time, _x.End_Swing, _x.End_Rise, _x.Test_X, _x.Test_Side, _x.Test_Yaw, _x.Tuning_X, _x.Tuning_Side, _x.Tuning_Yaw, _x.Balance_Value_0, _x.Balance_Value_1, _x.Balance_Value_2, _x.Balance_Value_3, _x.Balance_Pitch_GP, _x.Balance_Pitch_GI, _x.Balance_Pitch_GD, _x.Balance_Pitch_ELIMIT, _x.Balance_Pitch_OLIMIT, _x.Balance_Pitch_Neg_Target, _x.Balance_Pitch_Pos_Target, _x.Balance_Roll_GP, _x.Balance_Roll_GI, _x.Balance_Roll_GD, _x.Balance_Roll_ELIMIT, _x.Balance_Roll_OLIMIT, _x.Balance_Roll_Neg_Target, _x.Balance_Roll_Pos_Target, _x.Balance_Angle_Pitch_GP, _x.Balance_Angle_Pitch_GI, _x.Balance_Angle_Pitch_GD, _x.Balance_Angle_Pitch_ELIMIT, _x.Balance_Angle_Pitch_OLIMIT, _x.Balance_Angle_Pitch_Neg_Target, _x.Balance_Angle_Pitch_Pos_Target, _x.Balance_Pitch_Flag, _x.Balance_Angle_Pitch_Flag, _x.Balance_Roll_Flag, _x.Balance_Time_Flag,) = _get_struct_B65d3Bd().unpack(str[start:end])
      self.IK_Flag = bool(self.IK_Flag)
      self.Balance_Pitch_Flag = bool(self.Balance_Pitch_Flag)
      self.Balance_Angle_Pitch_Flag = bool(self.Balance_Angle_Pitch_Flag)
      self.Balance_Roll_Flag = bool(self.Balance_Roll_Flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B65d3Bd = None
def _get_struct_B65d3Bd():
    global _struct_B65d3Bd
    if _struct_B65d3Bd is None:
        _struct_B65d3Bd = struct.Struct("<B65d3Bd")
    return _struct_B65d3Bd
