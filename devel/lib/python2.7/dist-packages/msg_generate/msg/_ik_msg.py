# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msg_generate/ik_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ik_msg(genpy.Message):
  _md5sum = "1e34403e3b7a9f4022bce7eaacc3d24d"
  _type = "msg_generate/ik_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 X_length
float64 Y_length
float64 Yaw
float64 flag

int32 One_X_length
int32 One_Y_length
int32 One_YAW
int32 One_step_flag


"""
  __slots__ = ['X_length','Y_length','Yaw','flag','One_X_length','One_Y_length','One_YAW','One_step_flag']
  _slot_types = ['float64','float64','float64','float64','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       X_length,Y_length,Yaw,flag,One_X_length,One_Y_length,One_YAW,One_step_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ik_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.X_length is None:
        self.X_length = 0.
      if self.Y_length is None:
        self.Y_length = 0.
      if self.Yaw is None:
        self.Yaw = 0.
      if self.flag is None:
        self.flag = 0.
      if self.One_X_length is None:
        self.One_X_length = 0
      if self.One_Y_length is None:
        self.One_Y_length = 0
      if self.One_YAW is None:
        self.One_YAW = 0
      if self.One_step_flag is None:
        self.One_step_flag = 0
    else:
      self.X_length = 0.
      self.Y_length = 0.
      self.Yaw = 0.
      self.flag = 0.
      self.One_X_length = 0
      self.One_Y_length = 0
      self.One_YAW = 0
      self.One_step_flag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4d4i().pack(_x.X_length, _x.Y_length, _x.Yaw, _x.flag, _x.One_X_length, _x.One_Y_length, _x.One_YAW, _x.One_step_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.X_length, _x.Y_length, _x.Yaw, _x.flag, _x.One_X_length, _x.One_Y_length, _x.One_YAW, _x.One_step_flag,) = _get_struct_4d4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4d4i().pack(_x.X_length, _x.Y_length, _x.Yaw, _x.flag, _x.One_X_length, _x.One_Y_length, _x.One_YAW, _x.One_step_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.X_length, _x.Y_length, _x.Yaw, _x.flag, _x.One_X_length, _x.One_Y_length, _x.One_YAW, _x.One_step_flag,) = _get_struct_4d4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d4i = None
def _get_struct_4d4i():
    global _struct_4d4i
    if _struct_4d4i is None:
        _struct_4d4i = struct.Struct("<4d4i")
    return _struct_4d4i
