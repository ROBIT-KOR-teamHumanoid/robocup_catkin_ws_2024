# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msg_generate/zmp_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class zmp_msg(genpy.Message):
  _md5sum = "b6dd8aae25ccfd762514817678c236ea"
  _type = "msg_generate/zmp_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 Left_X_zmp
float64 Left_Y_zmp
float64 Right_X_zmp
float64 Right_Y_zmp
float64 Total_X_zmp
float64 Total_Y_zmp
bool Left_Foot
bool Right_Foot
bool Both_Feet
"""
  __slots__ = ['Left_X_zmp','Left_Y_zmp','Right_X_zmp','Right_Y_zmp','Total_X_zmp','Total_Y_zmp','Left_Foot','Right_Foot','Both_Feet']
  _slot_types = ['float64','float64','float64','float64','float64','float64','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Left_X_zmp,Left_Y_zmp,Right_X_zmp,Right_Y_zmp,Total_X_zmp,Total_Y_zmp,Left_Foot,Right_Foot,Both_Feet

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(zmp_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Left_X_zmp is None:
        self.Left_X_zmp = 0.
      if self.Left_Y_zmp is None:
        self.Left_Y_zmp = 0.
      if self.Right_X_zmp is None:
        self.Right_X_zmp = 0.
      if self.Right_Y_zmp is None:
        self.Right_Y_zmp = 0.
      if self.Total_X_zmp is None:
        self.Total_X_zmp = 0.
      if self.Total_Y_zmp is None:
        self.Total_Y_zmp = 0.
      if self.Left_Foot is None:
        self.Left_Foot = False
      if self.Right_Foot is None:
        self.Right_Foot = False
      if self.Both_Feet is None:
        self.Both_Feet = False
    else:
      self.Left_X_zmp = 0.
      self.Left_Y_zmp = 0.
      self.Right_X_zmp = 0.
      self.Right_Y_zmp = 0.
      self.Total_X_zmp = 0.
      self.Total_Y_zmp = 0.
      self.Left_Foot = False
      self.Right_Foot = False
      self.Both_Feet = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d3B().pack(_x.Left_X_zmp, _x.Left_Y_zmp, _x.Right_X_zmp, _x.Right_Y_zmp, _x.Total_X_zmp, _x.Total_Y_zmp, _x.Left_Foot, _x.Right_Foot, _x.Both_Feet))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 51
      (_x.Left_X_zmp, _x.Left_Y_zmp, _x.Right_X_zmp, _x.Right_Y_zmp, _x.Total_X_zmp, _x.Total_Y_zmp, _x.Left_Foot, _x.Right_Foot, _x.Both_Feet,) = _get_struct_6d3B().unpack(str[start:end])
      self.Left_Foot = bool(self.Left_Foot)
      self.Right_Foot = bool(self.Right_Foot)
      self.Both_Feet = bool(self.Both_Feet)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d3B().pack(_x.Left_X_zmp, _x.Left_Y_zmp, _x.Right_X_zmp, _x.Right_Y_zmp, _x.Total_X_zmp, _x.Total_Y_zmp, _x.Left_Foot, _x.Right_Foot, _x.Both_Feet))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 51
      (_x.Left_X_zmp, _x.Left_Y_zmp, _x.Right_X_zmp, _x.Right_Y_zmp, _x.Total_X_zmp, _x.Total_Y_zmp, _x.Left_Foot, _x.Right_Foot, _x.Both_Feet,) = _get_struct_6d3B().unpack(str[start:end])
      self.Left_Foot = bool(self.Left_Foot)
      self.Right_Foot = bool(self.Right_Foot)
      self.Both_Feet = bool(self.Both_Feet)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d3B = None
def _get_struct_6d3B():
    global _struct_6d3B
    if _struct_6d3B is None:
        _struct_6d3B = struct.Struct("<6d3B")
    return _struct_6d3B
