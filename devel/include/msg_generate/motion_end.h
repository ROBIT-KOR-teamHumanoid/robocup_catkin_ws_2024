// Generated by gencpp from file msg_generate/motion_end.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_MOTION_END_H
#define MSG_GENERATE_MESSAGE_MOTION_END_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct motion_end_
{
  typedef motion_end_<ContainerAllocator> Type;

  motion_end_()
    : motion_end(0)
    , motion_ing(0)
    , motion_start_ing(0)
    , motion_end_ing(0)
    , motion_num(0)  {
    }
  motion_end_(const ContainerAllocator& _alloc)
    : motion_end(0)
    , motion_ing(0)
    , motion_start_ing(0)
    , motion_end_ing(0)
    , motion_num(0)  {
  (void)_alloc;
    }



   typedef int32_t _motion_end_type;
  _motion_end_type motion_end;

   typedef int32_t _motion_ing_type;
  _motion_ing_type motion_ing;

   typedef int32_t _motion_start_ing_type;
  _motion_start_ing_type motion_start_ing;

   typedef int32_t _motion_end_ing_type;
  _motion_end_ing_type motion_end_ing;

   typedef int32_t _motion_num_type;
  _motion_num_type motion_num;





  typedef boost::shared_ptr< ::msg_generate::motion_end_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::motion_end_<ContainerAllocator> const> ConstPtr;

}; // struct motion_end_

typedef ::msg_generate::motion_end_<std::allocator<void> > motion_end;

typedef boost::shared_ptr< ::msg_generate::motion_end > motion_endPtr;
typedef boost::shared_ptr< ::msg_generate::motion_end const> motion_endConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::motion_end_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::motion_end_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::motion_end_<ContainerAllocator1> & lhs, const ::msg_generate::motion_end_<ContainerAllocator2> & rhs)
{
  return lhs.motion_end == rhs.motion_end &&
    lhs.motion_ing == rhs.motion_ing &&
    lhs.motion_start_ing == rhs.motion_start_ing &&
    lhs.motion_end_ing == rhs.motion_end_ing &&
    lhs.motion_num == rhs.motion_num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::motion_end_<ContainerAllocator1> & lhs, const ::msg_generate::motion_end_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::motion_end_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::motion_end_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::motion_end_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::motion_end_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::motion_end_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::motion_end_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::motion_end_<ContainerAllocator> >
{
  static const char* value()
  {
    return "25f699e9aaf9930abdbe2aaa9b5b0063";
  }

  static const char* value(const ::msg_generate::motion_end_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x25f699e9aaf9930aULL;
  static const uint64_t static_value2 = 0xbdbe2aaa9b5b0063ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::motion_end_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/motion_end";
  }

  static const char* value(const ::msg_generate::motion_end_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::motion_end_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 motion_end\n"
"int32 motion_ing\n"
"int32 motion_start_ing\n"
"int32 motion_end_ing\n"
"\n"
"int32 motion_num\n"
"\n"
;
  }

  static const char* value(const ::msg_generate::motion_end_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::motion_end_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motion_end);
      stream.next(m.motion_ing);
      stream.next(m.motion_start_ing);
      stream.next(m.motion_end_ing);
      stream.next(m.motion_num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motion_end_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::motion_end_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::motion_end_<ContainerAllocator>& v)
  {
    s << indent << "motion_end: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motion_end);
    s << indent << "motion_ing: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motion_ing);
    s << indent << "motion_start_ing: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motion_start_ing);
    s << indent << "motion_end_ing: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motion_end_ing);
    s << indent << "motion_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motion_num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_MOTION_END_H
