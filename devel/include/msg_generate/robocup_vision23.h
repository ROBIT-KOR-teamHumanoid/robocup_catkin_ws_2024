// Generated by gencpp from file msg_generate/robocup_vision23.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_ROBOCUP_VISION23_H
#define MSG_GENERATE_MESSAGE_ROBOCUP_VISION23_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct robocup_vision23_
{
  typedef robocup_vision23_<ContainerAllocator> Type;

  robocup_vision23_()
    : Ball_cam_X(0)
    , Ball_cam_Y(0)
    , Ball_2d_X(0.0)
    , Ball_2d_Y(0.0)
    , Ball_D(0.0)
    , PAN(0.0)
    , TILT(0.0)
    , Ball_speed_X(0.0)
    , Ball_speed_Y(0.0)
    , Robot_2d_X(0.0)
    , Robot_2d_Y(0.0)
    , ROBOT_VEC_X()
    , ROBOT_VEC_Y()
    , Ball_speed_level(0)
    , Scan_mode(0)  {
    }
  robocup_vision23_(const ContainerAllocator& _alloc)
    : Ball_cam_X(0)
    , Ball_cam_Y(0)
    , Ball_2d_X(0.0)
    , Ball_2d_Y(0.0)
    , Ball_D(0.0)
    , PAN(0.0)
    , TILT(0.0)
    , Ball_speed_X(0.0)
    , Ball_speed_Y(0.0)
    , Robot_2d_X(0.0)
    , Robot_2d_Y(0.0)
    , ROBOT_VEC_X(_alloc)
    , ROBOT_VEC_Y(_alloc)
    , Ball_speed_level(0)
    , Scan_mode(0)  {
  (void)_alloc;
    }



   typedef int64_t _Ball_cam_X_type;
  _Ball_cam_X_type Ball_cam_X;

   typedef int64_t _Ball_cam_Y_type;
  _Ball_cam_Y_type Ball_cam_Y;

   typedef double _Ball_2d_X_type;
  _Ball_2d_X_type Ball_2d_X;

   typedef double _Ball_2d_Y_type;
  _Ball_2d_Y_type Ball_2d_Y;

   typedef double _Ball_D_type;
  _Ball_D_type Ball_D;

   typedef double _PAN_type;
  _PAN_type PAN;

   typedef double _TILT_type;
  _TILT_type TILT;

   typedef double _Ball_speed_X_type;
  _Ball_speed_X_type Ball_speed_X;

   typedef double _Ball_speed_Y_type;
  _Ball_speed_Y_type Ball_speed_Y;

   typedef double _Robot_2d_X_type;
  _Robot_2d_X_type Robot_2d_X;

   typedef double _Robot_2d_Y_type;
  _Robot_2d_Y_type Robot_2d_Y;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _ROBOT_VEC_X_type;
  _ROBOT_VEC_X_type ROBOT_VEC_X;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _ROBOT_VEC_Y_type;
  _ROBOT_VEC_Y_type ROBOT_VEC_Y;

   typedef int64_t _Ball_speed_level_type;
  _Ball_speed_level_type Ball_speed_level;

   typedef int64_t _Scan_mode_type;
  _Scan_mode_type Scan_mode;





  typedef boost::shared_ptr< ::msg_generate::robocup_vision23_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::robocup_vision23_<ContainerAllocator> const> ConstPtr;

}; // struct robocup_vision23_

typedef ::msg_generate::robocup_vision23_<std::allocator<void> > robocup_vision23;

typedef boost::shared_ptr< ::msg_generate::robocup_vision23 > robocup_vision23Ptr;
typedef boost::shared_ptr< ::msg_generate::robocup_vision23 const> robocup_vision23ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::robocup_vision23_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::robocup_vision23_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::robocup_vision23_<ContainerAllocator1> & lhs, const ::msg_generate::robocup_vision23_<ContainerAllocator2> & rhs)
{
  return lhs.Ball_cam_X == rhs.Ball_cam_X &&
    lhs.Ball_cam_Y == rhs.Ball_cam_Y &&
    lhs.Ball_2d_X == rhs.Ball_2d_X &&
    lhs.Ball_2d_Y == rhs.Ball_2d_Y &&
    lhs.Ball_D == rhs.Ball_D &&
    lhs.PAN == rhs.PAN &&
    lhs.TILT == rhs.TILT &&
    lhs.Ball_speed_X == rhs.Ball_speed_X &&
    lhs.Ball_speed_Y == rhs.Ball_speed_Y &&
    lhs.Robot_2d_X == rhs.Robot_2d_X &&
    lhs.Robot_2d_Y == rhs.Robot_2d_Y &&
    lhs.ROBOT_VEC_X == rhs.ROBOT_VEC_X &&
    lhs.ROBOT_VEC_Y == rhs.ROBOT_VEC_Y &&
    lhs.Ball_speed_level == rhs.Ball_speed_level &&
    lhs.Scan_mode == rhs.Scan_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::robocup_vision23_<ContainerAllocator1> & lhs, const ::msg_generate::robocup_vision23_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::robocup_vision23_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::robocup_vision23_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::robocup_vision23_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::robocup_vision23_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::robocup_vision23_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::robocup_vision23_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::robocup_vision23_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bbd6c2605c09df8b25874d0d14f93108";
  }

  static const char* value(const ::msg_generate::robocup_vision23_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbbd6c2605c09df8bULL;
  static const uint64_t static_value2 = 0x25874d0d14f93108ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::robocup_vision23_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/robocup_vision23";
  }

  static const char* value(const ::msg_generate::robocup_vision23_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::robocup_vision23_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 Ball_cam_X\n"
"int64 Ball_cam_Y\n"
"float64 Ball_2d_X\n"
"float64 Ball_2d_Y\n"
"float64 Ball_D\n"
"float64 PAN\n"
"float64 TILT\n"
"float64 Ball_speed_X\n"
"float64 Ball_speed_Y\n"
"float64 Robot_2d_X\n"
"float64 Robot_2d_Y\n"
"float64[] ROBOT_VEC_X\n"
"float64[] ROBOT_VEC_Y\n"
"int64 Ball_speed_level\n"
"int64 Scan_mode\n"
"\n"
;
  }

  static const char* value(const ::msg_generate::robocup_vision23_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::robocup_vision23_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Ball_cam_X);
      stream.next(m.Ball_cam_Y);
      stream.next(m.Ball_2d_X);
      stream.next(m.Ball_2d_Y);
      stream.next(m.Ball_D);
      stream.next(m.PAN);
      stream.next(m.TILT);
      stream.next(m.Ball_speed_X);
      stream.next(m.Ball_speed_Y);
      stream.next(m.Robot_2d_X);
      stream.next(m.Robot_2d_Y);
      stream.next(m.ROBOT_VEC_X);
      stream.next(m.ROBOT_VEC_Y);
      stream.next(m.Ball_speed_level);
      stream.next(m.Scan_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robocup_vision23_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::robocup_vision23_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::robocup_vision23_<ContainerAllocator>& v)
  {
    s << indent << "Ball_cam_X: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Ball_cam_X);
    s << indent << "Ball_cam_Y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Ball_cam_Y);
    s << indent << "Ball_2d_X: ";
    Printer<double>::stream(s, indent + "  ", v.Ball_2d_X);
    s << indent << "Ball_2d_Y: ";
    Printer<double>::stream(s, indent + "  ", v.Ball_2d_Y);
    s << indent << "Ball_D: ";
    Printer<double>::stream(s, indent + "  ", v.Ball_D);
    s << indent << "PAN: ";
    Printer<double>::stream(s, indent + "  ", v.PAN);
    s << indent << "TILT: ";
    Printer<double>::stream(s, indent + "  ", v.TILT);
    s << indent << "Ball_speed_X: ";
    Printer<double>::stream(s, indent + "  ", v.Ball_speed_X);
    s << indent << "Ball_speed_Y: ";
    Printer<double>::stream(s, indent + "  ", v.Ball_speed_Y);
    s << indent << "Robot_2d_X: ";
    Printer<double>::stream(s, indent + "  ", v.Robot_2d_X);
    s << indent << "Robot_2d_Y: ";
    Printer<double>::stream(s, indent + "  ", v.Robot_2d_Y);
    s << indent << "ROBOT_VEC_X[]" << std::endl;
    for (size_t i = 0; i < v.ROBOT_VEC_X.size(); ++i)
    {
      s << indent << "  ROBOT_VEC_X[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ROBOT_VEC_X[i]);
    }
    s << indent << "ROBOT_VEC_Y[]" << std::endl;
    for (size_t i = 0; i < v.ROBOT_VEC_Y.size(); ++i)
    {
      s << indent << "  ROBOT_VEC_Y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ROBOT_VEC_Y[i]);
    }
    s << indent << "Ball_speed_level: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Ball_speed_level);
    s << indent << "Scan_mode: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Scan_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_ROBOCUP_VISION23_H
