// Generated by gencpp from file msg_generate/scv_vision.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_SCV_VISION_H
#define MSG_GENERATE_MESSAGE_SCV_VISION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct scv_vision_
{
  typedef scv_vision_<ContainerAllocator> Type;

  scv_vision_()
    : ballX(0)
    , ballY(0)
    , ballDist(0)
    , ballTheta(0.0)
    , cylinderX(0)
    , cylinderY(0)
    , cylinderDist(0)
    , cylinderTheta(0.0)
    , directX(0)
    , directY(0)
    , directDist(0)
    , directTheta(0.0)
    , first_start(0)
    , circlex(0)
    , circley(0)  {
    }
  scv_vision_(const ContainerAllocator& _alloc)
    : ballX(0)
    , ballY(0)
    , ballDist(0)
    , ballTheta(0.0)
    , cylinderX(0)
    , cylinderY(0)
    , cylinderDist(0)
    , cylinderTheta(0.0)
    , directX(0)
    , directY(0)
    , directDist(0)
    , directTheta(0.0)
    , first_start(0)
    , circlex(0)
    , circley(0)  {
  (void)_alloc;
    }



   typedef int64_t _ballX_type;
  _ballX_type ballX;

   typedef int64_t _ballY_type;
  _ballY_type ballY;

   typedef int64_t _ballDist_type;
  _ballDist_type ballDist;

   typedef double _ballTheta_type;
  _ballTheta_type ballTheta;

   typedef int64_t _cylinderX_type;
  _cylinderX_type cylinderX;

   typedef int64_t _cylinderY_type;
  _cylinderY_type cylinderY;

   typedef int64_t _cylinderDist_type;
  _cylinderDist_type cylinderDist;

   typedef double _cylinderTheta_type;
  _cylinderTheta_type cylinderTheta;

   typedef int64_t _directX_type;
  _directX_type directX;

   typedef int64_t _directY_type;
  _directY_type directY;

   typedef int64_t _directDist_type;
  _directDist_type directDist;

   typedef double _directTheta_type;
  _directTheta_type directTheta;

   typedef int64_t _first_start_type;
  _first_start_type first_start;

   typedef int64_t _circlex_type;
  _circlex_type circlex;

   typedef int64_t _circley_type;
  _circley_type circley;





  typedef boost::shared_ptr< ::msg_generate::scv_vision_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::scv_vision_<ContainerAllocator> const> ConstPtr;

}; // struct scv_vision_

typedef ::msg_generate::scv_vision_<std::allocator<void> > scv_vision;

typedef boost::shared_ptr< ::msg_generate::scv_vision > scv_visionPtr;
typedef boost::shared_ptr< ::msg_generate::scv_vision const> scv_visionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::scv_vision_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::scv_vision_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::scv_vision_<ContainerAllocator1> & lhs, const ::msg_generate::scv_vision_<ContainerAllocator2> & rhs)
{
  return lhs.ballX == rhs.ballX &&
    lhs.ballY == rhs.ballY &&
    lhs.ballDist == rhs.ballDist &&
    lhs.ballTheta == rhs.ballTheta &&
    lhs.cylinderX == rhs.cylinderX &&
    lhs.cylinderY == rhs.cylinderY &&
    lhs.cylinderDist == rhs.cylinderDist &&
    lhs.cylinderTheta == rhs.cylinderTheta &&
    lhs.directX == rhs.directX &&
    lhs.directY == rhs.directY &&
    lhs.directDist == rhs.directDist &&
    lhs.directTheta == rhs.directTheta &&
    lhs.first_start == rhs.first_start &&
    lhs.circlex == rhs.circlex &&
    lhs.circley == rhs.circley;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::scv_vision_<ContainerAllocator1> & lhs, const ::msg_generate::scv_vision_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::scv_vision_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::scv_vision_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::scv_vision_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::scv_vision_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::scv_vision_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::scv_vision_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::scv_vision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "65c896941af724ac4f09562adde2b414";
  }

  static const char* value(const ::msg_generate::scv_vision_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x65c896941af724acULL;
  static const uint64_t static_value2 = 0x4f09562adde2b414ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::scv_vision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/scv_vision";
  }

  static const char* value(const ::msg_generate::scv_vision_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::scv_vision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 ballX\n"
"int64 ballY\n"
"int64 ballDist\n"
"float64 ballTheta\n"
"int64 cylinderX\n"
"int64 cylinderY\n"
"int64 cylinderDist\n"
"float64 cylinderTheta\n"
"int64 directX\n"
"int64 directY\n"
"int64 directDist\n"
"float64 directTheta\n"
"int64 first_start\n"
"int64 circlex\n"
"int64 circley\n"
;
  }

  static const char* value(const ::msg_generate::scv_vision_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::scv_vision_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ballX);
      stream.next(m.ballY);
      stream.next(m.ballDist);
      stream.next(m.ballTheta);
      stream.next(m.cylinderX);
      stream.next(m.cylinderY);
      stream.next(m.cylinderDist);
      stream.next(m.cylinderTheta);
      stream.next(m.directX);
      stream.next(m.directY);
      stream.next(m.directDist);
      stream.next(m.directTheta);
      stream.next(m.first_start);
      stream.next(m.circlex);
      stream.next(m.circley);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct scv_vision_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::scv_vision_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::scv_vision_<ContainerAllocator>& v)
  {
    s << indent << "ballX: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ballX);
    s << indent << "ballY: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ballY);
    s << indent << "ballDist: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ballDist);
    s << indent << "ballTheta: ";
    Printer<double>::stream(s, indent + "  ", v.ballTheta);
    s << indent << "cylinderX: ";
    Printer<int64_t>::stream(s, indent + "  ", v.cylinderX);
    s << indent << "cylinderY: ";
    Printer<int64_t>::stream(s, indent + "  ", v.cylinderY);
    s << indent << "cylinderDist: ";
    Printer<int64_t>::stream(s, indent + "  ", v.cylinderDist);
    s << indent << "cylinderTheta: ";
    Printer<double>::stream(s, indent + "  ", v.cylinderTheta);
    s << indent << "directX: ";
    Printer<int64_t>::stream(s, indent + "  ", v.directX);
    s << indent << "directY: ";
    Printer<int64_t>::stream(s, indent + "  ", v.directY);
    s << indent << "directDist: ";
    Printer<int64_t>::stream(s, indent + "  ", v.directDist);
    s << indent << "directTheta: ";
    Printer<double>::stream(s, indent + "  ", v.directTheta);
    s << indent << "first_start: ";
    Printer<int64_t>::stream(s, indent + "  ", v.first_start);
    s << indent << "circlex: ";
    Printer<int64_t>::stream(s, indent + "  ", v.circlex);
    s << indent << "circley: ";
    Printer<int64_t>::stream(s, indent + "  ", v.circley);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_SCV_VISION_H
