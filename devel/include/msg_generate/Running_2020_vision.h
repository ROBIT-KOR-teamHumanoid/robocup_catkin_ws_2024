// Generated by gencpp from file msg_generate/Running_2020_vision.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_RUNNING_2020_VISION_H
#define MSG_GENERATE_MESSAGE_RUNNING_2020_VISION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct Running_2020_vision_
{
  typedef Running_2020_vision_<ContainerAllocator> Type;

  Running_2020_vision_()
    : Way(0)
    , start_x(0)
    , start_y(0)
    , goal_x(0)
    , goal_y(0)
    , direction(0)
    , recog_goal_x(false)  {
    }
  Running_2020_vision_(const ContainerAllocator& _alloc)
    : Way(0)
    , start_x(0)
    , start_y(0)
    , goal_x(0)
    , goal_y(0)
    , direction(0)
    , recog_goal_x(false)  {
  (void)_alloc;
    }



   typedef int64_t _Way_type;
  _Way_type Way;

   typedef int64_t _start_x_type;
  _start_x_type start_x;

   typedef int64_t _start_y_type;
  _start_y_type start_y;

   typedef int64_t _goal_x_type;
  _goal_x_type goal_x;

   typedef int64_t _goal_y_type;
  _goal_y_type goal_y;

   typedef int64_t _direction_type;
  _direction_type direction;

   typedef uint8_t _recog_goal_x_type;
  _recog_goal_x_type recog_goal_x;





  typedef boost::shared_ptr< ::msg_generate::Running_2020_vision_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::Running_2020_vision_<ContainerAllocator> const> ConstPtr;

}; // struct Running_2020_vision_

typedef ::msg_generate::Running_2020_vision_<std::allocator<void> > Running_2020_vision;

typedef boost::shared_ptr< ::msg_generate::Running_2020_vision > Running_2020_visionPtr;
typedef boost::shared_ptr< ::msg_generate::Running_2020_vision const> Running_2020_visionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::Running_2020_vision_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::Running_2020_vision_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::Running_2020_vision_<ContainerAllocator1> & lhs, const ::msg_generate::Running_2020_vision_<ContainerAllocator2> & rhs)
{
  return lhs.Way == rhs.Way &&
    lhs.start_x == rhs.start_x &&
    lhs.start_y == rhs.start_y &&
    lhs.goal_x == rhs.goal_x &&
    lhs.goal_y == rhs.goal_y &&
    lhs.direction == rhs.direction &&
    lhs.recog_goal_x == rhs.recog_goal_x;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::Running_2020_vision_<ContainerAllocator1> & lhs, const ::msg_generate::Running_2020_vision_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::Running_2020_vision_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::Running_2020_vision_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::Running_2020_vision_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::Running_2020_vision_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::Running_2020_vision_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::Running_2020_vision_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::Running_2020_vision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4006f37f440c035b6febc61d2cd4ff1a";
  }

  static const char* value(const ::msg_generate::Running_2020_vision_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4006f37f440c035bULL;
  static const uint64_t static_value2 = 0x6febc61d2cd4ff1aULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::Running_2020_vision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/Running_2020_vision";
  }

  static const char* value(const ::msg_generate::Running_2020_vision_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::Running_2020_vision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 Way\n"
"int64 start_x\n"
"int64 start_y\n"
"int64 goal_x\n"
"int64 goal_y\n"
"int64 direction\n"
"bool recog_goal_x\n"
;
  }

  static const char* value(const ::msg_generate::Running_2020_vision_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::Running_2020_vision_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Way);
      stream.next(m.start_x);
      stream.next(m.start_y);
      stream.next(m.goal_x);
      stream.next(m.goal_y);
      stream.next(m.direction);
      stream.next(m.recog_goal_x);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Running_2020_vision_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::Running_2020_vision_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::Running_2020_vision_<ContainerAllocator>& v)
  {
    s << indent << "Way: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Way);
    s << indent << "start_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.start_x);
    s << indent << "start_y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.start_y);
    s << indent << "goal_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.goal_x);
    s << indent << "goal_y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.goal_y);
    s << indent << "direction: ";
    Printer<int64_t>::stream(s, indent + "  ", v.direction);
    s << indent << "recog_goal_x: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recog_goal_x);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_RUNNING_2020_VISION_H
