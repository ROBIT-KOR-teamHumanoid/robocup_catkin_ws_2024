// Generated by gencpp from file msg_generate/serial_msg.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_SERIAL_MSG_H
#define MSG_GENERATE_MESSAGE_SERIAL_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct serial_msg_
{
  typedef serial_msg_<ContainerAllocator> Type;

  serial_msg_()
    : length(0)
    , mode(0)
    , id()
    , speed()
    , position()
    , type()
    , acceleration()
    , Motion_Mode(0)
    , Motion_Num(0)  {
    }
  serial_msg_(const ContainerAllocator& _alloc)
    : length(0)
    , mode(0)
    , id(_alloc)
    , speed(_alloc)
    , position(_alloc)
    , type(_alloc)
    , acceleration(_alloc)
    , Motion_Mode(0)
    , Motion_Num(0)  {
  (void)_alloc;
    }



   typedef int32_t _length_type;
  _length_type length;

   typedef int32_t _mode_type;
  _mode_type mode;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _id_type;
  _id_type id;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _speed_type;
  _speed_type speed;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _position_type;
  _position_type position;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _type_type;
  _type_type type;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _acceleration_type;
  _acceleration_type acceleration;

   typedef int32_t _Motion_Mode_type;
  _Motion_Mode_type Motion_Mode;

   typedef uint8_t _Motion_Num_type;
  _Motion_Num_type Motion_Num;





  typedef boost::shared_ptr< ::msg_generate::serial_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::serial_msg_<ContainerAllocator> const> ConstPtr;

}; // struct serial_msg_

typedef ::msg_generate::serial_msg_<std::allocator<void> > serial_msg;

typedef boost::shared_ptr< ::msg_generate::serial_msg > serial_msgPtr;
typedef boost::shared_ptr< ::msg_generate::serial_msg const> serial_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::serial_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::serial_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::serial_msg_<ContainerAllocator1> & lhs, const ::msg_generate::serial_msg_<ContainerAllocator2> & rhs)
{
  return lhs.length == rhs.length &&
    lhs.mode == rhs.mode &&
    lhs.id == rhs.id &&
    lhs.speed == rhs.speed &&
    lhs.position == rhs.position &&
    lhs.type == rhs.type &&
    lhs.acceleration == rhs.acceleration &&
    lhs.Motion_Mode == rhs.Motion_Mode &&
    lhs.Motion_Num == rhs.Motion_Num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::serial_msg_<ContainerAllocator1> & lhs, const ::msg_generate::serial_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::serial_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::serial_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::serial_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::serial_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::serial_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::serial_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::serial_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fbc3cf6a4f8860d2007547b0553a4524";
  }

  static const char* value(const ::msg_generate::serial_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfbc3cf6a4f8860d2ULL;
  static const uint64_t static_value2 = 0x007547b0553a4524ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::serial_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/serial_msg";
  }

  static const char* value(const ::msg_generate::serial_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::serial_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 length\n"
"int32 mode\n"
"int32[] id\n"
"int32[] speed\n"
"int32[] position\n"
"int32[] type\n"
"int32[] acceleration\n"
"\n"
"int32 Motion_Mode\n"
"char Motion_Num\n"
;
  }

  static const char* value(const ::msg_generate::serial_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::serial_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.length);
      stream.next(m.mode);
      stream.next(m.id);
      stream.next(m.speed);
      stream.next(m.position);
      stream.next(m.type);
      stream.next(m.acceleration);
      stream.next(m.Motion_Mode);
      stream.next(m.Motion_Num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct serial_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::serial_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::serial_msg_<ContainerAllocator>& v)
  {
    s << indent << "length: ";
    Printer<int32_t>::stream(s, indent + "  ", v.length);
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "speed[]" << std::endl;
    for (size_t i = 0; i < v.speed.size(); ++i)
    {
      s << indent << "  speed[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.speed[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "type[]" << std::endl;
    for (size_t i = 0; i < v.type.size(); ++i)
    {
      s << indent << "  type[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.type[i]);
    }
    s << indent << "acceleration[]" << std::endl;
    for (size_t i = 0; i < v.acceleration.size(); ++i)
    {
      s << indent << "  acceleration[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.acceleration[i]);
    }
    s << indent << "Motion_Mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Motion_Mode);
    s << indent << "Motion_Num: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Motion_Num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_SERIAL_MSG_H
