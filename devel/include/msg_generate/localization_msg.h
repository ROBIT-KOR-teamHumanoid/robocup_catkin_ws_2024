// Generated by gencpp from file msg_generate/localization_msg.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_LOCALIZATION_MSG_H
#define MSG_GENERATE_MESSAGE_LOCALIZATION_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct localization_msg_
{
  typedef localization_msg_<ContainerAllocator> Type;

  localization_msg_()
    : ballDist(0)
    , ballTheta(0)
    , xcrossDist()
    , xcrossTheta()
    , goalpostDist()
    , goalpostTheta()
    , pointDist()
    , pointTheta()
    , penaltyCircleDist()
    , penaltyCircleTheta()
    , oneline(0)  {
    }
  localization_msg_(const ContainerAllocator& _alloc)
    : ballDist(0)
    , ballTheta(0)
    , xcrossDist(_alloc)
    , xcrossTheta(_alloc)
    , goalpostDist(_alloc)
    , goalpostTheta(_alloc)
    , pointDist(_alloc)
    , pointTheta(_alloc)
    , penaltyCircleDist(_alloc)
    , penaltyCircleTheta(_alloc)
    , oneline(0)  {
  (void)_alloc;
    }



   typedef int64_t _ballDist_type;
  _ballDist_type ballDist;

   typedef int64_t _ballTheta_type;
  _ballTheta_type ballTheta;

   typedef std::vector<int64_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int64_t>> _xcrossDist_type;
  _xcrossDist_type xcrossDist;

   typedef std::vector<int64_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int64_t>> _xcrossTheta_type;
  _xcrossTheta_type xcrossTheta;

   typedef std::vector<int64_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int64_t>> _goalpostDist_type;
  _goalpostDist_type goalpostDist;

   typedef std::vector<int64_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int64_t>> _goalpostTheta_type;
  _goalpostTheta_type goalpostTheta;

   typedef std::vector<int64_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int64_t>> _pointDist_type;
  _pointDist_type pointDist;

   typedef std::vector<int64_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int64_t>> _pointTheta_type;
  _pointTheta_type pointTheta;

   typedef std::vector<int64_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int64_t>> _penaltyCircleDist_type;
  _penaltyCircleDist_type penaltyCircleDist;

   typedef std::vector<int64_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int64_t>> _penaltyCircleTheta_type;
  _penaltyCircleTheta_type penaltyCircleTheta;

   typedef int64_t _oneline_type;
  _oneline_type oneline;





  typedef boost::shared_ptr< ::msg_generate::localization_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::localization_msg_<ContainerAllocator> const> ConstPtr;

}; // struct localization_msg_

typedef ::msg_generate::localization_msg_<std::allocator<void> > localization_msg;

typedef boost::shared_ptr< ::msg_generate::localization_msg > localization_msgPtr;
typedef boost::shared_ptr< ::msg_generate::localization_msg const> localization_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::localization_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::localization_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::localization_msg_<ContainerAllocator1> & lhs, const ::msg_generate::localization_msg_<ContainerAllocator2> & rhs)
{
  return lhs.ballDist == rhs.ballDist &&
    lhs.ballTheta == rhs.ballTheta &&
    lhs.xcrossDist == rhs.xcrossDist &&
    lhs.xcrossTheta == rhs.xcrossTheta &&
    lhs.goalpostDist == rhs.goalpostDist &&
    lhs.goalpostTheta == rhs.goalpostTheta &&
    lhs.pointDist == rhs.pointDist &&
    lhs.pointTheta == rhs.pointTheta &&
    lhs.penaltyCircleDist == rhs.penaltyCircleDist &&
    lhs.penaltyCircleTheta == rhs.penaltyCircleTheta &&
    lhs.oneline == rhs.oneline;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::localization_msg_<ContainerAllocator1> & lhs, const ::msg_generate::localization_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::localization_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::localization_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::localization_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::localization_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::localization_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::localization_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::localization_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1199688341e3ebe99dc4295b1eed20cc";
  }

  static const char* value(const ::msg_generate::localization_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1199688341e3ebe9ULL;
  static const uint64_t static_value2 = 0x9dc4295b1eed20ccULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::localization_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/localization_msg";
  }

  static const char* value(const ::msg_generate::localization_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::localization_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 ballDist\n"
"int64 ballTheta\n"
"\n"
"int64[] xcrossDist\n"
"int64[] xcrossTheta\n"
"\n"
"int64[] goalpostDist\n"
"int64[] goalpostTheta\n"
"\n"
"int64[] pointDist\n"
"int64[] pointTheta\n"
"\n"
"int64[] penaltyCircleDist\n"
"int64[] penaltyCircleTheta\n"
"\n"
"int64 oneline\n"
;
  }

  static const char* value(const ::msg_generate::localization_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::localization_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ballDist);
      stream.next(m.ballTheta);
      stream.next(m.xcrossDist);
      stream.next(m.xcrossTheta);
      stream.next(m.goalpostDist);
      stream.next(m.goalpostTheta);
      stream.next(m.pointDist);
      stream.next(m.pointTheta);
      stream.next(m.penaltyCircleDist);
      stream.next(m.penaltyCircleTheta);
      stream.next(m.oneline);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct localization_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::localization_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::localization_msg_<ContainerAllocator>& v)
  {
    s << indent << "ballDist: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ballDist);
    s << indent << "ballTheta: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ballTheta);
    s << indent << "xcrossDist[]" << std::endl;
    for (size_t i = 0; i < v.xcrossDist.size(); ++i)
    {
      s << indent << "  xcrossDist[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.xcrossDist[i]);
    }
    s << indent << "xcrossTheta[]" << std::endl;
    for (size_t i = 0; i < v.xcrossTheta.size(); ++i)
    {
      s << indent << "  xcrossTheta[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.xcrossTheta[i]);
    }
    s << indent << "goalpostDist[]" << std::endl;
    for (size_t i = 0; i < v.goalpostDist.size(); ++i)
    {
      s << indent << "  goalpostDist[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.goalpostDist[i]);
    }
    s << indent << "goalpostTheta[]" << std::endl;
    for (size_t i = 0; i < v.goalpostTheta.size(); ++i)
    {
      s << indent << "  goalpostTheta[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.goalpostTheta[i]);
    }
    s << indent << "pointDist[]" << std::endl;
    for (size_t i = 0; i < v.pointDist.size(); ++i)
    {
      s << indent << "  pointDist[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.pointDist[i]);
    }
    s << indent << "pointTheta[]" << std::endl;
    for (size_t i = 0; i < v.pointTheta.size(); ++i)
    {
      s << indent << "  pointTheta[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.pointTheta[i]);
    }
    s << indent << "penaltyCircleDist[]" << std::endl;
    for (size_t i = 0; i < v.penaltyCircleDist.size(); ++i)
    {
      s << indent << "  penaltyCircleDist[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.penaltyCircleDist[i]);
    }
    s << indent << "penaltyCircleTheta[]" << std::endl;
    for (size_t i = 0; i < v.penaltyCircleTheta.size(); ++i)
    {
      s << indent << "  penaltyCircleTheta[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.penaltyCircleTheta[i]);
    }
    s << indent << "oneline: ";
    Printer<int64_t>::stream(s, indent + "  ", v.oneline);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_LOCALIZATION_MSG_H
