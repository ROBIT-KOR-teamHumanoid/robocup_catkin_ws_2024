// Generated by gencpp from file msg_generate/robocup_vision23_feature.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_ROBOCUP_VISION23_FEATURE_H
#define MSG_GENERATE_MESSAGE_ROBOCUP_VISION23_FEATURE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct robocup_vision23_feature_
{
  typedef robocup_vision23_feature_<ContainerAllocator> Type;

  robocup_vision23_feature_()
    : CONFIDENCE()
    , DISTANCE()
    , POINT_VEC_X()
    , POINT_VEC_Y()  {
    }
  robocup_vision23_feature_(const ContainerAllocator& _alloc)
    : CONFIDENCE(_alloc)
    , DISTANCE(_alloc)
    , POINT_VEC_X(_alloc)
    , POINT_VEC_Y(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _CONFIDENCE_type;
  _CONFIDENCE_type CONFIDENCE;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _DISTANCE_type;
  _DISTANCE_type DISTANCE;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _POINT_VEC_X_type;
  _POINT_VEC_X_type POINT_VEC_X;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _POINT_VEC_Y_type;
  _POINT_VEC_Y_type POINT_VEC_Y;





  typedef boost::shared_ptr< ::msg_generate::robocup_vision23_feature_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::robocup_vision23_feature_<ContainerAllocator> const> ConstPtr;

}; // struct robocup_vision23_feature_

typedef ::msg_generate::robocup_vision23_feature_<std::allocator<void> > robocup_vision23_feature;

typedef boost::shared_ptr< ::msg_generate::robocup_vision23_feature > robocup_vision23_featurePtr;
typedef boost::shared_ptr< ::msg_generate::robocup_vision23_feature const> robocup_vision23_featureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::robocup_vision23_feature_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::robocup_vision23_feature_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::robocup_vision23_feature_<ContainerAllocator1> & lhs, const ::msg_generate::robocup_vision23_feature_<ContainerAllocator2> & rhs)
{
  return lhs.CONFIDENCE == rhs.CONFIDENCE &&
    lhs.DISTANCE == rhs.DISTANCE &&
    lhs.POINT_VEC_X == rhs.POINT_VEC_X &&
    lhs.POINT_VEC_Y == rhs.POINT_VEC_Y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::robocup_vision23_feature_<ContainerAllocator1> & lhs, const ::msg_generate::robocup_vision23_feature_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::robocup_vision23_feature_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::robocup_vision23_feature_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::robocup_vision23_feature_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::robocup_vision23_feature_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::robocup_vision23_feature_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::robocup_vision23_feature_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::robocup_vision23_feature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e0f9b658b1ed4dec4d2b127040ac40e";
  }

  static const char* value(const ::msg_generate::robocup_vision23_feature_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e0f9b658b1ed4deULL;
  static const uint64_t static_value2 = 0xc4d2b127040ac40eULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::robocup_vision23_feature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/robocup_vision23_feature";
  }

  static const char* value(const ::msg_generate::robocup_vision23_feature_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::robocup_vision23_feature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] CONFIDENCE\n"
"float64[] DISTANCE\n"
"float64[] POINT_VEC_X\n"
"float64[] POINT_VEC_Y\n"
;
  }

  static const char* value(const ::msg_generate::robocup_vision23_feature_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::robocup_vision23_feature_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.CONFIDENCE);
      stream.next(m.DISTANCE);
      stream.next(m.POINT_VEC_X);
      stream.next(m.POINT_VEC_Y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robocup_vision23_feature_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::robocup_vision23_feature_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::robocup_vision23_feature_<ContainerAllocator>& v)
  {
    s << indent << "CONFIDENCE[]" << std::endl;
    for (size_t i = 0; i < v.CONFIDENCE.size(); ++i)
    {
      s << indent << "  CONFIDENCE[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.CONFIDENCE[i]);
    }
    s << indent << "DISTANCE[]" << std::endl;
    for (size_t i = 0; i < v.DISTANCE.size(); ++i)
    {
      s << indent << "  DISTANCE[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.DISTANCE[i]);
    }
    s << indent << "POINT_VEC_X[]" << std::endl;
    for (size_t i = 0; i < v.POINT_VEC_X.size(); ++i)
    {
      s << indent << "  POINT_VEC_X[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.POINT_VEC_X[i]);
    }
    s << indent << "POINT_VEC_Y[]" << std::endl;
    for (size_t i = 0; i < v.POINT_VEC_Y.size(); ++i)
    {
      s << indent << "  POINT_VEC_Y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.POINT_VEC_Y[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_ROBOCUP_VISION23_FEATURE_H
