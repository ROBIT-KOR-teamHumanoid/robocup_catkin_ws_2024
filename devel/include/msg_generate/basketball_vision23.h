// Generated by gencpp from file msg_generate/basketball_vision23.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_BASKETBALL_VISION23_H
#define MSG_GENERATE_MESSAGE_BASKETBALL_VISION23_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct basketball_vision23_
{
  typedef basketball_vision23_<ContainerAllocator> Type;

  basketball_vision23_()
    : goal_cam_X(0)
    , goal_cam_Y(0)
    , goal_2d_X(0.0)
    , goal_2d_Y(0.0)
    , goal_local_X(0.0)
    , goal_local_Y(0.0)
    , goal_D(0.0)
    , robot_local_X(0.0)
    , robot_local_Y(0.0)
    , PAN(0.0)
    , TILT(0.0)
    , Scan_mode(0)  {
    }
  basketball_vision23_(const ContainerAllocator& _alloc)
    : goal_cam_X(0)
    , goal_cam_Y(0)
    , goal_2d_X(0.0)
    , goal_2d_Y(0.0)
    , goal_local_X(0.0)
    , goal_local_Y(0.0)
    , goal_D(0.0)
    , robot_local_X(0.0)
    , robot_local_Y(0.0)
    , PAN(0.0)
    , TILT(0.0)
    , Scan_mode(0)  {
  (void)_alloc;
    }



   typedef int64_t _goal_cam_X_type;
  _goal_cam_X_type goal_cam_X;

   typedef int64_t _goal_cam_Y_type;
  _goal_cam_Y_type goal_cam_Y;

   typedef double _goal_2d_X_type;
  _goal_2d_X_type goal_2d_X;

   typedef double _goal_2d_Y_type;
  _goal_2d_Y_type goal_2d_Y;

   typedef double _goal_local_X_type;
  _goal_local_X_type goal_local_X;

   typedef double _goal_local_Y_type;
  _goal_local_Y_type goal_local_Y;

   typedef double _goal_D_type;
  _goal_D_type goal_D;

   typedef double _robot_local_X_type;
  _robot_local_X_type robot_local_X;

   typedef double _robot_local_Y_type;
  _robot_local_Y_type robot_local_Y;

   typedef double _PAN_type;
  _PAN_type PAN;

   typedef double _TILT_type;
  _TILT_type TILT;

   typedef int64_t _Scan_mode_type;
  _Scan_mode_type Scan_mode;





  typedef boost::shared_ptr< ::msg_generate::basketball_vision23_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::basketball_vision23_<ContainerAllocator> const> ConstPtr;

}; // struct basketball_vision23_

typedef ::msg_generate::basketball_vision23_<std::allocator<void> > basketball_vision23;

typedef boost::shared_ptr< ::msg_generate::basketball_vision23 > basketball_vision23Ptr;
typedef boost::shared_ptr< ::msg_generate::basketball_vision23 const> basketball_vision23ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::basketball_vision23_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::basketball_vision23_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::basketball_vision23_<ContainerAllocator1> & lhs, const ::msg_generate::basketball_vision23_<ContainerAllocator2> & rhs)
{
  return lhs.goal_cam_X == rhs.goal_cam_X &&
    lhs.goal_cam_Y == rhs.goal_cam_Y &&
    lhs.goal_2d_X == rhs.goal_2d_X &&
    lhs.goal_2d_Y == rhs.goal_2d_Y &&
    lhs.goal_local_X == rhs.goal_local_X &&
    lhs.goal_local_Y == rhs.goal_local_Y &&
    lhs.goal_D == rhs.goal_D &&
    lhs.robot_local_X == rhs.robot_local_X &&
    lhs.robot_local_Y == rhs.robot_local_Y &&
    lhs.PAN == rhs.PAN &&
    lhs.TILT == rhs.TILT &&
    lhs.Scan_mode == rhs.Scan_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::basketball_vision23_<ContainerAllocator1> & lhs, const ::msg_generate::basketball_vision23_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::basketball_vision23_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::basketball_vision23_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::basketball_vision23_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::basketball_vision23_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::basketball_vision23_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::basketball_vision23_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::basketball_vision23_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e6ef028504654d91012c2d8d50a3e391";
  }

  static const char* value(const ::msg_generate::basketball_vision23_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe6ef028504654d91ULL;
  static const uint64_t static_value2 = 0x012c2d8d50a3e391ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::basketball_vision23_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/basketball_vision23";
  }

  static const char* value(const ::msg_generate::basketball_vision23_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::basketball_vision23_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 goal_cam_X\n"
"int64 goal_cam_Y\n"
"float64 goal_2d_X\n"
"float64 goal_2d_Y\n"
"float64 goal_local_X\n"
"float64 goal_local_Y\n"
"float64 goal_D\n"
"float64 robot_local_X\n"
"float64 robot_local_Y\n"
"float64 PAN\n"
"float64 TILT\n"
"int64 Scan_mode\n"
;
  }

  static const char* value(const ::msg_generate::basketball_vision23_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::basketball_vision23_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_cam_X);
      stream.next(m.goal_cam_Y);
      stream.next(m.goal_2d_X);
      stream.next(m.goal_2d_Y);
      stream.next(m.goal_local_X);
      stream.next(m.goal_local_Y);
      stream.next(m.goal_D);
      stream.next(m.robot_local_X);
      stream.next(m.robot_local_Y);
      stream.next(m.PAN);
      stream.next(m.TILT);
      stream.next(m.Scan_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct basketball_vision23_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::basketball_vision23_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::basketball_vision23_<ContainerAllocator>& v)
  {
    s << indent << "goal_cam_X: ";
    Printer<int64_t>::stream(s, indent + "  ", v.goal_cam_X);
    s << indent << "goal_cam_Y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.goal_cam_Y);
    s << indent << "goal_2d_X: ";
    Printer<double>::stream(s, indent + "  ", v.goal_2d_X);
    s << indent << "goal_2d_Y: ";
    Printer<double>::stream(s, indent + "  ", v.goal_2d_Y);
    s << indent << "goal_local_X: ";
    Printer<double>::stream(s, indent + "  ", v.goal_local_X);
    s << indent << "goal_local_Y: ";
    Printer<double>::stream(s, indent + "  ", v.goal_local_Y);
    s << indent << "goal_D: ";
    Printer<double>::stream(s, indent + "  ", v.goal_D);
    s << indent << "robot_local_X: ";
    Printer<double>::stream(s, indent + "  ", v.robot_local_X);
    s << indent << "robot_local_Y: ";
    Printer<double>::stream(s, indent + "  ", v.robot_local_Y);
    s << indent << "PAN: ";
    Printer<double>::stream(s, indent + "  ", v.PAN);
    s << indent << "TILT: ";
    Printer<double>::stream(s, indent + "  ", v.TILT);
    s << indent << "Scan_mode: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Scan_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_BASKETBALL_VISION23_H
