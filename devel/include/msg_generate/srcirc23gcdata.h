// Generated by gencpp from file msg_generate/srcirc23gcdata.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_SRCIRC23GCDATA_H
#define MSG_GENERATE_MESSAGE_SRCIRC23GCDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct srcirc23gcdata_
{
  typedef srcirc23gcdata_<ContainerAllocator> Type;

  srcirc23gcdata_()
    : playnode(0)
    , state(0)
    , mode(0)  {
    }
  srcirc23gcdata_(const ContainerAllocator& _alloc)
    : playnode(0)
    , state(0)
    , mode(0)  {
  (void)_alloc;
    }



   typedef int64_t _playnode_type;
  _playnode_type playnode;

   typedef int64_t _state_type;
  _state_type state;

   typedef int64_t _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::msg_generate::srcirc23gcdata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::srcirc23gcdata_<ContainerAllocator> const> ConstPtr;

}; // struct srcirc23gcdata_

typedef ::msg_generate::srcirc23gcdata_<std::allocator<void> > srcirc23gcdata;

typedef boost::shared_ptr< ::msg_generate::srcirc23gcdata > srcirc23gcdataPtr;
typedef boost::shared_ptr< ::msg_generate::srcirc23gcdata const> srcirc23gcdataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::srcirc23gcdata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::srcirc23gcdata_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::srcirc23gcdata_<ContainerAllocator1> & lhs, const ::msg_generate::srcirc23gcdata_<ContainerAllocator2> & rhs)
{
  return lhs.playnode == rhs.playnode &&
    lhs.state == rhs.state &&
    lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::srcirc23gcdata_<ContainerAllocator1> & lhs, const ::msg_generate::srcirc23gcdata_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::srcirc23gcdata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::srcirc23gcdata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::srcirc23gcdata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::srcirc23gcdata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::srcirc23gcdata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::srcirc23gcdata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::srcirc23gcdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0086fc665a08f2de855db2ee3ec847f7";
  }

  static const char* value(const ::msg_generate::srcirc23gcdata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0086fc665a08f2deULL;
  static const uint64_t static_value2 = 0x855db2ee3ec847f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::srcirc23gcdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/srcirc23gcdata";
  }

  static const char* value(const ::msg_generate::srcirc23gcdata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::srcirc23gcdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 playnode\n"
"int64 state\n"
"int64 mode\n"
;
  }

  static const char* value(const ::msg_generate::srcirc23gcdata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::srcirc23gcdata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.playnode);
      stream.next(m.state);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct srcirc23gcdata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::srcirc23gcdata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::srcirc23gcdata_<ContainerAllocator>& v)
  {
    s << indent << "playnode: ";
    Printer<int64_t>::stream(s, indent + "  ", v.playnode);
    s << indent << "state: ";
    Printer<int64_t>::stream(s, indent + "  ", v.state);
    s << indent << "mode: ";
    Printer<int64_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_SRCIRC23GCDATA_H
