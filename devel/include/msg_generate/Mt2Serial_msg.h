// Generated by gencpp from file msg_generate/Mt2Serial_msg.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_MT2SERIAL_MSG_H
#define MSG_GENERATE_MESSAGE_MT2SERIAL_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct Mt2Serial_msg_
{
  typedef Mt2Serial_msg_<ContainerAllocator> Type;

  Mt2Serial_msg_()
    : Motion_Mode(0)
    , Motion_Num(0)  {
    }
  Mt2Serial_msg_(const ContainerAllocator& _alloc)
    : Motion_Mode(0)
    , Motion_Num(0)  {
  (void)_alloc;
    }



   typedef int32_t _Motion_Mode_type;
  _Motion_Mode_type Motion_Mode;

   typedef int32_t _Motion_Num_type;
  _Motion_Num_type Motion_Num;





  typedef boost::shared_ptr< ::msg_generate::Mt2Serial_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::Mt2Serial_msg_<ContainerAllocator> const> ConstPtr;

}; // struct Mt2Serial_msg_

typedef ::msg_generate::Mt2Serial_msg_<std::allocator<void> > Mt2Serial_msg;

typedef boost::shared_ptr< ::msg_generate::Mt2Serial_msg > Mt2Serial_msgPtr;
typedef boost::shared_ptr< ::msg_generate::Mt2Serial_msg const> Mt2Serial_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::Mt2Serial_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::Mt2Serial_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::Mt2Serial_msg_<ContainerAllocator1> & lhs, const ::msg_generate::Mt2Serial_msg_<ContainerAllocator2> & rhs)
{
  return lhs.Motion_Mode == rhs.Motion_Mode &&
    lhs.Motion_Num == rhs.Motion_Num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::Mt2Serial_msg_<ContainerAllocator1> & lhs, const ::msg_generate::Mt2Serial_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::Mt2Serial_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::Mt2Serial_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::Mt2Serial_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::Mt2Serial_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::Mt2Serial_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::Mt2Serial_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::Mt2Serial_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e3f9ec431b0fdc81956c12a8b317c691";
  }

  static const char* value(const ::msg_generate::Mt2Serial_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe3f9ec431b0fdc81ULL;
  static const uint64_t static_value2 = 0x956c12a8b317c691ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::Mt2Serial_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/Mt2Serial_msg";
  }

  static const char* value(const ::msg_generate::Mt2Serial_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::Mt2Serial_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 Motion_Mode\n"
"int32 Motion_Num\n"
;
  }

  static const char* value(const ::msg_generate::Mt2Serial_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::Mt2Serial_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Motion_Mode);
      stream.next(m.Motion_Num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Mt2Serial_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::Mt2Serial_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::Mt2Serial_msg_<ContainerAllocator>& v)
  {
    s << indent << "Motion_Mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Motion_Mode);
    s << indent << "Motion_Num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Motion_Num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_MT2SERIAL_MSG_H
