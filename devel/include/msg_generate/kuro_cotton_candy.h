// Generated by gencpp from file msg_generate/kuro_cotton_candy.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_KURO_COTTON_CANDY_H
#define MSG_GENERATE_MESSAGE_KURO_COTTON_CANDY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct kuro_cotton_candy_
{
  typedef kuro_cotton_candy_<ContainerAllocator> Type;

  kuro_cotton_candy_()
    : ready(false)
    , start(false)
    , stop(false)
    , timer(0.0)  {
    }
  kuro_cotton_candy_(const ContainerAllocator& _alloc)
    : ready(false)
    , start(false)
    , stop(false)
    , timer(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _ready_type;
  _ready_type ready;

   typedef uint8_t _start_type;
  _start_type start;

   typedef uint8_t _stop_type;
  _stop_type stop;

   typedef double _timer_type;
  _timer_type timer;





  typedef boost::shared_ptr< ::msg_generate::kuro_cotton_candy_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::kuro_cotton_candy_<ContainerAllocator> const> ConstPtr;

}; // struct kuro_cotton_candy_

typedef ::msg_generate::kuro_cotton_candy_<std::allocator<void> > kuro_cotton_candy;

typedef boost::shared_ptr< ::msg_generate::kuro_cotton_candy > kuro_cotton_candyPtr;
typedef boost::shared_ptr< ::msg_generate::kuro_cotton_candy const> kuro_cotton_candyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::kuro_cotton_candy_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::kuro_cotton_candy_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::kuro_cotton_candy_<ContainerAllocator1> & lhs, const ::msg_generate::kuro_cotton_candy_<ContainerAllocator2> & rhs)
{
  return lhs.ready == rhs.ready &&
    lhs.start == rhs.start &&
    lhs.stop == rhs.stop &&
    lhs.timer == rhs.timer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::kuro_cotton_candy_<ContainerAllocator1> & lhs, const ::msg_generate::kuro_cotton_candy_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::kuro_cotton_candy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::kuro_cotton_candy_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::kuro_cotton_candy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::kuro_cotton_candy_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::kuro_cotton_candy_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::kuro_cotton_candy_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::kuro_cotton_candy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9f3ac83b00612092e5b577721e3b2ac";
  }

  static const char* value(const ::msg_generate::kuro_cotton_candy_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9f3ac83b0061209ULL;
  static const uint64_t static_value2 = 0x2e5b577721e3b2acULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::kuro_cotton_candy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/kuro_cotton_candy";
  }

  static const char* value(const ::msg_generate::kuro_cotton_candy_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::kuro_cotton_candy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool ready\n"
"bool start\n"
"bool stop\n"
"float64 timer \n"
;
  }

  static const char* value(const ::msg_generate::kuro_cotton_candy_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::kuro_cotton_candy_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ready);
      stream.next(m.start);
      stream.next(m.stop);
      stream.next(m.timer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kuro_cotton_candy_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::kuro_cotton_candy_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::kuro_cotton_candy_<ContainerAllocator>& v)
  {
    s << indent << "ready: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ready);
    s << indent << "start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start);
    s << indent << "stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop);
    s << indent << "timer: ";
    Printer<double>::stream(s, indent + "  ", v.timer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_KURO_COTTON_CANDY_H
