// Generated by gencpp from file msg_generate/master_2_robocup_vision24.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_MASTER_2_ROBOCUP_VISION24_H
#define MSG_GENERATE_MESSAGE_MASTER_2_ROBOCUP_VISION24_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct master_2_robocup_vision24_
{
  typedef master_2_robocup_vision24_<ContainerAllocator> Type;

  master_2_robocup_vision24_()
    : Scan_Mode(0)
    , PAN(0.0)
    , TILT(0.0)  {
    }
  master_2_robocup_vision24_(const ContainerAllocator& _alloc)
    : Scan_Mode(0)
    , PAN(0.0)
    , TILT(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _Scan_Mode_type;
  _Scan_Mode_type Scan_Mode;

   typedef double _PAN_type;
  _PAN_type PAN;

   typedef double _TILT_type;
  _TILT_type TILT;





  typedef boost::shared_ptr< ::msg_generate::master_2_robocup_vision24_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::master_2_robocup_vision24_<ContainerAllocator> const> ConstPtr;

}; // struct master_2_robocup_vision24_

typedef ::msg_generate::master_2_robocup_vision24_<std::allocator<void> > master_2_robocup_vision24;

typedef boost::shared_ptr< ::msg_generate::master_2_robocup_vision24 > master_2_robocup_vision24Ptr;
typedef boost::shared_ptr< ::msg_generate::master_2_robocup_vision24 const> master_2_robocup_vision24ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::master_2_robocup_vision24_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::master_2_robocup_vision24_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::master_2_robocup_vision24_<ContainerAllocator1> & lhs, const ::msg_generate::master_2_robocup_vision24_<ContainerAllocator2> & rhs)
{
  return lhs.Scan_Mode == rhs.Scan_Mode &&
    lhs.PAN == rhs.PAN &&
    lhs.TILT == rhs.TILT;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::master_2_robocup_vision24_<ContainerAllocator1> & lhs, const ::msg_generate::master_2_robocup_vision24_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::master_2_robocup_vision24_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::master_2_robocup_vision24_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::master_2_robocup_vision24_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::master_2_robocup_vision24_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::master_2_robocup_vision24_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::master_2_robocup_vision24_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::master_2_robocup_vision24_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b5fe0eb4136cf0ddbbf95ffa2d2e7754";
  }

  static const char* value(const ::msg_generate::master_2_robocup_vision24_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb5fe0eb4136cf0ddULL;
  static const uint64_t static_value2 = 0xbbf95ffa2d2e7754ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::master_2_robocup_vision24_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/master_2_robocup_vision24";
  }

  static const char* value(const ::msg_generate::master_2_robocup_vision24_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::master_2_robocup_vision24_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 Scan_Mode\n"
"float64 PAN\n"
"float64 TILT\n"
;
  }

  static const char* value(const ::msg_generate::master_2_robocup_vision24_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::master_2_robocup_vision24_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Scan_Mode);
      stream.next(m.PAN);
      stream.next(m.TILT);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct master_2_robocup_vision24_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::master_2_robocup_vision24_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::master_2_robocup_vision24_<ContainerAllocator>& v)
  {
    s << indent << "Scan_Mode: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Scan_Mode);
    s << indent << "PAN: ";
    Printer<double>::stream(s, indent + "  ", v.PAN);
    s << indent << "TILT: ";
    Printer<double>::stream(s, indent + "  ", v.TILT);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_MASTER_2_ROBOCUP_VISION24_H
