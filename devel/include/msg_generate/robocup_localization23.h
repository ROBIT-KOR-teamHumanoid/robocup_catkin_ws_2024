// Generated by gencpp from file msg_generate/robocup_localization23.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_ROBOCUP_LOCALIZATION23_H
#define MSG_GENERATE_MESSAGE_ROBOCUP_LOCALIZATION23_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct robocup_localization23_
{
  typedef robocup_localization23_<ContainerAllocator> Type;

  robocup_localization23_()
    : Ball_X(0.0)
    , Ball_Y(0.0)
    , Ball_speed_X(0.0)
    , Ball_speed_Y(0.0)
    , Robot_X(0.0)
    , Robot_Y(0.0)
    , Obstacle_X(0.0)
    , Obstacle_Y(0.0)
    , Obstacle0_X(0.0)
    , Obstacle0_Y(0.0)
    , Obstacle1_X(0.0)
    , Obstacle1_Y(0.0)
    , Obstacle2_X(0.0)
    , Obstacle2_Y(0.0)
    , Obstacle3_X(0.0)
    , Obstacle3_Y(0.0)  {
    }
  robocup_localization23_(const ContainerAllocator& _alloc)
    : Ball_X(0.0)
    , Ball_Y(0.0)
    , Ball_speed_X(0.0)
    , Ball_speed_Y(0.0)
    , Robot_X(0.0)
    , Robot_Y(0.0)
    , Obstacle_X(0.0)
    , Obstacle_Y(0.0)
    , Obstacle0_X(0.0)
    , Obstacle0_Y(0.0)
    , Obstacle1_X(0.0)
    , Obstacle1_Y(0.0)
    , Obstacle2_X(0.0)
    , Obstacle2_Y(0.0)
    , Obstacle3_X(0.0)
    , Obstacle3_Y(0.0)  {
  (void)_alloc;
    }



   typedef double _Ball_X_type;
  _Ball_X_type Ball_X;

   typedef double _Ball_Y_type;
  _Ball_Y_type Ball_Y;

   typedef double _Ball_speed_X_type;
  _Ball_speed_X_type Ball_speed_X;

   typedef double _Ball_speed_Y_type;
  _Ball_speed_Y_type Ball_speed_Y;

   typedef double _Robot_X_type;
  _Robot_X_type Robot_X;

   typedef double _Robot_Y_type;
  _Robot_Y_type Robot_Y;

   typedef double _Obstacle_X_type;
  _Obstacle_X_type Obstacle_X;

   typedef double _Obstacle_Y_type;
  _Obstacle_Y_type Obstacle_Y;

   typedef double _Obstacle0_X_type;
  _Obstacle0_X_type Obstacle0_X;

   typedef double _Obstacle0_Y_type;
  _Obstacle0_Y_type Obstacle0_Y;

   typedef double _Obstacle1_X_type;
  _Obstacle1_X_type Obstacle1_X;

   typedef double _Obstacle1_Y_type;
  _Obstacle1_Y_type Obstacle1_Y;

   typedef double _Obstacle2_X_type;
  _Obstacle2_X_type Obstacle2_X;

   typedef double _Obstacle2_Y_type;
  _Obstacle2_Y_type Obstacle2_Y;

   typedef double _Obstacle3_X_type;
  _Obstacle3_X_type Obstacle3_X;

   typedef double _Obstacle3_Y_type;
  _Obstacle3_Y_type Obstacle3_Y;





  typedef boost::shared_ptr< ::msg_generate::robocup_localization23_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::robocup_localization23_<ContainerAllocator> const> ConstPtr;

}; // struct robocup_localization23_

typedef ::msg_generate::robocup_localization23_<std::allocator<void> > robocup_localization23;

typedef boost::shared_ptr< ::msg_generate::robocup_localization23 > robocup_localization23Ptr;
typedef boost::shared_ptr< ::msg_generate::robocup_localization23 const> robocup_localization23ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::robocup_localization23_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::robocup_localization23_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::robocup_localization23_<ContainerAllocator1> & lhs, const ::msg_generate::robocup_localization23_<ContainerAllocator2> & rhs)
{
  return lhs.Ball_X == rhs.Ball_X &&
    lhs.Ball_Y == rhs.Ball_Y &&
    lhs.Ball_speed_X == rhs.Ball_speed_X &&
    lhs.Ball_speed_Y == rhs.Ball_speed_Y &&
    lhs.Robot_X == rhs.Robot_X &&
    lhs.Robot_Y == rhs.Robot_Y &&
    lhs.Obstacle_X == rhs.Obstacle_X &&
    lhs.Obstacle_Y == rhs.Obstacle_Y &&
    lhs.Obstacle0_X == rhs.Obstacle0_X &&
    lhs.Obstacle0_Y == rhs.Obstacle0_Y &&
    lhs.Obstacle1_X == rhs.Obstacle1_X &&
    lhs.Obstacle1_Y == rhs.Obstacle1_Y &&
    lhs.Obstacle2_X == rhs.Obstacle2_X &&
    lhs.Obstacle2_Y == rhs.Obstacle2_Y &&
    lhs.Obstacle3_X == rhs.Obstacle3_X &&
    lhs.Obstacle3_Y == rhs.Obstacle3_Y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::robocup_localization23_<ContainerAllocator1> & lhs, const ::msg_generate::robocup_localization23_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::robocup_localization23_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::robocup_localization23_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::robocup_localization23_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::robocup_localization23_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::robocup_localization23_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::robocup_localization23_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::robocup_localization23_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ee6effd3d721320075c4ac44f4b0bfe";
  }

  static const char* value(const ::msg_generate::robocup_localization23_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ee6effd3d721320ULL;
  static const uint64_t static_value2 = 0x075c4ac44f4b0bfeULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::robocup_localization23_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/robocup_localization23";
  }

  static const char* value(const ::msg_generate::robocup_localization23_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::robocup_localization23_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 Ball_X\n"
"float64 Ball_Y\n"
"float64 Ball_speed_X\n"
"float64 Ball_speed_Y\n"
"float64 Robot_X\n"
"float64 Robot_Y\n"
"float64 Obstacle_X\n"
"float64 Obstacle_Y\n"
"\n"
"\n"
"\n"
"float64 Obstacle0_X\n"
"float64 Obstacle0_Y\n"
"float64 Obstacle1_X\n"
"float64 Obstacle1_Y\n"
"float64 Obstacle2_X\n"
"float64 Obstacle2_Y\n"
"float64 Obstacle3_X\n"
"float64 Obstacle3_Y\n"
;
  }

  static const char* value(const ::msg_generate::robocup_localization23_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::robocup_localization23_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Ball_X);
      stream.next(m.Ball_Y);
      stream.next(m.Ball_speed_X);
      stream.next(m.Ball_speed_Y);
      stream.next(m.Robot_X);
      stream.next(m.Robot_Y);
      stream.next(m.Obstacle_X);
      stream.next(m.Obstacle_Y);
      stream.next(m.Obstacle0_X);
      stream.next(m.Obstacle0_Y);
      stream.next(m.Obstacle1_X);
      stream.next(m.Obstacle1_Y);
      stream.next(m.Obstacle2_X);
      stream.next(m.Obstacle2_Y);
      stream.next(m.Obstacle3_X);
      stream.next(m.Obstacle3_Y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robocup_localization23_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::robocup_localization23_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::robocup_localization23_<ContainerAllocator>& v)
  {
    s << indent << "Ball_X: ";
    Printer<double>::stream(s, indent + "  ", v.Ball_X);
    s << indent << "Ball_Y: ";
    Printer<double>::stream(s, indent + "  ", v.Ball_Y);
    s << indent << "Ball_speed_X: ";
    Printer<double>::stream(s, indent + "  ", v.Ball_speed_X);
    s << indent << "Ball_speed_Y: ";
    Printer<double>::stream(s, indent + "  ", v.Ball_speed_Y);
    s << indent << "Robot_X: ";
    Printer<double>::stream(s, indent + "  ", v.Robot_X);
    s << indent << "Robot_Y: ";
    Printer<double>::stream(s, indent + "  ", v.Robot_Y);
    s << indent << "Obstacle_X: ";
    Printer<double>::stream(s, indent + "  ", v.Obstacle_X);
    s << indent << "Obstacle_Y: ";
    Printer<double>::stream(s, indent + "  ", v.Obstacle_Y);
    s << indent << "Obstacle0_X: ";
    Printer<double>::stream(s, indent + "  ", v.Obstacle0_X);
    s << indent << "Obstacle0_Y: ";
    Printer<double>::stream(s, indent + "  ", v.Obstacle0_Y);
    s << indent << "Obstacle1_X: ";
    Printer<double>::stream(s, indent + "  ", v.Obstacle1_X);
    s << indent << "Obstacle1_Y: ";
    Printer<double>::stream(s, indent + "  ", v.Obstacle1_Y);
    s << indent << "Obstacle2_X: ";
    Printer<double>::stream(s, indent + "  ", v.Obstacle2_X);
    s << indent << "Obstacle2_Y: ";
    Printer<double>::stream(s, indent + "  ", v.Obstacle2_Y);
    s << indent << "Obstacle3_X: ";
    Printer<double>::stream(s, indent + "  ", v.Obstacle3_X);
    s << indent << "Obstacle3_Y: ";
    Printer<double>::stream(s, indent + "  ", v.Obstacle3_Y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_ROBOCUP_LOCALIZATION23_H
