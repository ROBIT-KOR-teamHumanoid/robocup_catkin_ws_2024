// Generated by gencpp from file msg_generate/tune2walk.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_TUNE2WALK_H
#define MSG_GENERATE_MESSAGE_TUNE2WALK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct tune2walk_
{
  typedef tune2walk_<ContainerAllocator> Type;

  tune2walk_()
    : IK_Flag(false)
    , Entire_Time(0.0)
    , Frequency(0.0)
    , Default_X_Right(0.0)
    , Default_X_Left(0.0)
    , Default_Y_Right(0.0)
    , Default_Y_Left(0.0)
    , Default_Z_Right(0.0)
    , Default_Z_Left(0.0)
    , Offset_10_Motor(0.0)
    , Offset_11_Motor(0.0)
    , Offset_12_Motor(0.0)
    , Offset_13_Motor(0.0)
    , Offset_14_Motor(0.0)
    , Offset_15_Motor(0.0)
    , Offset_16_Motor(0.0)
    , Offset_17_Motor(0.0)
    , Offset_18_Motor(0.0)
    , Offset_19_Motor(0.0)
    , Offset_20_Motor(0.0)
    , Offset_21_Motor(0.0)
    , Swing_Right_Leg(0.0)
    , Swing_Left_Leg(0.0)
    , Swing_Right_Shoulder(0.0)
    , Swing_Left_Shoulder(0.0)
    , Rise_Right_Leg(0.0)
    , Rise_Left_Leg(0.0)
    , Start_Entire_Time(0.0)
    , Start_Swing(0.0)
    , Start_Rise(0.0)
    , End_Entire_Time(0.0)
    , End_Swing(0.0)
    , End_Rise(0.0)
    , Test_X(0.0)
    , Test_Side(0.0)
    , Test_Yaw(0.0)
    , Tuning_X(0.0)
    , Tuning_Side(0.0)
    , Tuning_Yaw(0.0)
    , Balance_Value_0(0.0)
    , Balance_Value_1(0.0)
    , Balance_Value_2(0.0)
    , Balance_Value_3(0.0)
    , Balance_Pitch_GP(0.0)
    , Balance_Pitch_GI(0.0)
    , Balance_Pitch_GD(0.0)
    , Balance_Pitch_ELIMIT(0.0)
    , Balance_Pitch_OLIMIT(0.0)
    , Balance_Pitch_Neg_Target(0.0)
    , Balance_Pitch_Pos_Target(0.0)
    , Balance_Roll_GP(0.0)
    , Balance_Roll_GI(0.0)
    , Balance_Roll_GD(0.0)
    , Balance_Roll_ELIMIT(0.0)
    , Balance_Roll_OLIMIT(0.0)
    , Balance_Roll_Neg_Target(0.0)
    , Balance_Roll_Pos_Target(0.0)
    , Balance_Angle_Pitch_GP(0.0)
    , Balance_Angle_Pitch_GI(0.0)
    , Balance_Angle_Pitch_GD(0.0)
    , Balance_Angle_Pitch_ELIMIT(0.0)
    , Balance_Angle_Pitch_OLIMIT(0.0)
    , Balance_Angle_Pitch_Neg_Target(0.0)
    , Balance_Angle_Pitch_Pos_Target(0.0)
    , Balance_Value_4(0.0)
    , Balance_Value_5(0.0)
    , Balance_Pitch_Flag_imu(0)
    , Balance_Pitch_GP_imu(0.0)
    , Balance_Pitch_GI_imu(0.0)
    , Balance_Pitch_GD_imu(0.0)
    , Balance_Pitch_Neg_Target_imu(0.0)
    , Balance_Pitch_Pos_Target_imu(0.0)
    , Balance_Pitch_ELIMIT_imu(0.0)
    , Balance_Pitch_OLIMIT_imu(0.0)
    , Balance_Roll_Flag_imu(0)
    , Balance_Roll_GP_imu(0.0)
    , Balance_Roll_GI_imu(0.0)
    , Balance_Roll_GD_imu(0.0)
    , Balance_Roll_Neg_Target_imu(0.0)
    , Balance_Roll_Pos_Target_imu(0.0)
    , Balance_Roll_ELIMIT_imu(0.0)
    , Balance_Roll_OLIMIT_imu(0.0)
    , Balance_Pitch_Flag(0)
    , Balance_Ankle_Pitch_Flag(0)
    , Balance_Roll_Flag(0)
    , Ratio_Check_Flag(0)
    , Center2Leg(0.0)
    , Link2Link(0.0)
    , Init_Z_Up(0.0)
    , Percentage_of_IK_10_Motor(0.0)
    , Percentage_of_IK_11_Motor(0.0)
    , Percentage_of_IK_12_Motor(0.0)
    , Percentage_of_IK_13_Motor(0.0)
    , Percentage_of_IK_14_Motor(0.0)
    , Percentage_of_IK_15_Motor(0.0)
    , Percentage_of_IK_16_Motor(0.0)
    , Percentage_of_IK_17_Motor(0.0)
    , Percentage_of_IK_18_Motor(0.0)
    , Percentage_of_IK_19_Motor(0.0)
    , Percentage_of_IK_20_Motor(0.0)
    , Percentage_of_IK_21_Motor(0.0)
    , First_Pos_XR(0.0)
    , First_Neg_XR(0.0)
    , First_Pos_SideR(0.0)
    , First_Neg_SideR(0.0)
    , First_Pos_YawR(0.0)
    , First_Neg_YawR(0.0)
    , First_Pos_XL(0.0)
    , First_Neg_XL(0.0)
    , First_Pos_SideL(0.0)
    , First_Neg_SideL(0.0)
    , First_Pos_YawL(0.0)
    , First_Neg_YawL(0.0)
    , First_Pos_SideR_SwingMinus(0.0)
    , First_Neg_SideR_SwingMinus(0.0)
    , First_Pos_SideL_SwingMinus(0.0)
    , First_Neg_SideL_SwingMinus(0.0)
    , First_min(0)
    , First_max(0)
    , Second_Pos_XR(0.0)
    , Second_Neg_XR(0.0)
    , Second_Pos_SideR(0.0)
    , Second_Neg_SideR(0.0)
    , Second_Pos_YawR(0.0)
    , Second_Neg_YawR(0.0)
    , Second_Pos_XL(0.0)
    , Second_Neg_XL(0.0)
    , Second_Pos_SideL(0.0)
    , Second_Neg_SideL(0.0)
    , Second_Pos_YawL(0.0)
    , Second_Neg_YawL(0.0)
    , Second_Pos_SideR_SwingMinus(0.0)
    , Second_Neg_SideR_SwingMinus(0.0)
    , Second_Pos_SideL_SwingMinus(0.0)
    , Second_Neg_SideL_SwingMinus(0.0)
    , Second_min(0)
    , Second_max(0)
    , Third_Pos_XR(0.0)
    , Third_Neg_XR(0.0)
    , Third_Pos_SideR(0.0)
    , Third_Neg_SideR(0.0)
    , Third_Pos_YawR(0.0)
    , Third_Neg_YawR(0.0)
    , Third_Pos_XL(0.0)
    , Third_Neg_XL(0.0)
    , Third_Pos_SideL(0.0)
    , Third_Neg_SideL(0.0)
    , Third_Pos_YawL(0.0)
    , Third_Neg_YawL(0.0)
    , Third_Pos_SideR_SwingMinus(0.0)
    , Third_Neg_SideR_SwingMinus(0.0)
    , Third_Pos_SideL_SwingMinus(0.0)
    , Third_Neg_SideL_SwingMinus(0.0)
    , Third_min(0)
    , Third_max(0)
    , Fourth_Pos_XR(0.0)
    , Fourth_Neg_XR(0.0)
    , Fourth_Pos_SideR(0.0)
    , Fourth_Neg_SideR(0.0)
    , Fourth_Pos_YawR(0.0)
    , Fourth_Neg_YawR(0.0)
    , Fourth_Pos_XL(0.0)
    , Fourth_Neg_XL(0.0)
    , Fourth_Pos_SideL(0.0)
    , Fourth_Neg_SideL(0.0)
    , Fourth_Pos_YawL(0.0)
    , Fourth_Neg_YawL(0.0)
    , Fourth_Pos_SideR_SwingMinus(0.0)
    , Fourth_Neg_SideR_SwingMinus(0.0)
    , Fourth_Pos_SideL_SwingMinus(0.0)
    , Fourth_Neg_SideL_SwingMinus(0.0)
    , Fourth_min(0)
    , Fourth_max(0)
    , Landing_Time_Control_flag(0)
    , Control_System_flag(0)  {
    }
  tune2walk_(const ContainerAllocator& _alloc)
    : IK_Flag(false)
    , Entire_Time(0.0)
    , Frequency(0.0)
    , Default_X_Right(0.0)
    , Default_X_Left(0.0)
    , Default_Y_Right(0.0)
    , Default_Y_Left(0.0)
    , Default_Z_Right(0.0)
    , Default_Z_Left(0.0)
    , Offset_10_Motor(0.0)
    , Offset_11_Motor(0.0)
    , Offset_12_Motor(0.0)
    , Offset_13_Motor(0.0)
    , Offset_14_Motor(0.0)
    , Offset_15_Motor(0.0)
    , Offset_16_Motor(0.0)
    , Offset_17_Motor(0.0)
    , Offset_18_Motor(0.0)
    , Offset_19_Motor(0.0)
    , Offset_20_Motor(0.0)
    , Offset_21_Motor(0.0)
    , Swing_Right_Leg(0.0)
    , Swing_Left_Leg(0.0)
    , Swing_Right_Shoulder(0.0)
    , Swing_Left_Shoulder(0.0)
    , Rise_Right_Leg(0.0)
    , Rise_Left_Leg(0.0)
    , Start_Entire_Time(0.0)
    , Start_Swing(0.0)
    , Start_Rise(0.0)
    , End_Entire_Time(0.0)
    , End_Swing(0.0)
    , End_Rise(0.0)
    , Test_X(0.0)
    , Test_Side(0.0)
    , Test_Yaw(0.0)
    , Tuning_X(0.0)
    , Tuning_Side(0.0)
    , Tuning_Yaw(0.0)
    , Balance_Value_0(0.0)
    , Balance_Value_1(0.0)
    , Balance_Value_2(0.0)
    , Balance_Value_3(0.0)
    , Balance_Pitch_GP(0.0)
    , Balance_Pitch_GI(0.0)
    , Balance_Pitch_GD(0.0)
    , Balance_Pitch_ELIMIT(0.0)
    , Balance_Pitch_OLIMIT(0.0)
    , Balance_Pitch_Neg_Target(0.0)
    , Balance_Pitch_Pos_Target(0.0)
    , Balance_Roll_GP(0.0)
    , Balance_Roll_GI(0.0)
    , Balance_Roll_GD(0.0)
    , Balance_Roll_ELIMIT(0.0)
    , Balance_Roll_OLIMIT(0.0)
    , Balance_Roll_Neg_Target(0.0)
    , Balance_Roll_Pos_Target(0.0)
    , Balance_Angle_Pitch_GP(0.0)
    , Balance_Angle_Pitch_GI(0.0)
    , Balance_Angle_Pitch_GD(0.0)
    , Balance_Angle_Pitch_ELIMIT(0.0)
    , Balance_Angle_Pitch_OLIMIT(0.0)
    , Balance_Angle_Pitch_Neg_Target(0.0)
    , Balance_Angle_Pitch_Pos_Target(0.0)
    , Balance_Value_4(0.0)
    , Balance_Value_5(0.0)
    , Balance_Pitch_Flag_imu(0)
    , Balance_Pitch_GP_imu(0.0)
    , Balance_Pitch_GI_imu(0.0)
    , Balance_Pitch_GD_imu(0.0)
    , Balance_Pitch_Neg_Target_imu(0.0)
    , Balance_Pitch_Pos_Target_imu(0.0)
    , Balance_Pitch_ELIMIT_imu(0.0)
    , Balance_Pitch_OLIMIT_imu(0.0)
    , Balance_Roll_Flag_imu(0)
    , Balance_Roll_GP_imu(0.0)
    , Balance_Roll_GI_imu(0.0)
    , Balance_Roll_GD_imu(0.0)
    , Balance_Roll_Neg_Target_imu(0.0)
    , Balance_Roll_Pos_Target_imu(0.0)
    , Balance_Roll_ELIMIT_imu(0.0)
    , Balance_Roll_OLIMIT_imu(0.0)
    , Balance_Pitch_Flag(0)
    , Balance_Ankle_Pitch_Flag(0)
    , Balance_Roll_Flag(0)
    , Ratio_Check_Flag(0)
    , Center2Leg(0.0)
    , Link2Link(0.0)
    , Init_Z_Up(0.0)
    , Percentage_of_IK_10_Motor(0.0)
    , Percentage_of_IK_11_Motor(0.0)
    , Percentage_of_IK_12_Motor(0.0)
    , Percentage_of_IK_13_Motor(0.0)
    , Percentage_of_IK_14_Motor(0.0)
    , Percentage_of_IK_15_Motor(0.0)
    , Percentage_of_IK_16_Motor(0.0)
    , Percentage_of_IK_17_Motor(0.0)
    , Percentage_of_IK_18_Motor(0.0)
    , Percentage_of_IK_19_Motor(0.0)
    , Percentage_of_IK_20_Motor(0.0)
    , Percentage_of_IK_21_Motor(0.0)
    , First_Pos_XR(0.0)
    , First_Neg_XR(0.0)
    , First_Pos_SideR(0.0)
    , First_Neg_SideR(0.0)
    , First_Pos_YawR(0.0)
    , First_Neg_YawR(0.0)
    , First_Pos_XL(0.0)
    , First_Neg_XL(0.0)
    , First_Pos_SideL(0.0)
    , First_Neg_SideL(0.0)
    , First_Pos_YawL(0.0)
    , First_Neg_YawL(0.0)
    , First_Pos_SideR_SwingMinus(0.0)
    , First_Neg_SideR_SwingMinus(0.0)
    , First_Pos_SideL_SwingMinus(0.0)
    , First_Neg_SideL_SwingMinus(0.0)
    , First_min(0)
    , First_max(0)
    , Second_Pos_XR(0.0)
    , Second_Neg_XR(0.0)
    , Second_Pos_SideR(0.0)
    , Second_Neg_SideR(0.0)
    , Second_Pos_YawR(0.0)
    , Second_Neg_YawR(0.0)
    , Second_Pos_XL(0.0)
    , Second_Neg_XL(0.0)
    , Second_Pos_SideL(0.0)
    , Second_Neg_SideL(0.0)
    , Second_Pos_YawL(0.0)
    , Second_Neg_YawL(0.0)
    , Second_Pos_SideR_SwingMinus(0.0)
    , Second_Neg_SideR_SwingMinus(0.0)
    , Second_Pos_SideL_SwingMinus(0.0)
    , Second_Neg_SideL_SwingMinus(0.0)
    , Second_min(0)
    , Second_max(0)
    , Third_Pos_XR(0.0)
    , Third_Neg_XR(0.0)
    , Third_Pos_SideR(0.0)
    , Third_Neg_SideR(0.0)
    , Third_Pos_YawR(0.0)
    , Third_Neg_YawR(0.0)
    , Third_Pos_XL(0.0)
    , Third_Neg_XL(0.0)
    , Third_Pos_SideL(0.0)
    , Third_Neg_SideL(0.0)
    , Third_Pos_YawL(0.0)
    , Third_Neg_YawL(0.0)
    , Third_Pos_SideR_SwingMinus(0.0)
    , Third_Neg_SideR_SwingMinus(0.0)
    , Third_Pos_SideL_SwingMinus(0.0)
    , Third_Neg_SideL_SwingMinus(0.0)
    , Third_min(0)
    , Third_max(0)
    , Fourth_Pos_XR(0.0)
    , Fourth_Neg_XR(0.0)
    , Fourth_Pos_SideR(0.0)
    , Fourth_Neg_SideR(0.0)
    , Fourth_Pos_YawR(0.0)
    , Fourth_Neg_YawR(0.0)
    , Fourth_Pos_XL(0.0)
    , Fourth_Neg_XL(0.0)
    , Fourth_Pos_SideL(0.0)
    , Fourth_Neg_SideL(0.0)
    , Fourth_Pos_YawL(0.0)
    , Fourth_Neg_YawL(0.0)
    , Fourth_Pos_SideR_SwingMinus(0.0)
    , Fourth_Neg_SideR_SwingMinus(0.0)
    , Fourth_Pos_SideL_SwingMinus(0.0)
    , Fourth_Neg_SideL_SwingMinus(0.0)
    , Fourth_min(0)
    , Fourth_max(0)
    , Landing_Time_Control_flag(0)
    , Control_System_flag(0)  {
  (void)_alloc;
    }



   typedef uint8_t _IK_Flag_type;
  _IK_Flag_type IK_Flag;

   typedef double _Entire_Time_type;
  _Entire_Time_type Entire_Time;

   typedef double _Frequency_type;
  _Frequency_type Frequency;

   typedef double _Default_X_Right_type;
  _Default_X_Right_type Default_X_Right;

   typedef double _Default_X_Left_type;
  _Default_X_Left_type Default_X_Left;

   typedef double _Default_Y_Right_type;
  _Default_Y_Right_type Default_Y_Right;

   typedef double _Default_Y_Left_type;
  _Default_Y_Left_type Default_Y_Left;

   typedef double _Default_Z_Right_type;
  _Default_Z_Right_type Default_Z_Right;

   typedef double _Default_Z_Left_type;
  _Default_Z_Left_type Default_Z_Left;

   typedef double _Offset_10_Motor_type;
  _Offset_10_Motor_type Offset_10_Motor;

   typedef double _Offset_11_Motor_type;
  _Offset_11_Motor_type Offset_11_Motor;

   typedef double _Offset_12_Motor_type;
  _Offset_12_Motor_type Offset_12_Motor;

   typedef double _Offset_13_Motor_type;
  _Offset_13_Motor_type Offset_13_Motor;

   typedef double _Offset_14_Motor_type;
  _Offset_14_Motor_type Offset_14_Motor;

   typedef double _Offset_15_Motor_type;
  _Offset_15_Motor_type Offset_15_Motor;

   typedef double _Offset_16_Motor_type;
  _Offset_16_Motor_type Offset_16_Motor;

   typedef double _Offset_17_Motor_type;
  _Offset_17_Motor_type Offset_17_Motor;

   typedef double _Offset_18_Motor_type;
  _Offset_18_Motor_type Offset_18_Motor;

   typedef double _Offset_19_Motor_type;
  _Offset_19_Motor_type Offset_19_Motor;

   typedef double _Offset_20_Motor_type;
  _Offset_20_Motor_type Offset_20_Motor;

   typedef double _Offset_21_Motor_type;
  _Offset_21_Motor_type Offset_21_Motor;

   typedef double _Swing_Right_Leg_type;
  _Swing_Right_Leg_type Swing_Right_Leg;

   typedef double _Swing_Left_Leg_type;
  _Swing_Left_Leg_type Swing_Left_Leg;

   typedef double _Swing_Right_Shoulder_type;
  _Swing_Right_Shoulder_type Swing_Right_Shoulder;

   typedef double _Swing_Left_Shoulder_type;
  _Swing_Left_Shoulder_type Swing_Left_Shoulder;

   typedef double _Rise_Right_Leg_type;
  _Rise_Right_Leg_type Rise_Right_Leg;

   typedef double _Rise_Left_Leg_type;
  _Rise_Left_Leg_type Rise_Left_Leg;

   typedef double _Start_Entire_Time_type;
  _Start_Entire_Time_type Start_Entire_Time;

   typedef double _Start_Swing_type;
  _Start_Swing_type Start_Swing;

   typedef double _Start_Rise_type;
  _Start_Rise_type Start_Rise;

   typedef double _End_Entire_Time_type;
  _End_Entire_Time_type End_Entire_Time;

   typedef double _End_Swing_type;
  _End_Swing_type End_Swing;

   typedef double _End_Rise_type;
  _End_Rise_type End_Rise;

   typedef double _Test_X_type;
  _Test_X_type Test_X;

   typedef double _Test_Side_type;
  _Test_Side_type Test_Side;

   typedef double _Test_Yaw_type;
  _Test_Yaw_type Test_Yaw;

   typedef double _Tuning_X_type;
  _Tuning_X_type Tuning_X;

   typedef double _Tuning_Side_type;
  _Tuning_Side_type Tuning_Side;

   typedef double _Tuning_Yaw_type;
  _Tuning_Yaw_type Tuning_Yaw;

   typedef double _Balance_Value_0_type;
  _Balance_Value_0_type Balance_Value_0;

   typedef double _Balance_Value_1_type;
  _Balance_Value_1_type Balance_Value_1;

   typedef double _Balance_Value_2_type;
  _Balance_Value_2_type Balance_Value_2;

   typedef double _Balance_Value_3_type;
  _Balance_Value_3_type Balance_Value_3;

   typedef double _Balance_Pitch_GP_type;
  _Balance_Pitch_GP_type Balance_Pitch_GP;

   typedef double _Balance_Pitch_GI_type;
  _Balance_Pitch_GI_type Balance_Pitch_GI;

   typedef double _Balance_Pitch_GD_type;
  _Balance_Pitch_GD_type Balance_Pitch_GD;

   typedef double _Balance_Pitch_ELIMIT_type;
  _Balance_Pitch_ELIMIT_type Balance_Pitch_ELIMIT;

   typedef double _Balance_Pitch_OLIMIT_type;
  _Balance_Pitch_OLIMIT_type Balance_Pitch_OLIMIT;

   typedef double _Balance_Pitch_Neg_Target_type;
  _Balance_Pitch_Neg_Target_type Balance_Pitch_Neg_Target;

   typedef double _Balance_Pitch_Pos_Target_type;
  _Balance_Pitch_Pos_Target_type Balance_Pitch_Pos_Target;

   typedef double _Balance_Roll_GP_type;
  _Balance_Roll_GP_type Balance_Roll_GP;

   typedef double _Balance_Roll_GI_type;
  _Balance_Roll_GI_type Balance_Roll_GI;

   typedef double _Balance_Roll_GD_type;
  _Balance_Roll_GD_type Balance_Roll_GD;

   typedef double _Balance_Roll_ELIMIT_type;
  _Balance_Roll_ELIMIT_type Balance_Roll_ELIMIT;

   typedef double _Balance_Roll_OLIMIT_type;
  _Balance_Roll_OLIMIT_type Balance_Roll_OLIMIT;

   typedef double _Balance_Roll_Neg_Target_type;
  _Balance_Roll_Neg_Target_type Balance_Roll_Neg_Target;

   typedef double _Balance_Roll_Pos_Target_type;
  _Balance_Roll_Pos_Target_type Balance_Roll_Pos_Target;

   typedef double _Balance_Angle_Pitch_GP_type;
  _Balance_Angle_Pitch_GP_type Balance_Angle_Pitch_GP;

   typedef double _Balance_Angle_Pitch_GI_type;
  _Balance_Angle_Pitch_GI_type Balance_Angle_Pitch_GI;

   typedef double _Balance_Angle_Pitch_GD_type;
  _Balance_Angle_Pitch_GD_type Balance_Angle_Pitch_GD;

   typedef double _Balance_Angle_Pitch_ELIMIT_type;
  _Balance_Angle_Pitch_ELIMIT_type Balance_Angle_Pitch_ELIMIT;

   typedef double _Balance_Angle_Pitch_OLIMIT_type;
  _Balance_Angle_Pitch_OLIMIT_type Balance_Angle_Pitch_OLIMIT;

   typedef double _Balance_Angle_Pitch_Neg_Target_type;
  _Balance_Angle_Pitch_Neg_Target_type Balance_Angle_Pitch_Neg_Target;

   typedef double _Balance_Angle_Pitch_Pos_Target_type;
  _Balance_Angle_Pitch_Pos_Target_type Balance_Angle_Pitch_Pos_Target;

   typedef double _Balance_Value_4_type;
  _Balance_Value_4_type Balance_Value_4;

   typedef double _Balance_Value_5_type;
  _Balance_Value_5_type Balance_Value_5;

   typedef int64_t _Balance_Pitch_Flag_imu_type;
  _Balance_Pitch_Flag_imu_type Balance_Pitch_Flag_imu;

   typedef double _Balance_Pitch_GP_imu_type;
  _Balance_Pitch_GP_imu_type Balance_Pitch_GP_imu;

   typedef double _Balance_Pitch_GI_imu_type;
  _Balance_Pitch_GI_imu_type Balance_Pitch_GI_imu;

   typedef double _Balance_Pitch_GD_imu_type;
  _Balance_Pitch_GD_imu_type Balance_Pitch_GD_imu;

   typedef double _Balance_Pitch_Neg_Target_imu_type;
  _Balance_Pitch_Neg_Target_imu_type Balance_Pitch_Neg_Target_imu;

   typedef double _Balance_Pitch_Pos_Target_imu_type;
  _Balance_Pitch_Pos_Target_imu_type Balance_Pitch_Pos_Target_imu;

   typedef double _Balance_Pitch_ELIMIT_imu_type;
  _Balance_Pitch_ELIMIT_imu_type Balance_Pitch_ELIMIT_imu;

   typedef double _Balance_Pitch_OLIMIT_imu_type;
  _Balance_Pitch_OLIMIT_imu_type Balance_Pitch_OLIMIT_imu;

   typedef int64_t _Balance_Roll_Flag_imu_type;
  _Balance_Roll_Flag_imu_type Balance_Roll_Flag_imu;

   typedef double _Balance_Roll_GP_imu_type;
  _Balance_Roll_GP_imu_type Balance_Roll_GP_imu;

   typedef double _Balance_Roll_GI_imu_type;
  _Balance_Roll_GI_imu_type Balance_Roll_GI_imu;

   typedef double _Balance_Roll_GD_imu_type;
  _Balance_Roll_GD_imu_type Balance_Roll_GD_imu;

   typedef double _Balance_Roll_Neg_Target_imu_type;
  _Balance_Roll_Neg_Target_imu_type Balance_Roll_Neg_Target_imu;

   typedef double _Balance_Roll_Pos_Target_imu_type;
  _Balance_Roll_Pos_Target_imu_type Balance_Roll_Pos_Target_imu;

   typedef double _Balance_Roll_ELIMIT_imu_type;
  _Balance_Roll_ELIMIT_imu_type Balance_Roll_ELIMIT_imu;

   typedef double _Balance_Roll_OLIMIT_imu_type;
  _Balance_Roll_OLIMIT_imu_type Balance_Roll_OLIMIT_imu;

   typedef int64_t _Balance_Pitch_Flag_type;
  _Balance_Pitch_Flag_type Balance_Pitch_Flag;

   typedef int64_t _Balance_Ankle_Pitch_Flag_type;
  _Balance_Ankle_Pitch_Flag_type Balance_Ankle_Pitch_Flag;

   typedef int64_t _Balance_Roll_Flag_type;
  _Balance_Roll_Flag_type Balance_Roll_Flag;

   typedef int64_t _Ratio_Check_Flag_type;
  _Ratio_Check_Flag_type Ratio_Check_Flag;

   typedef double _Center2Leg_type;
  _Center2Leg_type Center2Leg;

   typedef double _Link2Link_type;
  _Link2Link_type Link2Link;

   typedef double _Init_Z_Up_type;
  _Init_Z_Up_type Init_Z_Up;

   typedef double _Percentage_of_IK_10_Motor_type;
  _Percentage_of_IK_10_Motor_type Percentage_of_IK_10_Motor;

   typedef double _Percentage_of_IK_11_Motor_type;
  _Percentage_of_IK_11_Motor_type Percentage_of_IK_11_Motor;

   typedef double _Percentage_of_IK_12_Motor_type;
  _Percentage_of_IK_12_Motor_type Percentage_of_IK_12_Motor;

   typedef double _Percentage_of_IK_13_Motor_type;
  _Percentage_of_IK_13_Motor_type Percentage_of_IK_13_Motor;

   typedef double _Percentage_of_IK_14_Motor_type;
  _Percentage_of_IK_14_Motor_type Percentage_of_IK_14_Motor;

   typedef double _Percentage_of_IK_15_Motor_type;
  _Percentage_of_IK_15_Motor_type Percentage_of_IK_15_Motor;

   typedef double _Percentage_of_IK_16_Motor_type;
  _Percentage_of_IK_16_Motor_type Percentage_of_IK_16_Motor;

   typedef double _Percentage_of_IK_17_Motor_type;
  _Percentage_of_IK_17_Motor_type Percentage_of_IK_17_Motor;

   typedef double _Percentage_of_IK_18_Motor_type;
  _Percentage_of_IK_18_Motor_type Percentage_of_IK_18_Motor;

   typedef double _Percentage_of_IK_19_Motor_type;
  _Percentage_of_IK_19_Motor_type Percentage_of_IK_19_Motor;

   typedef double _Percentage_of_IK_20_Motor_type;
  _Percentage_of_IK_20_Motor_type Percentage_of_IK_20_Motor;

   typedef double _Percentage_of_IK_21_Motor_type;
  _Percentage_of_IK_21_Motor_type Percentage_of_IK_21_Motor;

   typedef double _First_Pos_XR_type;
  _First_Pos_XR_type First_Pos_XR;

   typedef double _First_Neg_XR_type;
  _First_Neg_XR_type First_Neg_XR;

   typedef double _First_Pos_SideR_type;
  _First_Pos_SideR_type First_Pos_SideR;

   typedef double _First_Neg_SideR_type;
  _First_Neg_SideR_type First_Neg_SideR;

   typedef double _First_Pos_YawR_type;
  _First_Pos_YawR_type First_Pos_YawR;

   typedef double _First_Neg_YawR_type;
  _First_Neg_YawR_type First_Neg_YawR;

   typedef double _First_Pos_XL_type;
  _First_Pos_XL_type First_Pos_XL;

   typedef double _First_Neg_XL_type;
  _First_Neg_XL_type First_Neg_XL;

   typedef double _First_Pos_SideL_type;
  _First_Pos_SideL_type First_Pos_SideL;

   typedef double _First_Neg_SideL_type;
  _First_Neg_SideL_type First_Neg_SideL;

   typedef double _First_Pos_YawL_type;
  _First_Pos_YawL_type First_Pos_YawL;

   typedef double _First_Neg_YawL_type;
  _First_Neg_YawL_type First_Neg_YawL;

   typedef double _First_Pos_SideR_SwingMinus_type;
  _First_Pos_SideR_SwingMinus_type First_Pos_SideR_SwingMinus;

   typedef double _First_Neg_SideR_SwingMinus_type;
  _First_Neg_SideR_SwingMinus_type First_Neg_SideR_SwingMinus;

   typedef double _First_Pos_SideL_SwingMinus_type;
  _First_Pos_SideL_SwingMinus_type First_Pos_SideL_SwingMinus;

   typedef double _First_Neg_SideL_SwingMinus_type;
  _First_Neg_SideL_SwingMinus_type First_Neg_SideL_SwingMinus;

   typedef int64_t _First_min_type;
  _First_min_type First_min;

   typedef int64_t _First_max_type;
  _First_max_type First_max;

   typedef double _Second_Pos_XR_type;
  _Second_Pos_XR_type Second_Pos_XR;

   typedef double _Second_Neg_XR_type;
  _Second_Neg_XR_type Second_Neg_XR;

   typedef double _Second_Pos_SideR_type;
  _Second_Pos_SideR_type Second_Pos_SideR;

   typedef double _Second_Neg_SideR_type;
  _Second_Neg_SideR_type Second_Neg_SideR;

   typedef double _Second_Pos_YawR_type;
  _Second_Pos_YawR_type Second_Pos_YawR;

   typedef double _Second_Neg_YawR_type;
  _Second_Neg_YawR_type Second_Neg_YawR;

   typedef double _Second_Pos_XL_type;
  _Second_Pos_XL_type Second_Pos_XL;

   typedef double _Second_Neg_XL_type;
  _Second_Neg_XL_type Second_Neg_XL;

   typedef double _Second_Pos_SideL_type;
  _Second_Pos_SideL_type Second_Pos_SideL;

   typedef double _Second_Neg_SideL_type;
  _Second_Neg_SideL_type Second_Neg_SideL;

   typedef double _Second_Pos_YawL_type;
  _Second_Pos_YawL_type Second_Pos_YawL;

   typedef double _Second_Neg_YawL_type;
  _Second_Neg_YawL_type Second_Neg_YawL;

   typedef double _Second_Pos_SideR_SwingMinus_type;
  _Second_Pos_SideR_SwingMinus_type Second_Pos_SideR_SwingMinus;

   typedef double _Second_Neg_SideR_SwingMinus_type;
  _Second_Neg_SideR_SwingMinus_type Second_Neg_SideR_SwingMinus;

   typedef double _Second_Pos_SideL_SwingMinus_type;
  _Second_Pos_SideL_SwingMinus_type Second_Pos_SideL_SwingMinus;

   typedef double _Second_Neg_SideL_SwingMinus_type;
  _Second_Neg_SideL_SwingMinus_type Second_Neg_SideL_SwingMinus;

   typedef int64_t _Second_min_type;
  _Second_min_type Second_min;

   typedef int64_t _Second_max_type;
  _Second_max_type Second_max;

   typedef double _Third_Pos_XR_type;
  _Third_Pos_XR_type Third_Pos_XR;

   typedef double _Third_Neg_XR_type;
  _Third_Neg_XR_type Third_Neg_XR;

   typedef double _Third_Pos_SideR_type;
  _Third_Pos_SideR_type Third_Pos_SideR;

   typedef double _Third_Neg_SideR_type;
  _Third_Neg_SideR_type Third_Neg_SideR;

   typedef double _Third_Pos_YawR_type;
  _Third_Pos_YawR_type Third_Pos_YawR;

   typedef double _Third_Neg_YawR_type;
  _Third_Neg_YawR_type Third_Neg_YawR;

   typedef double _Third_Pos_XL_type;
  _Third_Pos_XL_type Third_Pos_XL;

   typedef double _Third_Neg_XL_type;
  _Third_Neg_XL_type Third_Neg_XL;

   typedef double _Third_Pos_SideL_type;
  _Third_Pos_SideL_type Third_Pos_SideL;

   typedef double _Third_Neg_SideL_type;
  _Third_Neg_SideL_type Third_Neg_SideL;

   typedef double _Third_Pos_YawL_type;
  _Third_Pos_YawL_type Third_Pos_YawL;

   typedef double _Third_Neg_YawL_type;
  _Third_Neg_YawL_type Third_Neg_YawL;

   typedef double _Third_Pos_SideR_SwingMinus_type;
  _Third_Pos_SideR_SwingMinus_type Third_Pos_SideR_SwingMinus;

   typedef double _Third_Neg_SideR_SwingMinus_type;
  _Third_Neg_SideR_SwingMinus_type Third_Neg_SideR_SwingMinus;

   typedef double _Third_Pos_SideL_SwingMinus_type;
  _Third_Pos_SideL_SwingMinus_type Third_Pos_SideL_SwingMinus;

   typedef double _Third_Neg_SideL_SwingMinus_type;
  _Third_Neg_SideL_SwingMinus_type Third_Neg_SideL_SwingMinus;

   typedef int64_t _Third_min_type;
  _Third_min_type Third_min;

   typedef int64_t _Third_max_type;
  _Third_max_type Third_max;

   typedef double _Fourth_Pos_XR_type;
  _Fourth_Pos_XR_type Fourth_Pos_XR;

   typedef double _Fourth_Neg_XR_type;
  _Fourth_Neg_XR_type Fourth_Neg_XR;

   typedef double _Fourth_Pos_SideR_type;
  _Fourth_Pos_SideR_type Fourth_Pos_SideR;

   typedef double _Fourth_Neg_SideR_type;
  _Fourth_Neg_SideR_type Fourth_Neg_SideR;

   typedef double _Fourth_Pos_YawR_type;
  _Fourth_Pos_YawR_type Fourth_Pos_YawR;

   typedef double _Fourth_Neg_YawR_type;
  _Fourth_Neg_YawR_type Fourth_Neg_YawR;

   typedef double _Fourth_Pos_XL_type;
  _Fourth_Pos_XL_type Fourth_Pos_XL;

   typedef double _Fourth_Neg_XL_type;
  _Fourth_Neg_XL_type Fourth_Neg_XL;

   typedef double _Fourth_Pos_SideL_type;
  _Fourth_Pos_SideL_type Fourth_Pos_SideL;

   typedef double _Fourth_Neg_SideL_type;
  _Fourth_Neg_SideL_type Fourth_Neg_SideL;

   typedef double _Fourth_Pos_YawL_type;
  _Fourth_Pos_YawL_type Fourth_Pos_YawL;

   typedef double _Fourth_Neg_YawL_type;
  _Fourth_Neg_YawL_type Fourth_Neg_YawL;

   typedef double _Fourth_Pos_SideR_SwingMinus_type;
  _Fourth_Pos_SideR_SwingMinus_type Fourth_Pos_SideR_SwingMinus;

   typedef double _Fourth_Neg_SideR_SwingMinus_type;
  _Fourth_Neg_SideR_SwingMinus_type Fourth_Neg_SideR_SwingMinus;

   typedef double _Fourth_Pos_SideL_SwingMinus_type;
  _Fourth_Pos_SideL_SwingMinus_type Fourth_Pos_SideL_SwingMinus;

   typedef double _Fourth_Neg_SideL_SwingMinus_type;
  _Fourth_Neg_SideL_SwingMinus_type Fourth_Neg_SideL_SwingMinus;

   typedef int64_t _Fourth_min_type;
  _Fourth_min_type Fourth_min;

   typedef int64_t _Fourth_max_type;
  _Fourth_max_type Fourth_max;

   typedef int64_t _Landing_Time_Control_flag_type;
  _Landing_Time_Control_flag_type Landing_Time_Control_flag;

   typedef int64_t _Control_System_flag_type;
  _Control_System_flag_type Control_System_flag;





  typedef boost::shared_ptr< ::msg_generate::tune2walk_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::tune2walk_<ContainerAllocator> const> ConstPtr;

}; // struct tune2walk_

typedef ::msg_generate::tune2walk_<std::allocator<void> > tune2walk;

typedef boost::shared_ptr< ::msg_generate::tune2walk > tune2walkPtr;
typedef boost::shared_ptr< ::msg_generate::tune2walk const> tune2walkConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::tune2walk_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::tune2walk_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::tune2walk_<ContainerAllocator1> & lhs, const ::msg_generate::tune2walk_<ContainerAllocator2> & rhs)
{
  return lhs.IK_Flag == rhs.IK_Flag &&
    lhs.Entire_Time == rhs.Entire_Time &&
    lhs.Frequency == rhs.Frequency &&
    lhs.Default_X_Right == rhs.Default_X_Right &&
    lhs.Default_X_Left == rhs.Default_X_Left &&
    lhs.Default_Y_Right == rhs.Default_Y_Right &&
    lhs.Default_Y_Left == rhs.Default_Y_Left &&
    lhs.Default_Z_Right == rhs.Default_Z_Right &&
    lhs.Default_Z_Left == rhs.Default_Z_Left &&
    lhs.Offset_10_Motor == rhs.Offset_10_Motor &&
    lhs.Offset_11_Motor == rhs.Offset_11_Motor &&
    lhs.Offset_12_Motor == rhs.Offset_12_Motor &&
    lhs.Offset_13_Motor == rhs.Offset_13_Motor &&
    lhs.Offset_14_Motor == rhs.Offset_14_Motor &&
    lhs.Offset_15_Motor == rhs.Offset_15_Motor &&
    lhs.Offset_16_Motor == rhs.Offset_16_Motor &&
    lhs.Offset_17_Motor == rhs.Offset_17_Motor &&
    lhs.Offset_18_Motor == rhs.Offset_18_Motor &&
    lhs.Offset_19_Motor == rhs.Offset_19_Motor &&
    lhs.Offset_20_Motor == rhs.Offset_20_Motor &&
    lhs.Offset_21_Motor == rhs.Offset_21_Motor &&
    lhs.Swing_Right_Leg == rhs.Swing_Right_Leg &&
    lhs.Swing_Left_Leg == rhs.Swing_Left_Leg &&
    lhs.Swing_Right_Shoulder == rhs.Swing_Right_Shoulder &&
    lhs.Swing_Left_Shoulder == rhs.Swing_Left_Shoulder &&
    lhs.Rise_Right_Leg == rhs.Rise_Right_Leg &&
    lhs.Rise_Left_Leg == rhs.Rise_Left_Leg &&
    lhs.Start_Entire_Time == rhs.Start_Entire_Time &&
    lhs.Start_Swing == rhs.Start_Swing &&
    lhs.Start_Rise == rhs.Start_Rise &&
    lhs.End_Entire_Time == rhs.End_Entire_Time &&
    lhs.End_Swing == rhs.End_Swing &&
    lhs.End_Rise == rhs.End_Rise &&
    lhs.Test_X == rhs.Test_X &&
    lhs.Test_Side == rhs.Test_Side &&
    lhs.Test_Yaw == rhs.Test_Yaw &&
    lhs.Tuning_X == rhs.Tuning_X &&
    lhs.Tuning_Side == rhs.Tuning_Side &&
    lhs.Tuning_Yaw == rhs.Tuning_Yaw &&
    lhs.Balance_Value_0 == rhs.Balance_Value_0 &&
    lhs.Balance_Value_1 == rhs.Balance_Value_1 &&
    lhs.Balance_Value_2 == rhs.Balance_Value_2 &&
    lhs.Balance_Value_3 == rhs.Balance_Value_3 &&
    lhs.Balance_Pitch_GP == rhs.Balance_Pitch_GP &&
    lhs.Balance_Pitch_GI == rhs.Balance_Pitch_GI &&
    lhs.Balance_Pitch_GD == rhs.Balance_Pitch_GD &&
    lhs.Balance_Pitch_ELIMIT == rhs.Balance_Pitch_ELIMIT &&
    lhs.Balance_Pitch_OLIMIT == rhs.Balance_Pitch_OLIMIT &&
    lhs.Balance_Pitch_Neg_Target == rhs.Balance_Pitch_Neg_Target &&
    lhs.Balance_Pitch_Pos_Target == rhs.Balance_Pitch_Pos_Target &&
    lhs.Balance_Roll_GP == rhs.Balance_Roll_GP &&
    lhs.Balance_Roll_GI == rhs.Balance_Roll_GI &&
    lhs.Balance_Roll_GD == rhs.Balance_Roll_GD &&
    lhs.Balance_Roll_ELIMIT == rhs.Balance_Roll_ELIMIT &&
    lhs.Balance_Roll_OLIMIT == rhs.Balance_Roll_OLIMIT &&
    lhs.Balance_Roll_Neg_Target == rhs.Balance_Roll_Neg_Target &&
    lhs.Balance_Roll_Pos_Target == rhs.Balance_Roll_Pos_Target &&
    lhs.Balance_Angle_Pitch_GP == rhs.Balance_Angle_Pitch_GP &&
    lhs.Balance_Angle_Pitch_GI == rhs.Balance_Angle_Pitch_GI &&
    lhs.Balance_Angle_Pitch_GD == rhs.Balance_Angle_Pitch_GD &&
    lhs.Balance_Angle_Pitch_ELIMIT == rhs.Balance_Angle_Pitch_ELIMIT &&
    lhs.Balance_Angle_Pitch_OLIMIT == rhs.Balance_Angle_Pitch_OLIMIT &&
    lhs.Balance_Angle_Pitch_Neg_Target == rhs.Balance_Angle_Pitch_Neg_Target &&
    lhs.Balance_Angle_Pitch_Pos_Target == rhs.Balance_Angle_Pitch_Pos_Target &&
    lhs.Balance_Value_4 == rhs.Balance_Value_4 &&
    lhs.Balance_Value_5 == rhs.Balance_Value_5 &&
    lhs.Balance_Pitch_Flag_imu == rhs.Balance_Pitch_Flag_imu &&
    lhs.Balance_Pitch_GP_imu == rhs.Balance_Pitch_GP_imu &&
    lhs.Balance_Pitch_GI_imu == rhs.Balance_Pitch_GI_imu &&
    lhs.Balance_Pitch_GD_imu == rhs.Balance_Pitch_GD_imu &&
    lhs.Balance_Pitch_Neg_Target_imu == rhs.Balance_Pitch_Neg_Target_imu &&
    lhs.Balance_Pitch_Pos_Target_imu == rhs.Balance_Pitch_Pos_Target_imu &&
    lhs.Balance_Pitch_ELIMIT_imu == rhs.Balance_Pitch_ELIMIT_imu &&
    lhs.Balance_Pitch_OLIMIT_imu == rhs.Balance_Pitch_OLIMIT_imu &&
    lhs.Balance_Roll_Flag_imu == rhs.Balance_Roll_Flag_imu &&
    lhs.Balance_Roll_GP_imu == rhs.Balance_Roll_GP_imu &&
    lhs.Balance_Roll_GI_imu == rhs.Balance_Roll_GI_imu &&
    lhs.Balance_Roll_GD_imu == rhs.Balance_Roll_GD_imu &&
    lhs.Balance_Roll_Neg_Target_imu == rhs.Balance_Roll_Neg_Target_imu &&
    lhs.Balance_Roll_Pos_Target_imu == rhs.Balance_Roll_Pos_Target_imu &&
    lhs.Balance_Roll_ELIMIT_imu == rhs.Balance_Roll_ELIMIT_imu &&
    lhs.Balance_Roll_OLIMIT_imu == rhs.Balance_Roll_OLIMIT_imu &&
    lhs.Balance_Pitch_Flag == rhs.Balance_Pitch_Flag &&
    lhs.Balance_Ankle_Pitch_Flag == rhs.Balance_Ankle_Pitch_Flag &&
    lhs.Balance_Roll_Flag == rhs.Balance_Roll_Flag &&
    lhs.Ratio_Check_Flag == rhs.Ratio_Check_Flag &&
    lhs.Center2Leg == rhs.Center2Leg &&
    lhs.Link2Link == rhs.Link2Link &&
    lhs.Init_Z_Up == rhs.Init_Z_Up &&
    lhs.Percentage_of_IK_10_Motor == rhs.Percentage_of_IK_10_Motor &&
    lhs.Percentage_of_IK_11_Motor == rhs.Percentage_of_IK_11_Motor &&
    lhs.Percentage_of_IK_12_Motor == rhs.Percentage_of_IK_12_Motor &&
    lhs.Percentage_of_IK_13_Motor == rhs.Percentage_of_IK_13_Motor &&
    lhs.Percentage_of_IK_14_Motor == rhs.Percentage_of_IK_14_Motor &&
    lhs.Percentage_of_IK_15_Motor == rhs.Percentage_of_IK_15_Motor &&
    lhs.Percentage_of_IK_16_Motor == rhs.Percentage_of_IK_16_Motor &&
    lhs.Percentage_of_IK_17_Motor == rhs.Percentage_of_IK_17_Motor &&
    lhs.Percentage_of_IK_18_Motor == rhs.Percentage_of_IK_18_Motor &&
    lhs.Percentage_of_IK_19_Motor == rhs.Percentage_of_IK_19_Motor &&
    lhs.Percentage_of_IK_20_Motor == rhs.Percentage_of_IK_20_Motor &&
    lhs.Percentage_of_IK_21_Motor == rhs.Percentage_of_IK_21_Motor &&
    lhs.First_Pos_XR == rhs.First_Pos_XR &&
    lhs.First_Neg_XR == rhs.First_Neg_XR &&
    lhs.First_Pos_SideR == rhs.First_Pos_SideR &&
    lhs.First_Neg_SideR == rhs.First_Neg_SideR &&
    lhs.First_Pos_YawR == rhs.First_Pos_YawR &&
    lhs.First_Neg_YawR == rhs.First_Neg_YawR &&
    lhs.First_Pos_XL == rhs.First_Pos_XL &&
    lhs.First_Neg_XL == rhs.First_Neg_XL &&
    lhs.First_Pos_SideL == rhs.First_Pos_SideL &&
    lhs.First_Neg_SideL == rhs.First_Neg_SideL &&
    lhs.First_Pos_YawL == rhs.First_Pos_YawL &&
    lhs.First_Neg_YawL == rhs.First_Neg_YawL &&
    lhs.First_Pos_SideR_SwingMinus == rhs.First_Pos_SideR_SwingMinus &&
    lhs.First_Neg_SideR_SwingMinus == rhs.First_Neg_SideR_SwingMinus &&
    lhs.First_Pos_SideL_SwingMinus == rhs.First_Pos_SideL_SwingMinus &&
    lhs.First_Neg_SideL_SwingMinus == rhs.First_Neg_SideL_SwingMinus &&
    lhs.First_min == rhs.First_min &&
    lhs.First_max == rhs.First_max &&
    lhs.Second_Pos_XR == rhs.Second_Pos_XR &&
    lhs.Second_Neg_XR == rhs.Second_Neg_XR &&
    lhs.Second_Pos_SideR == rhs.Second_Pos_SideR &&
    lhs.Second_Neg_SideR == rhs.Second_Neg_SideR &&
    lhs.Second_Pos_YawR == rhs.Second_Pos_YawR &&
    lhs.Second_Neg_YawR == rhs.Second_Neg_YawR &&
    lhs.Second_Pos_XL == rhs.Second_Pos_XL &&
    lhs.Second_Neg_XL == rhs.Second_Neg_XL &&
    lhs.Second_Pos_SideL == rhs.Second_Pos_SideL &&
    lhs.Second_Neg_SideL == rhs.Second_Neg_SideL &&
    lhs.Second_Pos_YawL == rhs.Second_Pos_YawL &&
    lhs.Second_Neg_YawL == rhs.Second_Neg_YawL &&
    lhs.Second_Pos_SideR_SwingMinus == rhs.Second_Pos_SideR_SwingMinus &&
    lhs.Second_Neg_SideR_SwingMinus == rhs.Second_Neg_SideR_SwingMinus &&
    lhs.Second_Pos_SideL_SwingMinus == rhs.Second_Pos_SideL_SwingMinus &&
    lhs.Second_Neg_SideL_SwingMinus == rhs.Second_Neg_SideL_SwingMinus &&
    lhs.Second_min == rhs.Second_min &&
    lhs.Second_max == rhs.Second_max &&
    lhs.Third_Pos_XR == rhs.Third_Pos_XR &&
    lhs.Third_Neg_XR == rhs.Third_Neg_XR &&
    lhs.Third_Pos_SideR == rhs.Third_Pos_SideR &&
    lhs.Third_Neg_SideR == rhs.Third_Neg_SideR &&
    lhs.Third_Pos_YawR == rhs.Third_Pos_YawR &&
    lhs.Third_Neg_YawR == rhs.Third_Neg_YawR &&
    lhs.Third_Pos_XL == rhs.Third_Pos_XL &&
    lhs.Third_Neg_XL == rhs.Third_Neg_XL &&
    lhs.Third_Pos_SideL == rhs.Third_Pos_SideL &&
    lhs.Third_Neg_SideL == rhs.Third_Neg_SideL &&
    lhs.Third_Pos_YawL == rhs.Third_Pos_YawL &&
    lhs.Third_Neg_YawL == rhs.Third_Neg_YawL &&
    lhs.Third_Pos_SideR_SwingMinus == rhs.Third_Pos_SideR_SwingMinus &&
    lhs.Third_Neg_SideR_SwingMinus == rhs.Third_Neg_SideR_SwingMinus &&
    lhs.Third_Pos_SideL_SwingMinus == rhs.Third_Pos_SideL_SwingMinus &&
    lhs.Third_Neg_SideL_SwingMinus == rhs.Third_Neg_SideL_SwingMinus &&
    lhs.Third_min == rhs.Third_min &&
    lhs.Third_max == rhs.Third_max &&
    lhs.Fourth_Pos_XR == rhs.Fourth_Pos_XR &&
    lhs.Fourth_Neg_XR == rhs.Fourth_Neg_XR &&
    lhs.Fourth_Pos_SideR == rhs.Fourth_Pos_SideR &&
    lhs.Fourth_Neg_SideR == rhs.Fourth_Neg_SideR &&
    lhs.Fourth_Pos_YawR == rhs.Fourth_Pos_YawR &&
    lhs.Fourth_Neg_YawR == rhs.Fourth_Neg_YawR &&
    lhs.Fourth_Pos_XL == rhs.Fourth_Pos_XL &&
    lhs.Fourth_Neg_XL == rhs.Fourth_Neg_XL &&
    lhs.Fourth_Pos_SideL == rhs.Fourth_Pos_SideL &&
    lhs.Fourth_Neg_SideL == rhs.Fourth_Neg_SideL &&
    lhs.Fourth_Pos_YawL == rhs.Fourth_Pos_YawL &&
    lhs.Fourth_Neg_YawL == rhs.Fourth_Neg_YawL &&
    lhs.Fourth_Pos_SideR_SwingMinus == rhs.Fourth_Pos_SideR_SwingMinus &&
    lhs.Fourth_Neg_SideR_SwingMinus == rhs.Fourth_Neg_SideR_SwingMinus &&
    lhs.Fourth_Pos_SideL_SwingMinus == rhs.Fourth_Pos_SideL_SwingMinus &&
    lhs.Fourth_Neg_SideL_SwingMinus == rhs.Fourth_Neg_SideL_SwingMinus &&
    lhs.Fourth_min == rhs.Fourth_min &&
    lhs.Fourth_max == rhs.Fourth_max &&
    lhs.Landing_Time_Control_flag == rhs.Landing_Time_Control_flag &&
    lhs.Control_System_flag == rhs.Control_System_flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::tune2walk_<ContainerAllocator1> & lhs, const ::msg_generate::tune2walk_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::tune2walk_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::tune2walk_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::tune2walk_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::tune2walk_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::tune2walk_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::tune2walk_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::tune2walk_<ContainerAllocator> >
{
  static const char* value()
  {
    return "75d5cf0d1f6070c84882cf68f96d4a52";
  }

  static const char* value(const ::msg_generate::tune2walk_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x75d5cf0d1f6070c8ULL;
  static const uint64_t static_value2 = 0x4882cf68f96d4a52ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::tune2walk_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/tune2walk";
  }

  static const char* value(const ::msg_generate::tune2walk_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::tune2walk_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool IK_Flag\n"
"float64 Entire_Time\n"
"float64 Frequency\n"
"float64 Default_X_Right\n"
"float64 Default_X_Left\n"
"float64 Default_Y_Right\n"
"float64 Default_Y_Left\n"
"float64 Default_Z_Right\n"
"float64 Default_Z_Left\n"
"float64 Offset_10_Motor\n"
"float64 Offset_11_Motor\n"
"float64 Offset_12_Motor\n"
"float64 Offset_13_Motor\n"
"float64 Offset_14_Motor\n"
"float64 Offset_15_Motor\n"
"float64 Offset_16_Motor\n"
"float64 Offset_17_Motor\n"
"float64 Offset_18_Motor\n"
"float64 Offset_19_Motor\n"
"float64 Offset_20_Motor\n"
"float64 Offset_21_Motor\n"
"float64 Swing_Right_Leg\n"
"float64 Swing_Left_Leg\n"
"float64 Swing_Right_Shoulder\n"
"float64 Swing_Left_Shoulder\n"
"float64 Rise_Right_Leg\n"
"float64 Rise_Left_Leg\n"
"float64 Start_Entire_Time\n"
"float64 Start_Swing\n"
"float64 Start_Rise\n"
"float64 End_Entire_Time\n"
"float64 End_Swing\n"
"float64 End_Rise\n"
"float64 Test_X\n"
"float64 Test_Side\n"
"float64 Test_Yaw\n"
"float64 Tuning_X\n"
"float64 Tuning_Side\n"
"float64 Tuning_Yaw\n"
"float64 Balance_Value_0\n"
"float64 Balance_Value_1\n"
"float64 Balance_Value_2\n"
"float64 Balance_Value_3\n"
"float64 Balance_Pitch_GP\n"
"float64 Balance_Pitch_GI\n"
"float64 Balance_Pitch_GD\n"
"float64 Balance_Pitch_ELIMIT\n"
"float64 Balance_Pitch_OLIMIT\n"
"float64 Balance_Pitch_Neg_Target\n"
"float64 Balance_Pitch_Pos_Target\n"
"float64 Balance_Roll_GP\n"
"float64 Balance_Roll_GI\n"
"float64 Balance_Roll_GD\n"
"float64 Balance_Roll_ELIMIT\n"
"float64 Balance_Roll_OLIMIT\n"
"float64 Balance_Roll_Neg_Target\n"
"float64 Balance_Roll_Pos_Target\n"
"float64 Balance_Angle_Pitch_GP\n"
"float64 Balance_Angle_Pitch_GI\n"
"float64 Balance_Angle_Pitch_GD\n"
"float64 Balance_Angle_Pitch_ELIMIT\n"
"float64 Balance_Angle_Pitch_OLIMIT\n"
"float64 Balance_Angle_Pitch_Neg_Target\n"
"float64 Balance_Angle_Pitch_Pos_Target\n"
"\n"
"float64 Balance_Value_4\n"
"float64 Balance_Value_5\n"
"int64 Balance_Pitch_Flag_imu #bool\n"
"float64 Balance_Pitch_GP_imu\n"
"float64 Balance_Pitch_GI_imu\n"
"float64 Balance_Pitch_GD_imu\n"
"float64 Balance_Pitch_Neg_Target_imu\n"
"float64 Balance_Pitch_Pos_Target_imu\n"
"float64 Balance_Pitch_ELIMIT_imu\n"
"float64 Balance_Pitch_OLIMIT_imu\n"
"\n"
"int64 Balance_Roll_Flag_imu #bool\n"
"float64 Balance_Roll_GP_imu\n"
"float64 Balance_Roll_GI_imu\n"
"float64 Balance_Roll_GD_imu\n"
"float64 Balance_Roll_Neg_Target_imu\n"
"float64 Balance_Roll_Pos_Target_imu\n"
"float64 Balance_Roll_ELIMIT_imu\n"
"float64 Balance_Roll_OLIMIT_imu\n"
"\n"
"int64 Balance_Pitch_Flag #bool\n"
"int64 Balance_Ankle_Pitch_Flag #bool\n"
"int64 Balance_Roll_Flag #bool\n"
"int64 Ratio_Check_Flag\n"
"\n"
"float64 Center2Leg\n"
"float64 Link2Link\n"
"float64 Init_Z_Up\n"
"\n"
"float64 Percentage_of_IK_10_Motor\n"
"float64 Percentage_of_IK_11_Motor\n"
"float64 Percentage_of_IK_12_Motor\n"
"float64 Percentage_of_IK_13_Motor\n"
"float64 Percentage_of_IK_14_Motor\n"
"float64 Percentage_of_IK_15_Motor\n"
"float64 Percentage_of_IK_16_Motor\n"
"float64 Percentage_of_IK_17_Motor\n"
"float64 Percentage_of_IK_18_Motor\n"
"float64 Percentage_of_IK_19_Motor\n"
"float64 Percentage_of_IK_20_Motor\n"
"float64 Percentage_of_IK_21_Motor\n"
"\n"
"float64 First_Pos_XR\n"
"float64 First_Neg_XR\n"
"float64 First_Pos_SideR\n"
"float64 First_Neg_SideR\n"
"float64 First_Pos_YawR\n"
"float64 First_Neg_YawR\n"
"float64 First_Pos_XL\n"
"float64 First_Neg_XL\n"
"float64 First_Pos_SideL\n"
"float64 First_Neg_SideL\n"
"float64 First_Pos_YawL\n"
"float64 First_Neg_YawL\n"
"float64 First_Pos_SideR_SwingMinus\n"
"float64 First_Neg_SideR_SwingMinus\n"
"float64 First_Pos_SideL_SwingMinus\n"
"float64 First_Neg_SideL_SwingMinus\n"
"int64 First_min\n"
"int64 First_max\n"
"\n"
"float64 Second_Pos_XR\n"
"float64 Second_Neg_XR\n"
"float64 Second_Pos_SideR\n"
"float64 Second_Neg_SideR\n"
"float64 Second_Pos_YawR\n"
"float64 Second_Neg_YawR\n"
"float64 Second_Pos_XL\n"
"float64 Second_Neg_XL\n"
"float64 Second_Pos_SideL\n"
"float64 Second_Neg_SideL\n"
"float64 Second_Pos_YawL\n"
"float64 Second_Neg_YawL\n"
"float64 Second_Pos_SideR_SwingMinus\n"
"float64 Second_Neg_SideR_SwingMinus\n"
"float64 Second_Pos_SideL_SwingMinus\n"
"float64 Second_Neg_SideL_SwingMinus\n"
"int64 Second_min\n"
"int64 Second_max\n"
"\n"
"float64 Third_Pos_XR\n"
"float64 Third_Neg_XR\n"
"float64 Third_Pos_SideR\n"
"float64 Third_Neg_SideR\n"
"float64 Third_Pos_YawR\n"
"float64 Third_Neg_YawR\n"
"float64 Third_Pos_XL\n"
"float64 Third_Neg_XL\n"
"float64 Third_Pos_SideL\n"
"float64 Third_Neg_SideL\n"
"float64 Third_Pos_YawL\n"
"float64 Third_Neg_YawL\n"
"float64 Third_Pos_SideR_SwingMinus\n"
"float64 Third_Neg_SideR_SwingMinus\n"
"float64 Third_Pos_SideL_SwingMinus\n"
"float64 Third_Neg_SideL_SwingMinus\n"
"int64 Third_min\n"
"int64 Third_max\n"
"\n"
"float64 Fourth_Pos_XR\n"
"float64 Fourth_Neg_XR\n"
"float64 Fourth_Pos_SideR\n"
"float64 Fourth_Neg_SideR\n"
"float64 Fourth_Pos_YawR\n"
"float64 Fourth_Neg_YawR\n"
"float64 Fourth_Pos_XL\n"
"float64 Fourth_Neg_XL\n"
"float64 Fourth_Pos_SideL\n"
"float64 Fourth_Neg_SideL\n"
"float64 Fourth_Pos_YawL\n"
"float64 Fourth_Neg_YawL\n"
"float64 Fourth_Pos_SideR_SwingMinus\n"
"float64 Fourth_Neg_SideR_SwingMinus\n"
"float64 Fourth_Pos_SideL_SwingMinus\n"
"float64 Fourth_Neg_SideL_SwingMinus\n"
"int64 Fourth_min\n"
"int64 Fourth_max\n"
"\n"
"int64 Landing_Time_Control_flag\n"
"\n"
"int64 Control_System_flag\n"
"\n"
;
  }

  static const char* value(const ::msg_generate::tune2walk_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::tune2walk_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.IK_Flag);
      stream.next(m.Entire_Time);
      stream.next(m.Frequency);
      stream.next(m.Default_X_Right);
      stream.next(m.Default_X_Left);
      stream.next(m.Default_Y_Right);
      stream.next(m.Default_Y_Left);
      stream.next(m.Default_Z_Right);
      stream.next(m.Default_Z_Left);
      stream.next(m.Offset_10_Motor);
      stream.next(m.Offset_11_Motor);
      stream.next(m.Offset_12_Motor);
      stream.next(m.Offset_13_Motor);
      stream.next(m.Offset_14_Motor);
      stream.next(m.Offset_15_Motor);
      stream.next(m.Offset_16_Motor);
      stream.next(m.Offset_17_Motor);
      stream.next(m.Offset_18_Motor);
      stream.next(m.Offset_19_Motor);
      stream.next(m.Offset_20_Motor);
      stream.next(m.Offset_21_Motor);
      stream.next(m.Swing_Right_Leg);
      stream.next(m.Swing_Left_Leg);
      stream.next(m.Swing_Right_Shoulder);
      stream.next(m.Swing_Left_Shoulder);
      stream.next(m.Rise_Right_Leg);
      stream.next(m.Rise_Left_Leg);
      stream.next(m.Start_Entire_Time);
      stream.next(m.Start_Swing);
      stream.next(m.Start_Rise);
      stream.next(m.End_Entire_Time);
      stream.next(m.End_Swing);
      stream.next(m.End_Rise);
      stream.next(m.Test_X);
      stream.next(m.Test_Side);
      stream.next(m.Test_Yaw);
      stream.next(m.Tuning_X);
      stream.next(m.Tuning_Side);
      stream.next(m.Tuning_Yaw);
      stream.next(m.Balance_Value_0);
      stream.next(m.Balance_Value_1);
      stream.next(m.Balance_Value_2);
      stream.next(m.Balance_Value_3);
      stream.next(m.Balance_Pitch_GP);
      stream.next(m.Balance_Pitch_GI);
      stream.next(m.Balance_Pitch_GD);
      stream.next(m.Balance_Pitch_ELIMIT);
      stream.next(m.Balance_Pitch_OLIMIT);
      stream.next(m.Balance_Pitch_Neg_Target);
      stream.next(m.Balance_Pitch_Pos_Target);
      stream.next(m.Balance_Roll_GP);
      stream.next(m.Balance_Roll_GI);
      stream.next(m.Balance_Roll_GD);
      stream.next(m.Balance_Roll_ELIMIT);
      stream.next(m.Balance_Roll_OLIMIT);
      stream.next(m.Balance_Roll_Neg_Target);
      stream.next(m.Balance_Roll_Pos_Target);
      stream.next(m.Balance_Angle_Pitch_GP);
      stream.next(m.Balance_Angle_Pitch_GI);
      stream.next(m.Balance_Angle_Pitch_GD);
      stream.next(m.Balance_Angle_Pitch_ELIMIT);
      stream.next(m.Balance_Angle_Pitch_OLIMIT);
      stream.next(m.Balance_Angle_Pitch_Neg_Target);
      stream.next(m.Balance_Angle_Pitch_Pos_Target);
      stream.next(m.Balance_Value_4);
      stream.next(m.Balance_Value_5);
      stream.next(m.Balance_Pitch_Flag_imu);
      stream.next(m.Balance_Pitch_GP_imu);
      stream.next(m.Balance_Pitch_GI_imu);
      stream.next(m.Balance_Pitch_GD_imu);
      stream.next(m.Balance_Pitch_Neg_Target_imu);
      stream.next(m.Balance_Pitch_Pos_Target_imu);
      stream.next(m.Balance_Pitch_ELIMIT_imu);
      stream.next(m.Balance_Pitch_OLIMIT_imu);
      stream.next(m.Balance_Roll_Flag_imu);
      stream.next(m.Balance_Roll_GP_imu);
      stream.next(m.Balance_Roll_GI_imu);
      stream.next(m.Balance_Roll_GD_imu);
      stream.next(m.Balance_Roll_Neg_Target_imu);
      stream.next(m.Balance_Roll_Pos_Target_imu);
      stream.next(m.Balance_Roll_ELIMIT_imu);
      stream.next(m.Balance_Roll_OLIMIT_imu);
      stream.next(m.Balance_Pitch_Flag);
      stream.next(m.Balance_Ankle_Pitch_Flag);
      stream.next(m.Balance_Roll_Flag);
      stream.next(m.Ratio_Check_Flag);
      stream.next(m.Center2Leg);
      stream.next(m.Link2Link);
      stream.next(m.Init_Z_Up);
      stream.next(m.Percentage_of_IK_10_Motor);
      stream.next(m.Percentage_of_IK_11_Motor);
      stream.next(m.Percentage_of_IK_12_Motor);
      stream.next(m.Percentage_of_IK_13_Motor);
      stream.next(m.Percentage_of_IK_14_Motor);
      stream.next(m.Percentage_of_IK_15_Motor);
      stream.next(m.Percentage_of_IK_16_Motor);
      stream.next(m.Percentage_of_IK_17_Motor);
      stream.next(m.Percentage_of_IK_18_Motor);
      stream.next(m.Percentage_of_IK_19_Motor);
      stream.next(m.Percentage_of_IK_20_Motor);
      stream.next(m.Percentage_of_IK_21_Motor);
      stream.next(m.First_Pos_XR);
      stream.next(m.First_Neg_XR);
      stream.next(m.First_Pos_SideR);
      stream.next(m.First_Neg_SideR);
      stream.next(m.First_Pos_YawR);
      stream.next(m.First_Neg_YawR);
      stream.next(m.First_Pos_XL);
      stream.next(m.First_Neg_XL);
      stream.next(m.First_Pos_SideL);
      stream.next(m.First_Neg_SideL);
      stream.next(m.First_Pos_YawL);
      stream.next(m.First_Neg_YawL);
      stream.next(m.First_Pos_SideR_SwingMinus);
      stream.next(m.First_Neg_SideR_SwingMinus);
      stream.next(m.First_Pos_SideL_SwingMinus);
      stream.next(m.First_Neg_SideL_SwingMinus);
      stream.next(m.First_min);
      stream.next(m.First_max);
      stream.next(m.Second_Pos_XR);
      stream.next(m.Second_Neg_XR);
      stream.next(m.Second_Pos_SideR);
      stream.next(m.Second_Neg_SideR);
      stream.next(m.Second_Pos_YawR);
      stream.next(m.Second_Neg_YawR);
      stream.next(m.Second_Pos_XL);
      stream.next(m.Second_Neg_XL);
      stream.next(m.Second_Pos_SideL);
      stream.next(m.Second_Neg_SideL);
      stream.next(m.Second_Pos_YawL);
      stream.next(m.Second_Neg_YawL);
      stream.next(m.Second_Pos_SideR_SwingMinus);
      stream.next(m.Second_Neg_SideR_SwingMinus);
      stream.next(m.Second_Pos_SideL_SwingMinus);
      stream.next(m.Second_Neg_SideL_SwingMinus);
      stream.next(m.Second_min);
      stream.next(m.Second_max);
      stream.next(m.Third_Pos_XR);
      stream.next(m.Third_Neg_XR);
      stream.next(m.Third_Pos_SideR);
      stream.next(m.Third_Neg_SideR);
      stream.next(m.Third_Pos_YawR);
      stream.next(m.Third_Neg_YawR);
      stream.next(m.Third_Pos_XL);
      stream.next(m.Third_Neg_XL);
      stream.next(m.Third_Pos_SideL);
      stream.next(m.Third_Neg_SideL);
      stream.next(m.Third_Pos_YawL);
      stream.next(m.Third_Neg_YawL);
      stream.next(m.Third_Pos_SideR_SwingMinus);
      stream.next(m.Third_Neg_SideR_SwingMinus);
      stream.next(m.Third_Pos_SideL_SwingMinus);
      stream.next(m.Third_Neg_SideL_SwingMinus);
      stream.next(m.Third_min);
      stream.next(m.Third_max);
      stream.next(m.Fourth_Pos_XR);
      stream.next(m.Fourth_Neg_XR);
      stream.next(m.Fourth_Pos_SideR);
      stream.next(m.Fourth_Neg_SideR);
      stream.next(m.Fourth_Pos_YawR);
      stream.next(m.Fourth_Neg_YawR);
      stream.next(m.Fourth_Pos_XL);
      stream.next(m.Fourth_Neg_XL);
      stream.next(m.Fourth_Pos_SideL);
      stream.next(m.Fourth_Neg_SideL);
      stream.next(m.Fourth_Pos_YawL);
      stream.next(m.Fourth_Neg_YawL);
      stream.next(m.Fourth_Pos_SideR_SwingMinus);
      stream.next(m.Fourth_Neg_SideR_SwingMinus);
      stream.next(m.Fourth_Pos_SideL_SwingMinus);
      stream.next(m.Fourth_Neg_SideL_SwingMinus);
      stream.next(m.Fourth_min);
      stream.next(m.Fourth_max);
      stream.next(m.Landing_Time_Control_flag);
      stream.next(m.Control_System_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct tune2walk_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::tune2walk_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::tune2walk_<ContainerAllocator>& v)
  {
    s << indent << "IK_Flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.IK_Flag);
    s << indent << "Entire_Time: ";
    Printer<double>::stream(s, indent + "  ", v.Entire_Time);
    s << indent << "Frequency: ";
    Printer<double>::stream(s, indent + "  ", v.Frequency);
    s << indent << "Default_X_Right: ";
    Printer<double>::stream(s, indent + "  ", v.Default_X_Right);
    s << indent << "Default_X_Left: ";
    Printer<double>::stream(s, indent + "  ", v.Default_X_Left);
    s << indent << "Default_Y_Right: ";
    Printer<double>::stream(s, indent + "  ", v.Default_Y_Right);
    s << indent << "Default_Y_Left: ";
    Printer<double>::stream(s, indent + "  ", v.Default_Y_Left);
    s << indent << "Default_Z_Right: ";
    Printer<double>::stream(s, indent + "  ", v.Default_Z_Right);
    s << indent << "Default_Z_Left: ";
    Printer<double>::stream(s, indent + "  ", v.Default_Z_Left);
    s << indent << "Offset_10_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Offset_10_Motor);
    s << indent << "Offset_11_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Offset_11_Motor);
    s << indent << "Offset_12_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Offset_12_Motor);
    s << indent << "Offset_13_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Offset_13_Motor);
    s << indent << "Offset_14_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Offset_14_Motor);
    s << indent << "Offset_15_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Offset_15_Motor);
    s << indent << "Offset_16_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Offset_16_Motor);
    s << indent << "Offset_17_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Offset_17_Motor);
    s << indent << "Offset_18_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Offset_18_Motor);
    s << indent << "Offset_19_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Offset_19_Motor);
    s << indent << "Offset_20_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Offset_20_Motor);
    s << indent << "Offset_21_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Offset_21_Motor);
    s << indent << "Swing_Right_Leg: ";
    Printer<double>::stream(s, indent + "  ", v.Swing_Right_Leg);
    s << indent << "Swing_Left_Leg: ";
    Printer<double>::stream(s, indent + "  ", v.Swing_Left_Leg);
    s << indent << "Swing_Right_Shoulder: ";
    Printer<double>::stream(s, indent + "  ", v.Swing_Right_Shoulder);
    s << indent << "Swing_Left_Shoulder: ";
    Printer<double>::stream(s, indent + "  ", v.Swing_Left_Shoulder);
    s << indent << "Rise_Right_Leg: ";
    Printer<double>::stream(s, indent + "  ", v.Rise_Right_Leg);
    s << indent << "Rise_Left_Leg: ";
    Printer<double>::stream(s, indent + "  ", v.Rise_Left_Leg);
    s << indent << "Start_Entire_Time: ";
    Printer<double>::stream(s, indent + "  ", v.Start_Entire_Time);
    s << indent << "Start_Swing: ";
    Printer<double>::stream(s, indent + "  ", v.Start_Swing);
    s << indent << "Start_Rise: ";
    Printer<double>::stream(s, indent + "  ", v.Start_Rise);
    s << indent << "End_Entire_Time: ";
    Printer<double>::stream(s, indent + "  ", v.End_Entire_Time);
    s << indent << "End_Swing: ";
    Printer<double>::stream(s, indent + "  ", v.End_Swing);
    s << indent << "End_Rise: ";
    Printer<double>::stream(s, indent + "  ", v.End_Rise);
    s << indent << "Test_X: ";
    Printer<double>::stream(s, indent + "  ", v.Test_X);
    s << indent << "Test_Side: ";
    Printer<double>::stream(s, indent + "  ", v.Test_Side);
    s << indent << "Test_Yaw: ";
    Printer<double>::stream(s, indent + "  ", v.Test_Yaw);
    s << indent << "Tuning_X: ";
    Printer<double>::stream(s, indent + "  ", v.Tuning_X);
    s << indent << "Tuning_Side: ";
    Printer<double>::stream(s, indent + "  ", v.Tuning_Side);
    s << indent << "Tuning_Yaw: ";
    Printer<double>::stream(s, indent + "  ", v.Tuning_Yaw);
    s << indent << "Balance_Value_0: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Value_0);
    s << indent << "Balance_Value_1: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Value_1);
    s << indent << "Balance_Value_2: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Value_2);
    s << indent << "Balance_Value_3: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Value_3);
    s << indent << "Balance_Pitch_GP: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Pitch_GP);
    s << indent << "Balance_Pitch_GI: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Pitch_GI);
    s << indent << "Balance_Pitch_GD: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Pitch_GD);
    s << indent << "Balance_Pitch_ELIMIT: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Pitch_ELIMIT);
    s << indent << "Balance_Pitch_OLIMIT: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Pitch_OLIMIT);
    s << indent << "Balance_Pitch_Neg_Target: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Pitch_Neg_Target);
    s << indent << "Balance_Pitch_Pos_Target: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Pitch_Pos_Target);
    s << indent << "Balance_Roll_GP: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Roll_GP);
    s << indent << "Balance_Roll_GI: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Roll_GI);
    s << indent << "Balance_Roll_GD: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Roll_GD);
    s << indent << "Balance_Roll_ELIMIT: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Roll_ELIMIT);
    s << indent << "Balance_Roll_OLIMIT: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Roll_OLIMIT);
    s << indent << "Balance_Roll_Neg_Target: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Roll_Neg_Target);
    s << indent << "Balance_Roll_Pos_Target: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Roll_Pos_Target);
    s << indent << "Balance_Angle_Pitch_GP: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Angle_Pitch_GP);
    s << indent << "Balance_Angle_Pitch_GI: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Angle_Pitch_GI);
    s << indent << "Balance_Angle_Pitch_GD: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Angle_Pitch_GD);
    s << indent << "Balance_Angle_Pitch_ELIMIT: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Angle_Pitch_ELIMIT);
    s << indent << "Balance_Angle_Pitch_OLIMIT: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Angle_Pitch_OLIMIT);
    s << indent << "Balance_Angle_Pitch_Neg_Target: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Angle_Pitch_Neg_Target);
    s << indent << "Balance_Angle_Pitch_Pos_Target: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Angle_Pitch_Pos_Target);
    s << indent << "Balance_Value_4: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Value_4);
    s << indent << "Balance_Value_5: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Value_5);
    s << indent << "Balance_Pitch_Flag_imu: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Balance_Pitch_Flag_imu);
    s << indent << "Balance_Pitch_GP_imu: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Pitch_GP_imu);
    s << indent << "Balance_Pitch_GI_imu: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Pitch_GI_imu);
    s << indent << "Balance_Pitch_GD_imu: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Pitch_GD_imu);
    s << indent << "Balance_Pitch_Neg_Target_imu: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Pitch_Neg_Target_imu);
    s << indent << "Balance_Pitch_Pos_Target_imu: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Pitch_Pos_Target_imu);
    s << indent << "Balance_Pitch_ELIMIT_imu: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Pitch_ELIMIT_imu);
    s << indent << "Balance_Pitch_OLIMIT_imu: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Pitch_OLIMIT_imu);
    s << indent << "Balance_Roll_Flag_imu: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Balance_Roll_Flag_imu);
    s << indent << "Balance_Roll_GP_imu: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Roll_GP_imu);
    s << indent << "Balance_Roll_GI_imu: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Roll_GI_imu);
    s << indent << "Balance_Roll_GD_imu: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Roll_GD_imu);
    s << indent << "Balance_Roll_Neg_Target_imu: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Roll_Neg_Target_imu);
    s << indent << "Balance_Roll_Pos_Target_imu: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Roll_Pos_Target_imu);
    s << indent << "Balance_Roll_ELIMIT_imu: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Roll_ELIMIT_imu);
    s << indent << "Balance_Roll_OLIMIT_imu: ";
    Printer<double>::stream(s, indent + "  ", v.Balance_Roll_OLIMIT_imu);
    s << indent << "Balance_Pitch_Flag: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Balance_Pitch_Flag);
    s << indent << "Balance_Ankle_Pitch_Flag: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Balance_Ankle_Pitch_Flag);
    s << indent << "Balance_Roll_Flag: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Balance_Roll_Flag);
    s << indent << "Ratio_Check_Flag: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Ratio_Check_Flag);
    s << indent << "Center2Leg: ";
    Printer<double>::stream(s, indent + "  ", v.Center2Leg);
    s << indent << "Link2Link: ";
    Printer<double>::stream(s, indent + "  ", v.Link2Link);
    s << indent << "Init_Z_Up: ";
    Printer<double>::stream(s, indent + "  ", v.Init_Z_Up);
    s << indent << "Percentage_of_IK_10_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Percentage_of_IK_10_Motor);
    s << indent << "Percentage_of_IK_11_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Percentage_of_IK_11_Motor);
    s << indent << "Percentage_of_IK_12_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Percentage_of_IK_12_Motor);
    s << indent << "Percentage_of_IK_13_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Percentage_of_IK_13_Motor);
    s << indent << "Percentage_of_IK_14_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Percentage_of_IK_14_Motor);
    s << indent << "Percentage_of_IK_15_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Percentage_of_IK_15_Motor);
    s << indent << "Percentage_of_IK_16_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Percentage_of_IK_16_Motor);
    s << indent << "Percentage_of_IK_17_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Percentage_of_IK_17_Motor);
    s << indent << "Percentage_of_IK_18_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Percentage_of_IK_18_Motor);
    s << indent << "Percentage_of_IK_19_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Percentage_of_IK_19_Motor);
    s << indent << "Percentage_of_IK_20_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Percentage_of_IK_20_Motor);
    s << indent << "Percentage_of_IK_21_Motor: ";
    Printer<double>::stream(s, indent + "  ", v.Percentage_of_IK_21_Motor);
    s << indent << "First_Pos_XR: ";
    Printer<double>::stream(s, indent + "  ", v.First_Pos_XR);
    s << indent << "First_Neg_XR: ";
    Printer<double>::stream(s, indent + "  ", v.First_Neg_XR);
    s << indent << "First_Pos_SideR: ";
    Printer<double>::stream(s, indent + "  ", v.First_Pos_SideR);
    s << indent << "First_Neg_SideR: ";
    Printer<double>::stream(s, indent + "  ", v.First_Neg_SideR);
    s << indent << "First_Pos_YawR: ";
    Printer<double>::stream(s, indent + "  ", v.First_Pos_YawR);
    s << indent << "First_Neg_YawR: ";
    Printer<double>::stream(s, indent + "  ", v.First_Neg_YawR);
    s << indent << "First_Pos_XL: ";
    Printer<double>::stream(s, indent + "  ", v.First_Pos_XL);
    s << indent << "First_Neg_XL: ";
    Printer<double>::stream(s, indent + "  ", v.First_Neg_XL);
    s << indent << "First_Pos_SideL: ";
    Printer<double>::stream(s, indent + "  ", v.First_Pos_SideL);
    s << indent << "First_Neg_SideL: ";
    Printer<double>::stream(s, indent + "  ", v.First_Neg_SideL);
    s << indent << "First_Pos_YawL: ";
    Printer<double>::stream(s, indent + "  ", v.First_Pos_YawL);
    s << indent << "First_Neg_YawL: ";
    Printer<double>::stream(s, indent + "  ", v.First_Neg_YawL);
    s << indent << "First_Pos_SideR_SwingMinus: ";
    Printer<double>::stream(s, indent + "  ", v.First_Pos_SideR_SwingMinus);
    s << indent << "First_Neg_SideR_SwingMinus: ";
    Printer<double>::stream(s, indent + "  ", v.First_Neg_SideR_SwingMinus);
    s << indent << "First_Pos_SideL_SwingMinus: ";
    Printer<double>::stream(s, indent + "  ", v.First_Pos_SideL_SwingMinus);
    s << indent << "First_Neg_SideL_SwingMinus: ";
    Printer<double>::stream(s, indent + "  ", v.First_Neg_SideL_SwingMinus);
    s << indent << "First_min: ";
    Printer<int64_t>::stream(s, indent + "  ", v.First_min);
    s << indent << "First_max: ";
    Printer<int64_t>::stream(s, indent + "  ", v.First_max);
    s << indent << "Second_Pos_XR: ";
    Printer<double>::stream(s, indent + "  ", v.Second_Pos_XR);
    s << indent << "Second_Neg_XR: ";
    Printer<double>::stream(s, indent + "  ", v.Second_Neg_XR);
    s << indent << "Second_Pos_SideR: ";
    Printer<double>::stream(s, indent + "  ", v.Second_Pos_SideR);
    s << indent << "Second_Neg_SideR: ";
    Printer<double>::stream(s, indent + "  ", v.Second_Neg_SideR);
    s << indent << "Second_Pos_YawR: ";
    Printer<double>::stream(s, indent + "  ", v.Second_Pos_YawR);
    s << indent << "Second_Neg_YawR: ";
    Printer<double>::stream(s, indent + "  ", v.Second_Neg_YawR);
    s << indent << "Second_Pos_XL: ";
    Printer<double>::stream(s, indent + "  ", v.Second_Pos_XL);
    s << indent << "Second_Neg_XL: ";
    Printer<double>::stream(s, indent + "  ", v.Second_Neg_XL);
    s << indent << "Second_Pos_SideL: ";
    Printer<double>::stream(s, indent + "  ", v.Second_Pos_SideL);
    s << indent << "Second_Neg_SideL: ";
    Printer<double>::stream(s, indent + "  ", v.Second_Neg_SideL);
    s << indent << "Second_Pos_YawL: ";
    Printer<double>::stream(s, indent + "  ", v.Second_Pos_YawL);
    s << indent << "Second_Neg_YawL: ";
    Printer<double>::stream(s, indent + "  ", v.Second_Neg_YawL);
    s << indent << "Second_Pos_SideR_SwingMinus: ";
    Printer<double>::stream(s, indent + "  ", v.Second_Pos_SideR_SwingMinus);
    s << indent << "Second_Neg_SideR_SwingMinus: ";
    Printer<double>::stream(s, indent + "  ", v.Second_Neg_SideR_SwingMinus);
    s << indent << "Second_Pos_SideL_SwingMinus: ";
    Printer<double>::stream(s, indent + "  ", v.Second_Pos_SideL_SwingMinus);
    s << indent << "Second_Neg_SideL_SwingMinus: ";
    Printer<double>::stream(s, indent + "  ", v.Second_Neg_SideL_SwingMinus);
    s << indent << "Second_min: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Second_min);
    s << indent << "Second_max: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Second_max);
    s << indent << "Third_Pos_XR: ";
    Printer<double>::stream(s, indent + "  ", v.Third_Pos_XR);
    s << indent << "Third_Neg_XR: ";
    Printer<double>::stream(s, indent + "  ", v.Third_Neg_XR);
    s << indent << "Third_Pos_SideR: ";
    Printer<double>::stream(s, indent + "  ", v.Third_Pos_SideR);
    s << indent << "Third_Neg_SideR: ";
    Printer<double>::stream(s, indent + "  ", v.Third_Neg_SideR);
    s << indent << "Third_Pos_YawR: ";
    Printer<double>::stream(s, indent + "  ", v.Third_Pos_YawR);
    s << indent << "Third_Neg_YawR: ";
    Printer<double>::stream(s, indent + "  ", v.Third_Neg_YawR);
    s << indent << "Third_Pos_XL: ";
    Printer<double>::stream(s, indent + "  ", v.Third_Pos_XL);
    s << indent << "Third_Neg_XL: ";
    Printer<double>::stream(s, indent + "  ", v.Third_Neg_XL);
    s << indent << "Third_Pos_SideL: ";
    Printer<double>::stream(s, indent + "  ", v.Third_Pos_SideL);
    s << indent << "Third_Neg_SideL: ";
    Printer<double>::stream(s, indent + "  ", v.Third_Neg_SideL);
    s << indent << "Third_Pos_YawL: ";
    Printer<double>::stream(s, indent + "  ", v.Third_Pos_YawL);
    s << indent << "Third_Neg_YawL: ";
    Printer<double>::stream(s, indent + "  ", v.Third_Neg_YawL);
    s << indent << "Third_Pos_SideR_SwingMinus: ";
    Printer<double>::stream(s, indent + "  ", v.Third_Pos_SideR_SwingMinus);
    s << indent << "Third_Neg_SideR_SwingMinus: ";
    Printer<double>::stream(s, indent + "  ", v.Third_Neg_SideR_SwingMinus);
    s << indent << "Third_Pos_SideL_SwingMinus: ";
    Printer<double>::stream(s, indent + "  ", v.Third_Pos_SideL_SwingMinus);
    s << indent << "Third_Neg_SideL_SwingMinus: ";
    Printer<double>::stream(s, indent + "  ", v.Third_Neg_SideL_SwingMinus);
    s << indent << "Third_min: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Third_min);
    s << indent << "Third_max: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Third_max);
    s << indent << "Fourth_Pos_XR: ";
    Printer<double>::stream(s, indent + "  ", v.Fourth_Pos_XR);
    s << indent << "Fourth_Neg_XR: ";
    Printer<double>::stream(s, indent + "  ", v.Fourth_Neg_XR);
    s << indent << "Fourth_Pos_SideR: ";
    Printer<double>::stream(s, indent + "  ", v.Fourth_Pos_SideR);
    s << indent << "Fourth_Neg_SideR: ";
    Printer<double>::stream(s, indent + "  ", v.Fourth_Neg_SideR);
    s << indent << "Fourth_Pos_YawR: ";
    Printer<double>::stream(s, indent + "  ", v.Fourth_Pos_YawR);
    s << indent << "Fourth_Neg_YawR: ";
    Printer<double>::stream(s, indent + "  ", v.Fourth_Neg_YawR);
    s << indent << "Fourth_Pos_XL: ";
    Printer<double>::stream(s, indent + "  ", v.Fourth_Pos_XL);
    s << indent << "Fourth_Neg_XL: ";
    Printer<double>::stream(s, indent + "  ", v.Fourth_Neg_XL);
    s << indent << "Fourth_Pos_SideL: ";
    Printer<double>::stream(s, indent + "  ", v.Fourth_Pos_SideL);
    s << indent << "Fourth_Neg_SideL: ";
    Printer<double>::stream(s, indent + "  ", v.Fourth_Neg_SideL);
    s << indent << "Fourth_Pos_YawL: ";
    Printer<double>::stream(s, indent + "  ", v.Fourth_Pos_YawL);
    s << indent << "Fourth_Neg_YawL: ";
    Printer<double>::stream(s, indent + "  ", v.Fourth_Neg_YawL);
    s << indent << "Fourth_Pos_SideR_SwingMinus: ";
    Printer<double>::stream(s, indent + "  ", v.Fourth_Pos_SideR_SwingMinus);
    s << indent << "Fourth_Neg_SideR_SwingMinus: ";
    Printer<double>::stream(s, indent + "  ", v.Fourth_Neg_SideR_SwingMinus);
    s << indent << "Fourth_Pos_SideL_SwingMinus: ";
    Printer<double>::stream(s, indent + "  ", v.Fourth_Pos_SideL_SwingMinus);
    s << indent << "Fourth_Neg_SideL_SwingMinus: ";
    Printer<double>::stream(s, indent + "  ", v.Fourth_Neg_SideL_SwingMinus);
    s << indent << "Fourth_min: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Fourth_min);
    s << indent << "Fourth_max: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Fourth_max);
    s << indent << "Landing_Time_Control_flag: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Landing_Time_Control_flag);
    s << indent << "Control_System_flag: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Control_System_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_TUNE2WALK_H
