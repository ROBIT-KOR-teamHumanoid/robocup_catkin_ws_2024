// Generated by gencpp from file msg_generate/angle2.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_ANGLE2_H
#define MSG_GENERATE_MESSAGE_ANGLE2_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct angle2_
{
  typedef angle2_<ContainerAllocator> Type;

  angle2_()
    : ang_r_0(0.0)
    , ang_r_1(0.0)
    , ang_r_2(0.0)
    , ang_r_3(0.0)
    , ang_r_4(0.0)
    , ang_r_5(0.0)
    , ang_l_0(0.0)
    , ang_l_1(0.0)
    , ang_l_2(0.0)
    , ang_l_3(0.0)
    , ang_l_4(0.0)
    , ang_l_5(0.0)  {
    }
  angle2_(const ContainerAllocator& _alloc)
    : ang_r_0(0.0)
    , ang_r_1(0.0)
    , ang_r_2(0.0)
    , ang_r_3(0.0)
    , ang_r_4(0.0)
    , ang_r_5(0.0)
    , ang_l_0(0.0)
    , ang_l_1(0.0)
    , ang_l_2(0.0)
    , ang_l_3(0.0)
    , ang_l_4(0.0)
    , ang_l_5(0.0)  {
  (void)_alloc;
    }



   typedef double _ang_r_0_type;
  _ang_r_0_type ang_r_0;

   typedef double _ang_r_1_type;
  _ang_r_1_type ang_r_1;

   typedef double _ang_r_2_type;
  _ang_r_2_type ang_r_2;

   typedef double _ang_r_3_type;
  _ang_r_3_type ang_r_3;

   typedef double _ang_r_4_type;
  _ang_r_4_type ang_r_4;

   typedef double _ang_r_5_type;
  _ang_r_5_type ang_r_5;

   typedef double _ang_l_0_type;
  _ang_l_0_type ang_l_0;

   typedef double _ang_l_1_type;
  _ang_l_1_type ang_l_1;

   typedef double _ang_l_2_type;
  _ang_l_2_type ang_l_2;

   typedef double _ang_l_3_type;
  _ang_l_3_type ang_l_3;

   typedef double _ang_l_4_type;
  _ang_l_4_type ang_l_4;

   typedef double _ang_l_5_type;
  _ang_l_5_type ang_l_5;





  typedef boost::shared_ptr< ::msg_generate::angle2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::angle2_<ContainerAllocator> const> ConstPtr;

}; // struct angle2_

typedef ::msg_generate::angle2_<std::allocator<void> > angle2;

typedef boost::shared_ptr< ::msg_generate::angle2 > angle2Ptr;
typedef boost::shared_ptr< ::msg_generate::angle2 const> angle2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::angle2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::angle2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::angle2_<ContainerAllocator1> & lhs, const ::msg_generate::angle2_<ContainerAllocator2> & rhs)
{
  return lhs.ang_r_0 == rhs.ang_r_0 &&
    lhs.ang_r_1 == rhs.ang_r_1 &&
    lhs.ang_r_2 == rhs.ang_r_2 &&
    lhs.ang_r_3 == rhs.ang_r_3 &&
    lhs.ang_r_4 == rhs.ang_r_4 &&
    lhs.ang_r_5 == rhs.ang_r_5 &&
    lhs.ang_l_0 == rhs.ang_l_0 &&
    lhs.ang_l_1 == rhs.ang_l_1 &&
    lhs.ang_l_2 == rhs.ang_l_2 &&
    lhs.ang_l_3 == rhs.ang_l_3 &&
    lhs.ang_l_4 == rhs.ang_l_4 &&
    lhs.ang_l_5 == rhs.ang_l_5;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::angle2_<ContainerAllocator1> & lhs, const ::msg_generate::angle2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::angle2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::angle2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::angle2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::angle2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::angle2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::angle2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::angle2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fb3bce9c774e8adb8b04618b1b2cb9fc";
  }

  static const char* value(const ::msg_generate::angle2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfb3bce9c774e8adbULL;
  static const uint64_t static_value2 = 0x8b04618b1b2cb9fcULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::angle2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/angle2";
  }

  static const char* value(const ::msg_generate::angle2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::angle2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 ang_r_0\n"
"float64 ang_r_1\n"
"float64 ang_r_2\n"
"float64 ang_r_3\n"
"float64 ang_r_4\n"
"float64 ang_r_5\n"
"float64 ang_l_0\n"
"float64 ang_l_1\n"
"float64 ang_l_2\n"
"float64 ang_l_3\n"
"float64 ang_l_4\n"
"float64 ang_l_5\n"
;
  }

  static const char* value(const ::msg_generate::angle2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::angle2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ang_r_0);
      stream.next(m.ang_r_1);
      stream.next(m.ang_r_2);
      stream.next(m.ang_r_3);
      stream.next(m.ang_r_4);
      stream.next(m.ang_r_5);
      stream.next(m.ang_l_0);
      stream.next(m.ang_l_1);
      stream.next(m.ang_l_2);
      stream.next(m.ang_l_3);
      stream.next(m.ang_l_4);
      stream.next(m.ang_l_5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct angle2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::angle2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::angle2_<ContainerAllocator>& v)
  {
    s << indent << "ang_r_0: ";
    Printer<double>::stream(s, indent + "  ", v.ang_r_0);
    s << indent << "ang_r_1: ";
    Printer<double>::stream(s, indent + "  ", v.ang_r_1);
    s << indent << "ang_r_2: ";
    Printer<double>::stream(s, indent + "  ", v.ang_r_2);
    s << indent << "ang_r_3: ";
    Printer<double>::stream(s, indent + "  ", v.ang_r_3);
    s << indent << "ang_r_4: ";
    Printer<double>::stream(s, indent + "  ", v.ang_r_4);
    s << indent << "ang_r_5: ";
    Printer<double>::stream(s, indent + "  ", v.ang_r_5);
    s << indent << "ang_l_0: ";
    Printer<double>::stream(s, indent + "  ", v.ang_l_0);
    s << indent << "ang_l_1: ";
    Printer<double>::stream(s, indent + "  ", v.ang_l_1);
    s << indent << "ang_l_2: ";
    Printer<double>::stream(s, indent + "  ", v.ang_l_2);
    s << indent << "ang_l_3: ";
    Printer<double>::stream(s, indent + "  ", v.ang_l_3);
    s << indent << "ang_l_4: ";
    Printer<double>::stream(s, indent + "  ", v.ang_l_4);
    s << indent << "ang_l_5: ";
    Printer<double>::stream(s, indent + "  ", v.ang_l_5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_ANGLE2_H
