// Generated by gencpp from file msg_generate/HSV.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_HSV_H
#define MSG_GENERATE_MESSAGE_HSV_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct HSV_
{
  typedef HSV_<ContainerAllocator> Type;

  HSV_()
    : red1_dis(0.0)
    , red1_the(0.0)
    , red2_dis(0.0)
    , red2_the(0.0)
    , blue1_dis(0.0)
    , blue1_the(0.0)
    , blue2_dis(0.0)
    , blue2_the(0.0)  {
    }
  HSV_(const ContainerAllocator& _alloc)
    : red1_dis(0.0)
    , red1_the(0.0)
    , red2_dis(0.0)
    , red2_the(0.0)
    , blue1_dis(0.0)
    , blue1_the(0.0)
    , blue2_dis(0.0)
    , blue2_the(0.0)  {
  (void)_alloc;
    }



   typedef double _red1_dis_type;
  _red1_dis_type red1_dis;

   typedef double _red1_the_type;
  _red1_the_type red1_the;

   typedef double _red2_dis_type;
  _red2_dis_type red2_dis;

   typedef double _red2_the_type;
  _red2_the_type red2_the;

   typedef double _blue1_dis_type;
  _blue1_dis_type blue1_dis;

   typedef double _blue1_the_type;
  _blue1_the_type blue1_the;

   typedef double _blue2_dis_type;
  _blue2_dis_type blue2_dis;

   typedef double _blue2_the_type;
  _blue2_the_type blue2_the;





  typedef boost::shared_ptr< ::msg_generate::HSV_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::HSV_<ContainerAllocator> const> ConstPtr;

}; // struct HSV_

typedef ::msg_generate::HSV_<std::allocator<void> > HSV;

typedef boost::shared_ptr< ::msg_generate::HSV > HSVPtr;
typedef boost::shared_ptr< ::msg_generate::HSV const> HSVConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::HSV_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::HSV_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::HSV_<ContainerAllocator1> & lhs, const ::msg_generate::HSV_<ContainerAllocator2> & rhs)
{
  return lhs.red1_dis == rhs.red1_dis &&
    lhs.red1_the == rhs.red1_the &&
    lhs.red2_dis == rhs.red2_dis &&
    lhs.red2_the == rhs.red2_the &&
    lhs.blue1_dis == rhs.blue1_dis &&
    lhs.blue1_the == rhs.blue1_the &&
    lhs.blue2_dis == rhs.blue2_dis &&
    lhs.blue2_the == rhs.blue2_the;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::HSV_<ContainerAllocator1> & lhs, const ::msg_generate::HSV_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::HSV_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::HSV_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::HSV_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::HSV_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::HSV_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::HSV_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::HSV_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5e59624369bde37201fa1c7dfe803e91";
  }

  static const char* value(const ::msg_generate::HSV_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5e59624369bde372ULL;
  static const uint64_t static_value2 = 0x01fa1c7dfe803e91ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::HSV_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/HSV";
  }

  static const char* value(const ::msg_generate::HSV_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::HSV_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 red1_dis\n"
"float64 red1_the\n"
"float64 red2_dis\n"
"float64 red2_the\n"
"float64 blue1_dis\n"
"float64 blue1_the\n"
"float64 blue2_dis\n"
"float64 blue2_the\n"
"\n"
;
  }

  static const char* value(const ::msg_generate::HSV_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::HSV_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.red1_dis);
      stream.next(m.red1_the);
      stream.next(m.red2_dis);
      stream.next(m.red2_the);
      stream.next(m.blue1_dis);
      stream.next(m.blue1_the);
      stream.next(m.blue2_dis);
      stream.next(m.blue2_the);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HSV_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::HSV_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::HSV_<ContainerAllocator>& v)
  {
    s << indent << "red1_dis: ";
    Printer<double>::stream(s, indent + "  ", v.red1_dis);
    s << indent << "red1_the: ";
    Printer<double>::stream(s, indent + "  ", v.red1_the);
    s << indent << "red2_dis: ";
    Printer<double>::stream(s, indent + "  ", v.red2_dis);
    s << indent << "red2_the: ";
    Printer<double>::stream(s, indent + "  ", v.red2_the);
    s << indent << "blue1_dis: ";
    Printer<double>::stream(s, indent + "  ", v.blue1_dis);
    s << indent << "blue1_the: ";
    Printer<double>::stream(s, indent + "  ", v.blue1_the);
    s << indent << "blue2_dis: ";
    Printer<double>::stream(s, indent + "  ", v.blue2_dis);
    s << indent << "blue2_the: ";
    Printer<double>::stream(s, indent + "  ", v.blue2_the);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_HSV_H
