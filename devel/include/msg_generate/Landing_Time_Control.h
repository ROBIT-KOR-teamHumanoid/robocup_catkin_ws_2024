// Generated by gencpp from file msg_generate/Landing_Time_Control.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_LANDING_TIME_CONTROL_H
#define MSG_GENERATE_MESSAGE_LANDING_TIME_CONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct Landing_Time_Control_
{
  typedef Landing_Time_Control_<ContainerAllocator> Type;

  Landing_Time_Control_()
    : Entire_Time(0.0)
    , Swing_Gain_L(0.0)
    , Swing_Gain_R(0.0)
    , Warning(0)
    , Safe(0)
    , Landing_Time_L(0.0)
    , Landing_Time_R(0.0)
    , Landing_Error_L(0.0)
    , Landing_Error_R(0.0)  {
    }
  Landing_Time_Control_(const ContainerAllocator& _alloc)
    : Entire_Time(0.0)
    , Swing_Gain_L(0.0)
    , Swing_Gain_R(0.0)
    , Warning(0)
    , Safe(0)
    , Landing_Time_L(0.0)
    , Landing_Time_R(0.0)
    , Landing_Error_L(0.0)
    , Landing_Error_R(0.0)  {
  (void)_alloc;
    }



   typedef double _Entire_Time_type;
  _Entire_Time_type Entire_Time;

   typedef double _Swing_Gain_L_type;
  _Swing_Gain_L_type Swing_Gain_L;

   typedef double _Swing_Gain_R_type;
  _Swing_Gain_R_type Swing_Gain_R;

   typedef int64_t _Warning_type;
  _Warning_type Warning;

   typedef int64_t _Safe_type;
  _Safe_type Safe;

   typedef double _Landing_Time_L_type;
  _Landing_Time_L_type Landing_Time_L;

   typedef double _Landing_Time_R_type;
  _Landing_Time_R_type Landing_Time_R;

   typedef double _Landing_Error_L_type;
  _Landing_Error_L_type Landing_Error_L;

   typedef double _Landing_Error_R_type;
  _Landing_Error_R_type Landing_Error_R;





  typedef boost::shared_ptr< ::msg_generate::Landing_Time_Control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::Landing_Time_Control_<ContainerAllocator> const> ConstPtr;

}; // struct Landing_Time_Control_

typedef ::msg_generate::Landing_Time_Control_<std::allocator<void> > Landing_Time_Control;

typedef boost::shared_ptr< ::msg_generate::Landing_Time_Control > Landing_Time_ControlPtr;
typedef boost::shared_ptr< ::msg_generate::Landing_Time_Control const> Landing_Time_ControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::Landing_Time_Control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::Landing_Time_Control_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::Landing_Time_Control_<ContainerAllocator1> & lhs, const ::msg_generate::Landing_Time_Control_<ContainerAllocator2> & rhs)
{
  return lhs.Entire_Time == rhs.Entire_Time &&
    lhs.Swing_Gain_L == rhs.Swing_Gain_L &&
    lhs.Swing_Gain_R == rhs.Swing_Gain_R &&
    lhs.Warning == rhs.Warning &&
    lhs.Safe == rhs.Safe &&
    lhs.Landing_Time_L == rhs.Landing_Time_L &&
    lhs.Landing_Time_R == rhs.Landing_Time_R &&
    lhs.Landing_Error_L == rhs.Landing_Error_L &&
    lhs.Landing_Error_R == rhs.Landing_Error_R;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::Landing_Time_Control_<ContainerAllocator1> & lhs, const ::msg_generate::Landing_Time_Control_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::Landing_Time_Control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::Landing_Time_Control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::Landing_Time_Control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::Landing_Time_Control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::Landing_Time_Control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::Landing_Time_Control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::Landing_Time_Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0231e6c7c4e3ed975ff22fc97b613ccc";
  }

  static const char* value(const ::msg_generate::Landing_Time_Control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0231e6c7c4e3ed97ULL;
  static const uint64_t static_value2 = 0x5ff22fc97b613cccULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::Landing_Time_Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/Landing_Time_Control";
  }

  static const char* value(const ::msg_generate::Landing_Time_Control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::Landing_Time_Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 Entire_Time\n"
"float64 Swing_Gain_L\n"
"float64 Swing_Gain_R\n"
"int64 Warning\n"
"int64 Safe\n"
"\n"
"float64 Landing_Time_L\n"
"float64 Landing_Time_R\n"
"\n"
"float64 Landing_Error_L\n"
"float64 Landing_Error_R\n"
"\n"
;
  }

  static const char* value(const ::msg_generate::Landing_Time_Control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::Landing_Time_Control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Entire_Time);
      stream.next(m.Swing_Gain_L);
      stream.next(m.Swing_Gain_R);
      stream.next(m.Warning);
      stream.next(m.Safe);
      stream.next(m.Landing_Time_L);
      stream.next(m.Landing_Time_R);
      stream.next(m.Landing_Error_L);
      stream.next(m.Landing_Error_R);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Landing_Time_Control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::Landing_Time_Control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::Landing_Time_Control_<ContainerAllocator>& v)
  {
    s << indent << "Entire_Time: ";
    Printer<double>::stream(s, indent + "  ", v.Entire_Time);
    s << indent << "Swing_Gain_L: ";
    Printer<double>::stream(s, indent + "  ", v.Swing_Gain_L);
    s << indent << "Swing_Gain_R: ";
    Printer<double>::stream(s, indent + "  ", v.Swing_Gain_R);
    s << indent << "Warning: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Warning);
    s << indent << "Safe: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Safe);
    s << indent << "Landing_Time_L: ";
    Printer<double>::stream(s, indent + "  ", v.Landing_Time_L);
    s << indent << "Landing_Time_R: ";
    Printer<double>::stream(s, indent + "  ", v.Landing_Time_R);
    s << indent << "Landing_Error_L: ";
    Printer<double>::stream(s, indent + "  ", v.Landing_Error_L);
    s << indent << "Landing_Error_R: ";
    Printer<double>::stream(s, indent + "  ", v.Landing_Error_R);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_LANDING_TIME_CONTROL_H
