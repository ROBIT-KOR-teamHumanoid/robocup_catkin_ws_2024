// Generated by gencpp from file msg_generate/position_msg.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_POSITION_MSG_H
#define MSG_GENERATE_MESSAGE_POSITION_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct position_msg_
{
  typedef position_msg_<ContainerAllocator> Type;

  position_msg_()
    : robot_area(0)
    , ball_area(0)
    , yaw(0)  {
    }
  position_msg_(const ContainerAllocator& _alloc)
    : robot_area(0)
    , ball_area(0)
    , yaw(0)  {
  (void)_alloc;
    }



   typedef int64_t _robot_area_type;
  _robot_area_type robot_area;

   typedef int64_t _ball_area_type;
  _ball_area_type ball_area;

   typedef int64_t _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::msg_generate::position_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::position_msg_<ContainerAllocator> const> ConstPtr;

}; // struct position_msg_

typedef ::msg_generate::position_msg_<std::allocator<void> > position_msg;

typedef boost::shared_ptr< ::msg_generate::position_msg > position_msgPtr;
typedef boost::shared_ptr< ::msg_generate::position_msg const> position_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::position_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::position_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::position_msg_<ContainerAllocator1> & lhs, const ::msg_generate::position_msg_<ContainerAllocator2> & rhs)
{
  return lhs.robot_area == rhs.robot_area &&
    lhs.ball_area == rhs.ball_area &&
    lhs.yaw == rhs.yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::position_msg_<ContainerAllocator1> & lhs, const ::msg_generate::position_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::position_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::position_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::position_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::position_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::position_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::position_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::position_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "592ace443c869809edf4b9d783f51103";
  }

  static const char* value(const ::msg_generate::position_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x592ace443c869809ULL;
  static const uint64_t static_value2 = 0xedf4b9d783f51103ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::position_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/position_msg";
  }

  static const char* value(const ::msg_generate::position_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::position_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 robot_area\n"
"int64 ball_area\n"
"int64 yaw\n"
"\n"
;
  }

  static const char* value(const ::msg_generate::position_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::position_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_area);
      stream.next(m.ball_area);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct position_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::position_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::position_msg_<ContainerAllocator>& v)
  {
    s << indent << "robot_area: ";
    Printer<int64_t>::stream(s, indent + "  ", v.robot_area);
    s << indent << "ball_area: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ball_area);
    s << indent << "yaw: ";
    Printer<int64_t>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_POSITION_MSG_H
