// Generated by gencpp from file msg_generate/Local_msg.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_LOCAL_MSG_H
#define MSG_GENERATE_MESSAGE_LOCAL_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct Local_msg_
{
  typedef Local_msg_<ContainerAllocator> Type;

  Local_msg_()
    : Id(0.0)
    , dist(0.0)
    , theta(0.0)  {
    }
  Local_msg_(const ContainerAllocator& _alloc)
    : Id(0.0)
    , dist(0.0)
    , theta(0.0)  {
  (void)_alloc;
    }



   typedef double _Id_type;
  _Id_type Id;

   typedef double _dist_type;
  _dist_type dist;

   typedef double _theta_type;
  _theta_type theta;





  typedef boost::shared_ptr< ::msg_generate::Local_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::Local_msg_<ContainerAllocator> const> ConstPtr;

}; // struct Local_msg_

typedef ::msg_generate::Local_msg_<std::allocator<void> > Local_msg;

typedef boost::shared_ptr< ::msg_generate::Local_msg > Local_msgPtr;
typedef boost::shared_ptr< ::msg_generate::Local_msg const> Local_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::Local_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::Local_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::Local_msg_<ContainerAllocator1> & lhs, const ::msg_generate::Local_msg_<ContainerAllocator2> & rhs)
{
  return lhs.Id == rhs.Id &&
    lhs.dist == rhs.dist &&
    lhs.theta == rhs.theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::Local_msg_<ContainerAllocator1> & lhs, const ::msg_generate::Local_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::Local_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::Local_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::Local_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::Local_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::Local_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::Local_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::Local_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4de6e3c5b2d79698e32a255421b69933";
  }

  static const char* value(const ::msg_generate::Local_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4de6e3c5b2d79698ULL;
  static const uint64_t static_value2 = 0xe32a255421b69933ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::Local_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/Local_msg";
  }

  static const char* value(const ::msg_generate::Local_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::Local_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 Id\n"
"float64 dist\n"
"float64 theta\n"
"\n"
;
  }

  static const char* value(const ::msg_generate::Local_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::Local_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Id);
      stream.next(m.dist);
      stream.next(m.theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Local_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::Local_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::Local_msg_<ContainerAllocator>& v)
  {
    s << indent << "Id: ";
    Printer<double>::stream(s, indent + "  ", v.Id);
    s << indent << "dist: ";
    Printer<double>::stream(s, indent + "  ", v.dist);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_LOCAL_MSG_H
