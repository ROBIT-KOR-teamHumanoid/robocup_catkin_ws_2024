// Generated by gencpp from file msg_generate/udp_order.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_UDP_ORDER_H
#define MSG_GENERATE_MESSAGE_UDP_ORDER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct udp_order_
{
  typedef udp_order_<ContainerAllocator> Type;

  udp_order_()
    : order(0)  {
    }
  udp_order_(const ContainerAllocator& _alloc)
    : order(0)  {
  (void)_alloc;
    }



   typedef int16_t _order_type;
  _order_type order;





  typedef boost::shared_ptr< ::msg_generate::udp_order_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::udp_order_<ContainerAllocator> const> ConstPtr;

}; // struct udp_order_

typedef ::msg_generate::udp_order_<std::allocator<void> > udp_order;

typedef boost::shared_ptr< ::msg_generate::udp_order > udp_orderPtr;
typedef boost::shared_ptr< ::msg_generate::udp_order const> udp_orderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::udp_order_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::udp_order_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::udp_order_<ContainerAllocator1> & lhs, const ::msg_generate::udp_order_<ContainerAllocator2> & rhs)
{
  return lhs.order == rhs.order;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::udp_order_<ContainerAllocator1> & lhs, const ::msg_generate::udp_order_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::udp_order_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::udp_order_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::udp_order_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::udp_order_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::udp_order_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::udp_order_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::udp_order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2966e63ad91c66f88bbe7ef4becb02eb";
  }

  static const char* value(const ::msg_generate::udp_order_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2966e63ad91c66f8ULL;
  static const uint64_t static_value2 = 0x8bbe7ef4becb02ebULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::udp_order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/udp_order";
  }

  static const char* value(const ::msg_generate::udp_order_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::udp_order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 order\n"
;
  }

  static const char* value(const ::msg_generate::udp_order_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::udp_order_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.order);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct udp_order_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::udp_order_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::udp_order_<ContainerAllocator>& v)
  {
    s << indent << "order: ";
    Printer<int16_t>::stream(s, indent + "  ", v.order);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_UDP_ORDER_H
