// Generated by gencpp from file msg_generate/zmp_msg.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_ZMP_MSG_H
#define MSG_GENERATE_MESSAGE_ZMP_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct zmp_msg_
{
  typedef zmp_msg_<ContainerAllocator> Type;

  zmp_msg_()
    : Left_X_zmp(0.0)
    , Left_Y_zmp(0.0)
    , Right_X_zmp(0.0)
    , Right_Y_zmp(0.0)
    , Total_X_zmp(0.0)
    , Total_Y_zmp(0.0)
    , Left_Foot(false)
    , Right_Foot(false)
    , Both_Feet(false)  {
    }
  zmp_msg_(const ContainerAllocator& _alloc)
    : Left_X_zmp(0.0)
    , Left_Y_zmp(0.0)
    , Right_X_zmp(0.0)
    , Right_Y_zmp(0.0)
    , Total_X_zmp(0.0)
    , Total_Y_zmp(0.0)
    , Left_Foot(false)
    , Right_Foot(false)
    , Both_Feet(false)  {
  (void)_alloc;
    }



   typedef double _Left_X_zmp_type;
  _Left_X_zmp_type Left_X_zmp;

   typedef double _Left_Y_zmp_type;
  _Left_Y_zmp_type Left_Y_zmp;

   typedef double _Right_X_zmp_type;
  _Right_X_zmp_type Right_X_zmp;

   typedef double _Right_Y_zmp_type;
  _Right_Y_zmp_type Right_Y_zmp;

   typedef double _Total_X_zmp_type;
  _Total_X_zmp_type Total_X_zmp;

   typedef double _Total_Y_zmp_type;
  _Total_Y_zmp_type Total_Y_zmp;

   typedef uint8_t _Left_Foot_type;
  _Left_Foot_type Left_Foot;

   typedef uint8_t _Right_Foot_type;
  _Right_Foot_type Right_Foot;

   typedef uint8_t _Both_Feet_type;
  _Both_Feet_type Both_Feet;





  typedef boost::shared_ptr< ::msg_generate::zmp_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::zmp_msg_<ContainerAllocator> const> ConstPtr;

}; // struct zmp_msg_

typedef ::msg_generate::zmp_msg_<std::allocator<void> > zmp_msg;

typedef boost::shared_ptr< ::msg_generate::zmp_msg > zmp_msgPtr;
typedef boost::shared_ptr< ::msg_generate::zmp_msg const> zmp_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::zmp_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::zmp_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::zmp_msg_<ContainerAllocator1> & lhs, const ::msg_generate::zmp_msg_<ContainerAllocator2> & rhs)
{
  return lhs.Left_X_zmp == rhs.Left_X_zmp &&
    lhs.Left_Y_zmp == rhs.Left_Y_zmp &&
    lhs.Right_X_zmp == rhs.Right_X_zmp &&
    lhs.Right_Y_zmp == rhs.Right_Y_zmp &&
    lhs.Total_X_zmp == rhs.Total_X_zmp &&
    lhs.Total_Y_zmp == rhs.Total_Y_zmp &&
    lhs.Left_Foot == rhs.Left_Foot &&
    lhs.Right_Foot == rhs.Right_Foot &&
    lhs.Both_Feet == rhs.Both_Feet;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::zmp_msg_<ContainerAllocator1> & lhs, const ::msg_generate::zmp_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::zmp_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::zmp_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::zmp_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::zmp_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::zmp_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::zmp_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::zmp_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b6dd8aae25ccfd762514817678c236ea";
  }

  static const char* value(const ::msg_generate::zmp_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb6dd8aae25ccfd76ULL;
  static const uint64_t static_value2 = 0x2514817678c236eaULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::zmp_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/zmp_msg";
  }

  static const char* value(const ::msg_generate::zmp_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::zmp_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 Left_X_zmp\n"
"float64 Left_Y_zmp\n"
"float64 Right_X_zmp\n"
"float64 Right_Y_zmp\n"
"float64 Total_X_zmp\n"
"float64 Total_Y_zmp\n"
"bool Left_Foot\n"
"bool Right_Foot\n"
"bool Both_Feet\n"
;
  }

  static const char* value(const ::msg_generate::zmp_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::zmp_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Left_X_zmp);
      stream.next(m.Left_Y_zmp);
      stream.next(m.Right_X_zmp);
      stream.next(m.Right_Y_zmp);
      stream.next(m.Total_X_zmp);
      stream.next(m.Total_Y_zmp);
      stream.next(m.Left_Foot);
      stream.next(m.Right_Foot);
      stream.next(m.Both_Feet);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct zmp_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::zmp_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::zmp_msg_<ContainerAllocator>& v)
  {
    s << indent << "Left_X_zmp: ";
    Printer<double>::stream(s, indent + "  ", v.Left_X_zmp);
    s << indent << "Left_Y_zmp: ";
    Printer<double>::stream(s, indent + "  ", v.Left_Y_zmp);
    s << indent << "Right_X_zmp: ";
    Printer<double>::stream(s, indent + "  ", v.Right_X_zmp);
    s << indent << "Right_Y_zmp: ";
    Printer<double>::stream(s, indent + "  ", v.Right_Y_zmp);
    s << indent << "Total_X_zmp: ";
    Printer<double>::stream(s, indent + "  ", v.Total_X_zmp);
    s << indent << "Total_Y_zmp: ";
    Printer<double>::stream(s, indent + "  ", v.Total_Y_zmp);
    s << indent << "Left_Foot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Left_Foot);
    s << indent << "Right_Foot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Right_Foot);
    s << indent << "Both_Feet: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Both_Feet);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_ZMP_MSG_H
