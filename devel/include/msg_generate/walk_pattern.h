// Generated by gencpp from file msg_generate/walk_pattern.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_WALK_PATTERN_H
#define MSG_GENERATE_MESSAGE_WALK_PATTERN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct walk_pattern_
{
  typedef walk_pattern_<ContainerAllocator> Type;

  walk_pattern_()
    : xlpattern(0.0)
    , ylpattern(0.0)
    , zlpattern(0.0)
    , slpattern(0.0)
    , tlpattern(0.0)
    , xrpattern(0.0)
    , yrpattern(0.0)
    , zrpattern(0.0)
    , srpattern(0.0)
    , trpattern(0.0)  {
    }
  walk_pattern_(const ContainerAllocator& _alloc)
    : xlpattern(0.0)
    , ylpattern(0.0)
    , zlpattern(0.0)
    , slpattern(0.0)
    , tlpattern(0.0)
    , xrpattern(0.0)
    , yrpattern(0.0)
    , zrpattern(0.0)
    , srpattern(0.0)
    , trpattern(0.0)  {
  (void)_alloc;
    }



   typedef double _xlpattern_type;
  _xlpattern_type xlpattern;

   typedef double _ylpattern_type;
  _ylpattern_type ylpattern;

   typedef double _zlpattern_type;
  _zlpattern_type zlpattern;

   typedef double _slpattern_type;
  _slpattern_type slpattern;

   typedef double _tlpattern_type;
  _tlpattern_type tlpattern;

   typedef double _xrpattern_type;
  _xrpattern_type xrpattern;

   typedef double _yrpattern_type;
  _yrpattern_type yrpattern;

   typedef double _zrpattern_type;
  _zrpattern_type zrpattern;

   typedef double _srpattern_type;
  _srpattern_type srpattern;

   typedef double _trpattern_type;
  _trpattern_type trpattern;





  typedef boost::shared_ptr< ::msg_generate::walk_pattern_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::walk_pattern_<ContainerAllocator> const> ConstPtr;

}; // struct walk_pattern_

typedef ::msg_generate::walk_pattern_<std::allocator<void> > walk_pattern;

typedef boost::shared_ptr< ::msg_generate::walk_pattern > walk_patternPtr;
typedef boost::shared_ptr< ::msg_generate::walk_pattern const> walk_patternConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::walk_pattern_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::walk_pattern_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::walk_pattern_<ContainerAllocator1> & lhs, const ::msg_generate::walk_pattern_<ContainerAllocator2> & rhs)
{
  return lhs.xlpattern == rhs.xlpattern &&
    lhs.ylpattern == rhs.ylpattern &&
    lhs.zlpattern == rhs.zlpattern &&
    lhs.slpattern == rhs.slpattern &&
    lhs.tlpattern == rhs.tlpattern &&
    lhs.xrpattern == rhs.xrpattern &&
    lhs.yrpattern == rhs.yrpattern &&
    lhs.zrpattern == rhs.zrpattern &&
    lhs.srpattern == rhs.srpattern &&
    lhs.trpattern == rhs.trpattern;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::walk_pattern_<ContainerAllocator1> & lhs, const ::msg_generate::walk_pattern_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::walk_pattern_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::walk_pattern_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::walk_pattern_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::walk_pattern_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::walk_pattern_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::walk_pattern_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::walk_pattern_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb4fe551ab158f80aba28048dfbba352";
  }

  static const char* value(const ::msg_generate::walk_pattern_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb4fe551ab158f80ULL;
  static const uint64_t static_value2 = 0xaba28048dfbba352ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::walk_pattern_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/walk_pattern";
  }

  static const char* value(const ::msg_generate::walk_pattern_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::walk_pattern_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 xlpattern\n"
"float64 ylpattern\n"
"float64 zlpattern\n"
"float64 slpattern\n"
"float64 tlpattern\n"
"float64 xrpattern\n"
"float64 yrpattern\n"
"float64 zrpattern\n"
"float64 srpattern\n"
"float64 trpattern\n"
;
  }

  static const char* value(const ::msg_generate::walk_pattern_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::walk_pattern_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xlpattern);
      stream.next(m.ylpattern);
      stream.next(m.zlpattern);
      stream.next(m.slpattern);
      stream.next(m.tlpattern);
      stream.next(m.xrpattern);
      stream.next(m.yrpattern);
      stream.next(m.zrpattern);
      stream.next(m.srpattern);
      stream.next(m.trpattern);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct walk_pattern_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::walk_pattern_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::walk_pattern_<ContainerAllocator>& v)
  {
    s << indent << "xlpattern: ";
    Printer<double>::stream(s, indent + "  ", v.xlpattern);
    s << indent << "ylpattern: ";
    Printer<double>::stream(s, indent + "  ", v.ylpattern);
    s << indent << "zlpattern: ";
    Printer<double>::stream(s, indent + "  ", v.zlpattern);
    s << indent << "slpattern: ";
    Printer<double>::stream(s, indent + "  ", v.slpattern);
    s << indent << "tlpattern: ";
    Printer<double>::stream(s, indent + "  ", v.tlpattern);
    s << indent << "xrpattern: ";
    Printer<double>::stream(s, indent + "  ", v.xrpattern);
    s << indent << "yrpattern: ";
    Printer<double>::stream(s, indent + "  ", v.yrpattern);
    s << indent << "zrpattern: ";
    Printer<double>::stream(s, indent + "  ", v.zrpattern);
    s << indent << "srpattern: ";
    Printer<double>::stream(s, indent + "  ", v.srpattern);
    s << indent << "trpattern: ";
    Printer<double>::stream(s, indent + "  ", v.trpattern);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_WALK_PATTERN_H
