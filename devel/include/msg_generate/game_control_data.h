// Generated by gencpp from file msg_generate/game_control_data.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_GAME_CONTROL_DATA_H
#define MSG_GENERATE_MESSAGE_GAME_CONTROL_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct game_control_data_
{
  typedef game_control_data_<ContainerAllocator> Type;

  game_control_data_()
    : robotNum(0)
    , position(0)
    , myTeam(0)
    , state(0)
    , mySide(0)
    , iskickoff(0)
    , readyTime(0)
    , penalty(0)
    , secondState(0)
    , secondInfo()  {
    }
  game_control_data_(const ContainerAllocator& _alloc)
    : robotNum(0)
    , position(0)
    , myTeam(0)
    , state(0)
    , mySide(0)
    , iskickoff(0)
    , readyTime(0)
    , penalty(0)
    , secondState(0)
    , secondInfo(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _robotNum_type;
  _robotNum_type robotNum;

   typedef int64_t _position_type;
  _position_type position;

   typedef int64_t _myTeam_type;
  _myTeam_type myTeam;

   typedef int64_t _state_type;
  _state_type state;

   typedef int64_t _mySide_type;
  _mySide_type mySide;

   typedef int64_t _iskickoff_type;
  _iskickoff_type iskickoff;

   typedef int64_t _readyTime_type;
  _readyTime_type readyTime;

   typedef int64_t _penalty_type;
  _penalty_type penalty;

   typedef int64_t _secondState_type;
  _secondState_type secondState;

   typedef std::vector<int64_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int64_t>> _secondInfo_type;
  _secondInfo_type secondInfo;





  typedef boost::shared_ptr< ::msg_generate::game_control_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::game_control_data_<ContainerAllocator> const> ConstPtr;

}; // struct game_control_data_

typedef ::msg_generate::game_control_data_<std::allocator<void> > game_control_data;

typedef boost::shared_ptr< ::msg_generate::game_control_data > game_control_dataPtr;
typedef boost::shared_ptr< ::msg_generate::game_control_data const> game_control_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::game_control_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::game_control_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::game_control_data_<ContainerAllocator1> & lhs, const ::msg_generate::game_control_data_<ContainerAllocator2> & rhs)
{
  return lhs.robotNum == rhs.robotNum &&
    lhs.position == rhs.position &&
    lhs.myTeam == rhs.myTeam &&
    lhs.state == rhs.state &&
    lhs.mySide == rhs.mySide &&
    lhs.iskickoff == rhs.iskickoff &&
    lhs.readyTime == rhs.readyTime &&
    lhs.penalty == rhs.penalty &&
    lhs.secondState == rhs.secondState &&
    lhs.secondInfo == rhs.secondInfo;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::game_control_data_<ContainerAllocator1> & lhs, const ::msg_generate::game_control_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::game_control_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::game_control_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::game_control_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::game_control_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::game_control_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::game_control_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::game_control_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d9766fbb6334c79351c86b83016bef8";
  }

  static const char* value(const ::msg_generate::game_control_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d9766fbb6334c79ULL;
  static const uint64_t static_value2 = 0x351c86b83016bef8ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::game_control_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/game_control_data";
  }

  static const char* value(const ::msg_generate::game_control_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::game_control_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 robotNum\n"
"int64 position\n"
"int64 myTeam\n"
"\n"
"int64 state\n"
"int64 mySide\n"
"int64 iskickoff\n"
"int64 readyTime\n"
"int64 penalty\n"
"int64 secondState\n"
"int64[] secondInfo\n"
;
  }

  static const char* value(const ::msg_generate::game_control_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::game_control_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robotNum);
      stream.next(m.position);
      stream.next(m.myTeam);
      stream.next(m.state);
      stream.next(m.mySide);
      stream.next(m.iskickoff);
      stream.next(m.readyTime);
      stream.next(m.penalty);
      stream.next(m.secondState);
      stream.next(m.secondInfo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct game_control_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::game_control_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::game_control_data_<ContainerAllocator>& v)
  {
    s << indent << "robotNum: ";
    Printer<int64_t>::stream(s, indent + "  ", v.robotNum);
    s << indent << "position: ";
    Printer<int64_t>::stream(s, indent + "  ", v.position);
    s << indent << "myTeam: ";
    Printer<int64_t>::stream(s, indent + "  ", v.myTeam);
    s << indent << "state: ";
    Printer<int64_t>::stream(s, indent + "  ", v.state);
    s << indent << "mySide: ";
    Printer<int64_t>::stream(s, indent + "  ", v.mySide);
    s << indent << "iskickoff: ";
    Printer<int64_t>::stream(s, indent + "  ", v.iskickoff);
    s << indent << "readyTime: ";
    Printer<int64_t>::stream(s, indent + "  ", v.readyTime);
    s << indent << "penalty: ";
    Printer<int64_t>::stream(s, indent + "  ", v.penalty);
    s << indent << "secondState: ";
    Printer<int64_t>::stream(s, indent + "  ", v.secondState);
    s << indent << "secondInfo[]" << std::endl;
    for (size_t i = 0; i < v.secondInfo.size(); ++i)
    {
      s << indent << "  secondInfo[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.secondInfo[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_GAME_CONTROL_DATA_H
