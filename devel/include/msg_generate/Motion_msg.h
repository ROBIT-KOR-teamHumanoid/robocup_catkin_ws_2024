// Generated by gencpp from file msg_generate/Motion_msg.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_MOTION_MSG_H
#define MSG_GENERATE_MESSAGE_MOTION_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <msg_generate/Step_msg.h>

namespace msg_generate
{
template <class ContainerAllocator>
struct Motion_msg_
{
  typedef Motion_msg_<ContainerAllocator> Type;

  Motion_msg_()
    : max_step(0)
    , repeat(0)
    , acc(0)
    , motion_data()  {
    }
  Motion_msg_(const ContainerAllocator& _alloc)
    : max_step(0)
    , repeat(0)
    , acc(0)
    , motion_data(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _max_step_type;
  _max_step_type max_step;

   typedef uint32_t _repeat_type;
  _repeat_type repeat;

   typedef uint32_t _acc_type;
  _acc_type acc;

   typedef std::vector< ::msg_generate::Step_msg_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::msg_generate::Step_msg_<ContainerAllocator> >> _motion_data_type;
  _motion_data_type motion_data;





  typedef boost::shared_ptr< ::msg_generate::Motion_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::Motion_msg_<ContainerAllocator> const> ConstPtr;

}; // struct Motion_msg_

typedef ::msg_generate::Motion_msg_<std::allocator<void> > Motion_msg;

typedef boost::shared_ptr< ::msg_generate::Motion_msg > Motion_msgPtr;
typedef boost::shared_ptr< ::msg_generate::Motion_msg const> Motion_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::Motion_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::Motion_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::Motion_msg_<ContainerAllocator1> & lhs, const ::msg_generate::Motion_msg_<ContainerAllocator2> & rhs)
{
  return lhs.max_step == rhs.max_step &&
    lhs.repeat == rhs.repeat &&
    lhs.acc == rhs.acc &&
    lhs.motion_data == rhs.motion_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::Motion_msg_<ContainerAllocator1> & lhs, const ::msg_generate::Motion_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::Motion_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::Motion_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::Motion_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::Motion_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::Motion_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::Motion_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::Motion_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fbcb902fe8f910d4d1cd05b17d5ee522";
  }

  static const char* value(const ::msg_generate::Motion_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfbcb902fe8f910d4ULL;
  static const uint64_t static_value2 = 0xd1cd05b17d5ee522ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::Motion_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/Motion_msg";
  }

  static const char* value(const ::msg_generate::Motion_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::Motion_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 max_step\n"
"uint32 repeat\n"
"uint32 acc\n"
"Step_msg[] motion_data\n"
"\n"
"================================================================================\n"
"MSG: msg_generate/Step_msg\n"
"int32 delay\n"
"int32 time\n"
"int32[] id\n"
"int32[] position\n"
"\n"
"\n"
;
  }

  static const char* value(const ::msg_generate::Motion_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::Motion_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.max_step);
      stream.next(m.repeat);
      stream.next(m.acc);
      stream.next(m.motion_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Motion_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::Motion_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::Motion_msg_<ContainerAllocator>& v)
  {
    s << indent << "max_step: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.max_step);
    s << indent << "repeat: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.repeat);
    s << indent << "acc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.acc);
    s << indent << "motion_data[]" << std::endl;
    for (size_t i = 0; i < v.motion_data.size(); ++i)
    {
      s << indent << "  motion_data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::msg_generate::Step_msg_<ContainerAllocator> >::stream(s, indent + "    ", v.motion_data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_MOTION_MSG_H
