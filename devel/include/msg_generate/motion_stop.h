// Generated by gencpp from file msg_generate/motion_stop.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_MOTION_STOP_H
#define MSG_GENERATE_MESSAGE_MOTION_STOP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct motion_stop_
{
  typedef motion_stop_<ContainerAllocator> Type;

  motion_stop_()
    : motion_stop(false)  {
    }
  motion_stop_(const ContainerAllocator& _alloc)
    : motion_stop(false)  {
  (void)_alloc;
    }



   typedef uint8_t _motion_stop_type;
  _motion_stop_type motion_stop;





  typedef boost::shared_ptr< ::msg_generate::motion_stop_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::motion_stop_<ContainerAllocator> const> ConstPtr;

}; // struct motion_stop_

typedef ::msg_generate::motion_stop_<std::allocator<void> > motion_stop;

typedef boost::shared_ptr< ::msg_generate::motion_stop > motion_stopPtr;
typedef boost::shared_ptr< ::msg_generate::motion_stop const> motion_stopConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::motion_stop_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::motion_stop_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::motion_stop_<ContainerAllocator1> & lhs, const ::msg_generate::motion_stop_<ContainerAllocator2> & rhs)
{
  return lhs.motion_stop == rhs.motion_stop;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::motion_stop_<ContainerAllocator1> & lhs, const ::msg_generate::motion_stop_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::motion_stop_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::motion_stop_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::motion_stop_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::motion_stop_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::motion_stop_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::motion_stop_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::motion_stop_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26a67ab0046f1f409ea3537c40f97362";
  }

  static const char* value(const ::msg_generate::motion_stop_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26a67ab0046f1f40ULL;
  static const uint64_t static_value2 = 0x9ea3537c40f97362ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::motion_stop_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/motion_stop";
  }

  static const char* value(const ::msg_generate::motion_stop_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::motion_stop_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool motion_stop\n"
;
  }

  static const char* value(const ::msg_generate::motion_stop_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::motion_stop_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motion_stop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motion_stop_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::motion_stop_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::motion_stop_<ContainerAllocator>& v)
  {
    s << indent << "motion_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motion_stop);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_MOTION_STOP_H
