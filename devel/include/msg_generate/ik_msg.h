// Generated by gencpp from file msg_generate/ik_msg.msg
// DO NOT EDIT!


#ifndef MSG_GENERATE_MESSAGE_IK_MSG_H
#define MSG_GENERATE_MESSAGE_IK_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_generate
{
template <class ContainerAllocator>
struct ik_msg_
{
  typedef ik_msg_<ContainerAllocator> Type;

  ik_msg_()
    : X_length(0.0)
    , Y_length(0.0)
    , Yaw(0.0)
    , flag(0.0)
    , One_X_length(0)
    , One_Y_length(0)
    , One_YAW(0)
    , One_step_flag(0)  {
    }
  ik_msg_(const ContainerAllocator& _alloc)
    : X_length(0.0)
    , Y_length(0.0)
    , Yaw(0.0)
    , flag(0.0)
    , One_X_length(0)
    , One_Y_length(0)
    , One_YAW(0)
    , One_step_flag(0)  {
  (void)_alloc;
    }



   typedef double _X_length_type;
  _X_length_type X_length;

   typedef double _Y_length_type;
  _Y_length_type Y_length;

   typedef double _Yaw_type;
  _Yaw_type Yaw;

   typedef double _flag_type;
  _flag_type flag;

   typedef int32_t _One_X_length_type;
  _One_X_length_type One_X_length;

   typedef int32_t _One_Y_length_type;
  _One_Y_length_type One_Y_length;

   typedef int32_t _One_YAW_type;
  _One_YAW_type One_YAW;

   typedef int32_t _One_step_flag_type;
  _One_step_flag_type One_step_flag;





  typedef boost::shared_ptr< ::msg_generate::ik_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_generate::ik_msg_<ContainerAllocator> const> ConstPtr;

}; // struct ik_msg_

typedef ::msg_generate::ik_msg_<std::allocator<void> > ik_msg;

typedef boost::shared_ptr< ::msg_generate::ik_msg > ik_msgPtr;
typedef boost::shared_ptr< ::msg_generate::ik_msg const> ik_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_generate::ik_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_generate::ik_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_generate::ik_msg_<ContainerAllocator1> & lhs, const ::msg_generate::ik_msg_<ContainerAllocator2> & rhs)
{
  return lhs.X_length == rhs.X_length &&
    lhs.Y_length == rhs.Y_length &&
    lhs.Yaw == rhs.Yaw &&
    lhs.flag == rhs.flag &&
    lhs.One_X_length == rhs.One_X_length &&
    lhs.One_Y_length == rhs.One_Y_length &&
    lhs.One_YAW == rhs.One_YAW &&
    lhs.One_step_flag == rhs.One_step_flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_generate::ik_msg_<ContainerAllocator1> & lhs, const ::msg_generate::ik_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_generate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::ik_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_generate::ik_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::ik_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_generate::ik_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::ik_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_generate::ik_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_generate::ik_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e34403e3b7a9f4022bce7eaacc3d24d";
  }

  static const char* value(const ::msg_generate::ik_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e34403e3b7a9f40ULL;
  static const uint64_t static_value2 = 0x22bce7eaacc3d24dULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_generate::ik_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_generate/ik_msg";
  }

  static const char* value(const ::msg_generate::ik_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_generate::ik_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 X_length\n"
"float64 Y_length\n"
"float64 Yaw\n"
"float64 flag\n"
"\n"
"int32 One_X_length\n"
"int32 One_Y_length\n"
"int32 One_YAW\n"
"int32 One_step_flag\n"
"\n"
"\n"
;
  }

  static const char* value(const ::msg_generate::ik_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_generate::ik_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.X_length);
      stream.next(m.Y_length);
      stream.next(m.Yaw);
      stream.next(m.flag);
      stream.next(m.One_X_length);
      stream.next(m.One_Y_length);
      stream.next(m.One_YAW);
      stream.next(m.One_step_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ik_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_generate::ik_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_generate::ik_msg_<ContainerAllocator>& v)
  {
    s << indent << "X_length: ";
    Printer<double>::stream(s, indent + "  ", v.X_length);
    s << indent << "Y_length: ";
    Printer<double>::stream(s, indent + "  ", v.Y_length);
    s << indent << "Yaw: ";
    Printer<double>::stream(s, indent + "  ", v.Yaw);
    s << indent << "flag: ";
    Printer<double>::stream(s, indent + "  ", v.flag);
    s << indent << "One_X_length: ";
    Printer<int32_t>::stream(s, indent + "  ", v.One_X_length);
    s << indent << "One_Y_length: ";
    Printer<int32_t>::stream(s, indent + "  ", v.One_Y_length);
    s << indent << "One_YAW: ";
    Printer<int32_t>::stream(s, indent + "  ", v.One_YAW);
    s << indent << "One_step_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.One_step_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_GENERATE_MESSAGE_IK_MSG_H
